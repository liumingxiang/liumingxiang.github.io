<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-07T02:14:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB的安装以及自启动详细教程</title>
    <link href="http://yoursite.com/2017/03/07/nodejs/mongodb/MongoDB/"/>
    <id>http://yoursite.com/2017/03/07/nodejs/mongodb/MongoDB/</id>
    <published>2017-03-06T17:57:20.000Z</published>
    <updated>2017-03-07T02:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下，我写这篇文章的背景，一直以来我也是这么实践的，那就是懒，嗯，对，就是懒，之前我自己配过这个mongodb，最近电脑重装了，然后我有个步骤忘记了，然后去网上查询资料，想改成自启动，可是我发现网上的教程没有一篇能把它说清楚的，所以我就把这个教程写了下来，供大家参考</p>
<p>———————————————————华丽的分割线—————————————————————-</p>
<p>MongoDB是一个基于分布式文件存储的数据库。由<a href="http://baike.baidu.com/view/824.htm" target="_blank" rel="external">C++</a>语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB[][ ]是一个介于<a href="http://baike.baidu.com/view/68348.htm" target="_blank" rel="external">关系数据库</a>和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似<a href="http://baike.baidu.com/view/136475.htm" target="_blank" rel="external">json</a>的<a href="http://baike.baidu.com/view/3463259.htm" target="_blank" rel="external">bson</a>格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立<a href="http://baike.baidu.com/view/262241.htm" target="_blank" rel="external">索引</a>。</p>
<a id="more"></a>
<p>首先我们要去下载我们的mongodb的zip包，不知道你们要下载什么，反正我是下载的zip，因为这个比较灵活，只需要解压就OK了，（记住哈，是zip格式）    <a href="https://www.mongodb.com/" target="_blank" rel="external">传送门</a></p>
<p><img src="/images/MongoDB/mdb16.png" alt="img"></p>
<p><img src="/images/MongoDB/mdb17.png" alt="img"></p>
<p>然后把他解压到我们电脑的某一个盘符的根目录譬如我这样 把它放在D盘根目录</p>
<p><img src="/images/MongoDB/mdb15.png" alt="img"></p>
<p>当我们把这些准备好以后，我们只需要在我们mongodb的目录下，建立一个data的目录（先不要管那个mongo.config）</p>
<p><img src="/images/MongoDB/mdb1.png" alt="img"></p>
<p>后面我们只需要在data中建立一个文件夹叫db还有一个文件夹叫log</p>
<p><img src="/images/MongoDB/mdb2.png" alt="img"></p>
<p>还有下面我们要在我们的log文件夹中建立一个mongodb.log文件，文件里不用填任何的东西</p>
<p><img src="/images/MongoDB/mdb3.png" alt="img"></p>
<p>下面我们只需要把我们的mongodb加入我们的path目录中，我们就可以在系统的任何地方启动我们的mongodb了</p>
<p><img src="/images/MongoDB/mdb4.png" alt="img"></p>
<p>然后我们就可以启动我们的数据库了，第一次启动的时候，我们要指定我们的数据库存储地址，上面我们建的的data里面的db</p>
<p>我们只需要执行一个命令就可以了，其实在你执行了上面一步之后，并不需要跳转到bin目录下，也依然可以执行我们的mongod命令，后面的<code>--dbpath D:\mongodb\data\db</code>千万不能忘，这是指定我们的数据存储地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">D:/mongodb/bin&gt;mongod --dbpath D:\mongodb\data\db</div><div class="line">D:\                                  </div><div class="line">λ cd mongodb\bin\                                                    </div><div class="line">D:\mongodb\bin                       </div><div class="line">λ mongod --dbpath D:\mongodb\data\db</div></pre></td></tr></table></figure>
<p><img src="/images/MongoDB/mdb13.png" alt="img"></p>
<p>就这样子，我们就在本地安装好了我们的mongodb</p>
<h3 id="但是，但是，但是。。。"><a href="#但是，但是，但是。。。" class="headerlink" title="但是，但是，但是。。。"></a>但是，但是，但是。。。</h3><p>如果真的这样子的话，我们每次都需要在我们需要的时候，都需要开启我们的cmd然后输入我们的mongod然后一直开着我们的cmd窗口才行，这样子很不方便好吗，如果真的这样子就完事了，我就不写这篇文章了。既然你是一名开发者，就肯定知道系统服务这个东西，我们也可以把我们的mongodb服务加入到我们的系统服务中，然后在开机的时候，自动开启我们的mongodb，这样子就很方便了。</p>
<p>—————————————————分割线———————————————–</p>
<p>下面我就带着你，把我们的mongodb加到我们的系统服务中</p>
<p>首先呢，我们需要在我们的mongodb根目录下，建立一个<code>mongo.config</code></p>
<p><img src="/images/MongoDB/mdb5.png" alt="img"></p>
<p>然后在文件中写入我们的mongodb.log的目录，以及我们的db的目录，如下（根据自己的实际情况来填写下面的路径）</p>
<p><img src="/images/MongoDB/mdb6.png" alt="img"></p>
<p>再然后我们在我们的cmd中输入下面的命令，可是你要根据自己的实际目录来改变自己的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config D:\mongodb\mongo.config --install --serviceName &quot;MongoDB&quot;</div></pre></td></tr></table></figure>
<p><img src="/images/MongoDB/mdb8.png" alt="img"></p>
<p>如果在我们的mongodb.log中看到以下信息，嗯，你就成功了</p>
<p><img src="/images/MongoDB/mdb14.png" alt="img"></p>
<p>下面我们在cmd或者<code>win+R</code>输入以下命令<code>services.msc</code>，来打开我们的服务列表</p>
<p><img src="/images/MongoDB/mdb9.png" alt="img"></p>
<p>然后我们就可以看到这些信息，在这里我们就可以看到我们的mongodb服务了</p>
<p><img src="/images/MongoDB/mdb10.png" alt="img"></p>
<p>然后我们右键进入属性，把启动项改为自动</p>
<p><img src="/images/MongoDB/mdb11.png" alt="img"></p>
<p>然后在回到上一级，把我们的服务启动了，就算正式完成了，噢耶</p>
<p><img src="/images/MongoDB/mdb12.png" alt="img"></p>
<p>至此我们的mongodb就算是真的安装以及可以自启动了，再也不用去看着黑黑的dos了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说一下，我写这篇文章的背景，一直以来我也是这么实践的，那就是懒，嗯，对，就是懒，之前我自己配过这个mongodb，最近电脑重装了，然后我有个步骤忘记了，然后去网上查询资料，想改成自启动，可是我发现网上的教程没有一篇能把它说清楚的，所以我就把这个教程写了下来，供大家参考&lt;/p&gt;
&lt;p&gt;———————————————————华丽的分割线—————————————————————-&lt;/p&gt;
&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库。由&lt;a href=&quot;http://baike.baidu.com/view/824.htm&quot;&gt;C++&lt;/a&gt;语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;MongoDB[][ ]是一个介于&lt;a href=&quot;http://baike.baidu.com/view/68348.htm&quot;&gt;关系数据库&lt;/a&gt;和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似&lt;a href=&quot;http://baike.baidu.com/view/136475.htm&quot;&gt;json&lt;/a&gt;的&lt;a href=&quot;http://baike.baidu.com/view/3463259.htm&quot;&gt;bson&lt;/a&gt;格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立&lt;a href=&quot;http://baike.baidu.com/view/262241.htm&quot;&gt;索引&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在github pages利用hexo快速搭建静态个人主页以及更改域名</title>
    <link href="http://yoursite.com/2017/01/18/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%9C%A8github%20pages%E5%88%A9%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2017/01/18/工具类/在github pages利用hexo快速搭建静态个人主页以及更改域名/</id>
    <published>2017-01-18T06:41:30.000Z</published>
    <updated>2017-03-03T02:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>github pages是一种提供免费托管静态页面的工具，可以免费作为我们的个人主页进行使用<br><a id="more"></a></p>
<p><a href="https://pages.github.com/" target="_blank" rel="external">官方地址</a></p>
<p>既然知道工具是做什么的了，下面我们就开始进行操作吧</p>
<h6 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h6><ol>
<li>首先你要确保的是你有一个github账号 <a href="https://github.com/" target="_blank" rel="external">传送门</a></li>
<li>还要确保你的电脑上有安装有git</li>
<li>最后还要有nodejs</li>
</ol>
<p>###在github上申请github pages空间<br>如果你已经看到这了  我已经默认你具备了上面的三个条件了！<br>如果你看了上面的介绍 你应该已经知道了怎么去申请这个空间了 但是为了避免有的人还是犯迷糊我下面还是讲一下怎么申请这个github pages空间吧，避免第一步就卡死这<br>登陆我们的github</p>
<p>点击这里新建一个仓储</p>
<p><img src="/images/github0.png" alt="img"></p>
<p>然后我们到了这个页面  我们按照我写的这个顺序进行操作</p>
<p><img src="/images/github2.png" alt="img">我们的仓储名格式是xxx.github.io<br>然后选择public<br>然后选择同意 就可以了</p>
<p>然后我们这个仓储就创建好了，图中的地址一定要记好，后面我们就有用了</p>
<p><img src="/images/github4.png" alt="img"></p>
<h3 id="安装hexo以及初始化"><a href="#安装hexo以及初始化" class="headerlink" title="安装hexo以及初始化"></a>安装hexo以及初始化</h3><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>首先你可以自己看看hexo的官网 <a href="https://hexo.io/" target="_blank" rel="external">传送门</a><br>首先在全局安装hexo的脚手架在cmd命令行中输入 <code>$ npm install hexo-cli -g</code> </p>
<p>等我们在全局安装好以后，找到你想放置你博客文件的目录 然后执行<code>hexo init blogName</code> 执行初始化操作</p>
<p><img src="/images/HEXO1.png" alt="img"></p>
<p>然后我们就在本地有了一个blog的文件夹，然后我们输入<code>cd blogName</code> 然后执行<code>hexo server</code>就可以在本地看到你的blog了，但是显然只是本地，你并不满足</p>
<p><img src="/images/HEXO2.png" alt="img"></p>
<p>看到这里  你是不是感觉很简单呀</p>
<p>对 就是这么简单</p>
<p>下面我们要做的就是往我们的git仓库里面进行push了</p>
<p>在hexo这个工具中我们可以直接配置我们的git地址</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">	//格式如下 https://账户:密码@你的仓储地址，也就是上面要你记住的地址</div><div class="line">  repo: https://账户:密码@github.com/xuhongbo/xuhongbo.github.io.git</div></pre></td></tr></table></figure>
<p>在你执行过上面那一步之后  你就离成功只剩一步了</p>
<p>下面我们再安装一个插件<code>npm install hexo-deployer-git --save</code>当然了，这个操作也是在我们的项目根目录中</p>
<p>然后就可以进行发布了<code>hexo generate --deploy</code></p>
<p><img src="/images/HEXO5.png" alt="img"></p>
<p>至此 你已经可以在你的github pages上看到你的个人博客了</p>
<p>如果你没有绑定个人域名的需求，就这样就不用往下面看了</p>
<h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>首先我们要有一个域名，如果没有的话，自己想办法哈，这个我是帮不了你</p>
<p>我在这里说一下怎么配dns和hexo中加入CNAME这两件事</p>
<p>在这里我拿万网作为例子</p>
<p>在dns解析中我们加入以下三条记录</p>
<p>分别是两条github pages ip 和一条你的github pages地址名如<code>xxx.github.io.</code>注意哈，最后的那个点千万别忘了</p>
<p><img src="/images/wanwang.png" alt="img"></p>
<p>对了下面我们最好还是在阿里云里面开了我们的免费的cdn加速会比较好</p>
<p><img src="/images/cdn.png" alt="img"></p>
<p>然后下面添加CNAME文件加入source文件夹中，然后在此文件中写入你的域名记住不带前面的http什么鬼的 只要 express.com 这一段然后再执行一次 <code>hexo generate --deploy</code>  </p>
<p><img src="/images/CNAME.png" alt="img"><img src="/images/CNAME2.png" alt="img"></p>
<p>嗯 所有工作已经做完了  你现在出去溜达一会  等个十来分钟  就可以访问了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github pages是一种提供免费托管静态页面的工具，可以免费作为我们的个人主页进行使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：Flex布局</title>
    <link href="http://yoursite.com/2016/06/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9AFlex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2016/06/20/前端知识点/前端知识点：Flex布局/</id>
    <published>2016-06-20T15:04:15.000Z</published>
    <updated>2017-04-01T08:12:34.569Z</updated>
    
    <content type="html"><![CDATA[<p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="external">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">display</a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="external">position</a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="external">float</a>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="external">垂直居中</a>就不容易实现。</p>
<p>![img]<img src="/images/flex/1.png" alt="img"></p>
<p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。——文章来源于阮一峰的网络日志！</p>
<a id="more"></a>
<p><img src="(/images/flex/2.png" alt="img">)</p>
<p>Flex布局将成为未来布局的首选方案。本文介绍它的语法。</p>
<h2 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为Flex布局。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box&#123;</div><div class="line">&gt;   display: flex;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>行内元素也可以使用Flex布局。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box&#123;</div><div class="line">&gt;   display: inline-flex;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>Webkit内核的浏览器，必须加上<code>-webkit</code>前缀。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; .box&#123;</div><div class="line">&gt;   display: -webkit-flex; /* Safari */</div><div class="line">&gt;   display: flex;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>注意，设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>
<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<p><img src="/images/flex/3.png" alt="img"></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p>
<blockquote>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
</blockquote>
<h3 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box &#123;</div><div class="line">&gt;   flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/4.png" alt="img"></p>
<p>它可能有4个值。</p>
<blockquote>
<ul>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
</ul>
</blockquote>
<h3 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="/images/flex/5.png" alt="img"></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box&#123;</div><div class="line">&gt;   flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>它可能取三个值。</p>
<p>（1）<code>nowrap</code>（默认）：不换行。</p>
<p><img src="/images/flex/6.png" alt="img"></p>
<p>（2）<code>wrap</code>：换行，第一行在上方。</p>
<p><img src="/images/flex/7.png" alt="img"></p>
<p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p>
<p><img src="/images/flex/8.png" alt="img"></p>
<h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box &#123;</div><div class="line">&gt;   flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box &#123;</div><div class="line">&gt;   justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/9.png" alt="img"></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<blockquote>
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</blockquote>
<h3 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box &#123;</div><div class="line">&gt;   align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/10.png" alt="img"></p>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<blockquote>
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</blockquote>
<h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .box &#123;</div><div class="line">&gt;   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/11.png" alt="img"></p>
<p>该属性可能取6个值。</p>
<blockquote>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</blockquote>
<h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p>
<blockquote>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
</blockquote>
<h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .item &#123;</div><div class="line">&gt;   order: &lt;integer&gt;;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/12.png" alt="img"></p>
<h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .item &#123;</div><div class="line">&gt;   flex-grow: &lt;number&gt;; /* default 0 */</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/13.png" alt="img"></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .item &#123;</div><div class="line">&gt;   flex-shrink: &lt;number&gt;; /* default 1 */</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/14.png" alt="img"></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .item &#123;</div><div class="line">&gt;   flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .item &#123;</div><div class="line">&gt;   flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .item &#123;</div><div class="line">&gt;   align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/flex/15.png" alt="img"></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布局的传统解决方案，基于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/box_model&quot;&gt;盒状模型&lt;/a&gt;，依赖 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display&quot;&gt;display&lt;/a&gt;属性 + &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/position&quot;&gt;position&lt;/a&gt;属性 + &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/float&quot;&gt;float&lt;/a&gt;属性。它对于那些特殊布局非常不方便，比如，&lt;a href=&quot;https://css-tricks.com/centering-css-complete-guide/&quot;&gt;垂直居中&lt;/a&gt;就不容易实现。&lt;/p&gt;
&lt;p&gt;![img]&lt;img src=&quot;/images/flex/1.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。——文章来源于阮一峰的网络日志！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：BFC</title>
    <link href="http://yoursite.com/2016/05/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9ABFC/"/>
    <id>http://yoursite.com/2016/05/10/前端知识点/前端知识点：BFC/</id>
    <published>2016-05-10T14:04:15.000Z</published>
    <updated>2017-04-01T08:03:57.449Z</updated>
    
    <content type="html"><![CDATA[<p>​    BFC什么鬼？在解释BFC之前先说一下文档流。我们常说的文档流其实分为定位流，浮动流和普通流。三种。而普通流其实就是指BFC中的FC。FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。BFC是block formatting context，也就是块级格式化上下文，是用于布局块级盒子的一块渲染区域，BFC 的一些用处（如清浮动，防止 margin 重叠等）</p>
<a id="more"></a>
<h3 id="一、BFC是什么？"><a href="#一、BFC是什么？" class="headerlink" title="一、BFC是什么？"></a>一、BFC是什么？</h3><p>　　在解释 BFC 是什么之前，需要先介绍 Box、Formatting Context的概念。</p>
<h4 id="Box-CSS布局的基本单位"><a href="#Box-CSS布局的基本单位" class="headerlink" title="　　Box: CSS布局的基本单位"></a>　　Box: CSS布局的基本单位</h4><p>　　Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>
<ul>
<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>
<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>
<li>run-in box: css3 中才有， 这儿先不讲了。</li>
</ul>
<h4 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="　　Formatting context"></a>　　Formatting context</h4><p>　　Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>
<p>　　CSS2.1 中只有 <code>BFC</code>和 <code>IFC</code>, <strong>CSS3 </strong>中还增加了 <code>GFC</code>和 <code>FFC。</code></p>
<h4 id="BFC-定义"><a href="#BFC-定义" class="headerlink" title="　　BFC 定义"></a>　　BFC 定义</h4><p>　　BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>
<h4 id="BFC布局规则："><a href="#BFC布局规则：" class="headerlink" title="　　BFC布局规则："></a>　　BFC布局规则：</h4><ol>
<li>内部的Box会在垂直方向，一个接一个地放置。</li>
<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>
<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li>BFC的区域不会与float box重叠。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算BFC的高度时，浮动元素也参与计算</li>
</ol>
<h3 id="二、哪些元素会生成BFC"><a href="#二、哪些元素会生成BFC" class="headerlink" title="二、哪些元素会生成BFC?"></a>二、哪些元素会生成BFC?</h3><ol>
<li>根元素</li>
<li>float属性不为none</li>
<li>position为absolute或fixed</li>
<li>display为inline-block, table-cell, table-caption, flex, inline-flex</li>
<li>overflow不为visible</li>
</ol>
<h3 id="三、BFC的作用及原理"><a href="#三、BFC的作用及原理" class="headerlink" title="三、BFC的作用及原理"></a>三、BFC的作用及原理</h3><h4 id="1-自适应两栏布局"><a href="#1-自适应两栏布局" class="headerlink" title="　1. 自适应两栏布局"></a>　1. 自适应两栏布局</h4><p>　　代码：</p>
<pre><code>body {
    width: 300px;
    position: relative;
}

.aside {
    width: 100px;
    height: 150px;
    float: left;
    background: #f66;
}

.main {
    height: 200px;
    background: #fcc;
}
</code></pre><p></p>
<body><br>    <div class="aside"></div><br>    <div class="main"></div><br></body>

<p>页面：</p>
<p><img src="/images/BFC/1.png" alt="img"></p>
<p>根据<code>BFC</code>布局规则第3条：</p>
<blockquote>
<p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p>
</blockquote>
<p>　　因此，虽然存在浮动的元素aslide，但main的左边依然会与包含块的左边相接触。</p>
<p>　　根据<code>BFC</code>布局规则第四条：</p>
<p><code>BFC</code>的区域不会与<code>float box</code>重叠。</p>
<p>　　我们可以通过通过触发main生成<code>BFC</code>， 来实现自适应两栏布局。</p>
<p>.main {</p>
<pre><code>overflow: hidden;
</code></pre><p>}</p>
<p>　　当触发main生成<code>BFC</code>后，这个新的<code>BFC</code>不会与浮动的aside重叠。因此会根据包含块的宽度，和aside的宽度，自动变窄。效果如下：</p>
<p><img src="/images/BFC/2.png" alt="img"></p>
<h4 id="2-清除内部浮动"><a href="#2-清除内部浮动" class="headerlink" title="2. 清除内部浮动"></a>2. 清除内部浮动</h4><p>　　代码：<style></p>
<pre><code>.par {
    border: 5px solid #fcc;
    width: 300px;
}

.child {
    border: 5px solid #f66;
    width:100px;
    height: 100px;
    float: left;
}
</code></pre><p></style></p>
<body><br>    <div class="par"><br>        <div class="child"></div><br>        <div class="child"></div><br>    </div><br></body>

<p><img src="/images/BFC/3.png" alt="img"></p>
<p>根据<code>BFC</code>布局规则第六条：</p>
<blockquote>
<p>计算<code>BFC</code>的高度时，浮动元素也参与计算</p>
</blockquote>
<p>　　为达到清除内部浮动，我们可以触发par生成<code>BFC</code>，那么par在计算高度时，par内部的浮动元素child也会参与计算。</p>
<p>　　代码：.par {</p>
<pre><code>overflow: hidden;
</code></pre><p>}</p>
<p><img src="/images/BFC/4.png" alt="img"></p>
<h4 id="3-防止垂直-margin-重叠"><a href="#3-防止垂直-margin-重叠" class="headerlink" title="3. 防止垂直 margin 重叠"></a>3. 防止垂直 margin 重叠</h4><p>　　代码：<style></p>
<pre><code>p {
    color: #f55;
    background: #fcc;
    width: 200px;
    line-height: 100px;
    text-align:center;
    margin: 100px;
}
</code></pre><p></style></p>
<body><br>    <p>Haha</p><br>    <p>Hehe</p><br></body>

<p><img src="/images/BFC/5.png" alt="img"></p>
<p>　两个p之间的距离为100px，发送了margin重叠。<br>　　根据BFC布局规则第二条：</p>
<blockquote>
<p><code>Box</code>垂直方向的距离由margin决定。属于同一个<code>BFC</code>的两个相邻<code>Box</code>的margin会发生重叠</p>
</blockquote>
<p>　　我们可以在p外面包裹一层容器，并触发该容器生成一个<code>BFC</code>。那么两个P便不属于同一个<code>BFC</code>，就不会发生margin重叠了。<br>　　代码：<style></p>
<pre><code>.wrap {
    overflow: hidden;
}
p {
    color: #f55;
    background: #fcc;
    width: 200px;
    line-height: 100px;
    text-align:center;
    margin: 100px;
}
</code></pre><p></style></p>
<body><br>    <p>Haha</p><br>    <div class="wrap"><br>        <p>Hehe</p><br>    </div><br></body>

<p><img src="/images/BFC/6.png" alt="img"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　其实以上的几个例子都体现了<code>BFC</code>布局规则第五条：</p>
<blockquote>
<p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>
</blockquote>
<p>　　因为<code>BFC</code>内部的元素和外部的元素绝对不会互相影响，因此， 当<code>BFC</code>外部存在浮动时，它不应该影响<code>BFC</code>内部Box的布局，<code>BFC</code>会通过变窄，而不与浮动有重叠。同样的，当<code>BFC</code>内部有浮动时，为了不影响外部元素的布局，<code>BFC</code>计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    BFC什么鬼？在解释BFC之前先说一下文档流。我们常说的文档流其实分为定位流，浮动流和普通流。三种。而普通流其实就是指BFC中的FC。FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。BFC是block formatting context，也就是块级格式化上下文，是用于布局块级盒子的一块渲染区域，BFC 的一些用处（如清浮动，防止 margin 重叠等）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：清除浮动</title>
    <link href="http://yoursite.com/2016/04/03/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2016/04/03/前端知识点/前端知识点：清除浮动/</id>
    <published>2016-04-03T12:04:15.000Z</published>
    <updated>2017-04-01T06:57:52.731Z</updated>
    
    <content type="html"><![CDATA[<p>前端技术栈更新太快，眼花缭乱，大家一个劲揽过来学习的时候，别忘了回头看看那些已经掌握的基础知识。</p>
<h2 id="浮动到底是什么？"><a href="#浮动到底是什么？" class="headerlink" title="##浮动到底是什么？"></a>##浮动到底是什么？</h2><p>浮动核心就一句话：<strong>浮动元素会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素</strong>。请默念3次！</p>
<a id="more"></a>
<ol>
<li><p>为父元素设置高度<br>为父元素定高，简单粗暴，坏处不用多说吧，没有人会这么干的…^_^</p>
</li>
<li><p>在父元素的最后设置  加空div标签 clear:both </p>
</li>
<li><p><code>clear:both</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;p&quot;&gt;</div><div class="line">     &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</div><div class="line">     &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</div><div class="line">     &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</div><div class="line">     &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;!--冗余的子元素--&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>原理如下：<br>当添加了最后一个冗余元素（未设置<code>clear:both</code>）时；父元素和此冗余元素的高度都为<code>0</code>，并且三个浮动的元素都浮在了它们的上方盖住了它们（可以把它们看成PS中的图层）。现在，给这个冗余元素添加<code>clear:both</code>（<a href="http://www.w3school.com.cn/cssref/pr_class_clear.asp" target="_blank" rel="external">clear属性介绍</a>），它便要躲开这三个浮动元素，因此，一直往下跑，直到没有被浮动元素盖住才停下来。而父元素看到这个子元素跑开了，自然想要包裹住它。</p>
<ol>
<li><p>为父元素设置高度<br>为父元素定高，简单粗暴，坏处不用多说吧，没有人会这么干的…^_^</p>
</li>
<li><p>在父元素的最后设置<code>clear:both</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;p&quot;&gt;</div><div class="line">     &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</div><div class="line">     &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</div><div class="line">     &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</div><div class="line">     &lt;div style=&quot;clear:left;&quot;&gt;&lt;/div&gt; &lt;!--冗余的子元素--&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>原理如下：<br>当添加了最后一个冗余元素（未设置<code>clear:both</code>）时；父元素和此冗余元素的高度都为<code>0</code>，并且三个浮动的元素都浮在了它们的上方盖住了它们（可以把它们看成PS中的图层）。现在，给这个冗余元素添加<code>clear:both</code>（<a href="http://www.w3school.com.cn/cssref/pr_class_clear.asp" target="_blank" rel="external">clear属性介绍</a>），它便要躲开这三个浮动元素，因此，一直往下跑，直到没有被浮动元素盖住才停下来。而父元素看到这个子元素跑开了，自然想要包裹住它。</p>
<p><img src="/images/fudong/3.png" alt="img"></p>
<p>​</p>
<ol>
<li><p>貌似不错，不过似乎有点问题——我们有必要在页面中添加这么多没有意义的冗余元素吗？显然这样太麻烦，而且不符合语义化。<br>还好有<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements" target="_blank" rel="external">伪元素</a>，这里我们使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after" target="_blank" rel="external"><code>::after</code></a>。添加一个类<code>fix</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.clearfix:after&#123;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    height: 0;</div><div class="line">    line-height: 0;</div><div class="line">    clear: both;</div><div class="line">    display: block;</div><div class="line">    visibility: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.clearfix&#123;</div><div class="line">	 zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我们需要清除浮动时，只需要给父元素追加<code>fix</code>类即可，既方便又符合语义化。<br>当然，大神的<code>fix</code>类这么写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.fix::after &#123; </div><div class="line">     content:&quot;&quot;; </div><div class="line">     display:table; </div><div class="line">     clear:both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大师手笔，看起来更清爽了……</p>
</li>
<li><p>给父元素添加<code>overflow:hidden</code><br>这里有必要了解一下<code>BFC</code><a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="external">块级格式化上下文</a>，只说结论：</p>
<blockquote>
<p>创建了 BFC的元素就是一个独立的盒子，不过只有Block-level box可以参与创建BFC， 它规定了内部的Block-level Box如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。它具有以下特征：</p>
<ol>
<li>内部的Box会在垂直方向，从顶部开始一个接一个地放置。</li>
<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加。</li>
<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li>BFC的区域不会与float box叠加。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。</li>
<li><strong>计算BFC的高度时，浮动元素也参与计算。</strong></li>
</ol>
</blockquote>
<p>看到第六条，如获至宝。只需给父元素创建块级格式化上下文，就可以让浮动的元素参与高度计算，这样一来，父元素的高度就有了。<br>不单单只有给父元素添加<code>overflow:hidden</code>才可以创建块级格式化上下文，下列方法都可以：</p>
<ul>
<li>浮动 (元素的 <code>float</code>不为 <code>none</code>）</li>
<li>绝对定位元素 (元素的 <code>position</code>为 <code>absolute</code> 或 <code>fixed</code>)</li>
<li>行内块 inline-blocks (元素的 <code>display: inline-block</code>)</li>
<li>表格单元格 (元素的 <code>display: table-cell</code>，HTML表格单元格默认属性)</li>
<li>表格标题 (元素的 <code>display: table-caption</code>，HTML表格标题默认属性)</li>
<li><code>overflow</code>的值不为 visible的元素</li>
<li>弹性盒子 flex boxes (元素的 <code>display: flex</code> 或 <code>inline-flex</code>)</li>
</ul>
<p>用<code>overflow:hidden</code>较多的原因是不会带来其它的布局问题。</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端技术栈更新太快，眼花缭乱，大家一个劲揽过来学习的时候，别忘了回头看看那些已经掌握的基础知识。&lt;/p&gt;
&lt;h2 id=&quot;浮动到底是什么？&quot;&gt;&lt;a href=&quot;#浮动到底是什么？&quot; class=&quot;headerlink&quot; title=&quot;##浮动到底是什么？&quot;&gt;&lt;/a&gt;##浮动到底是什么？&lt;/h2&gt;&lt;p&gt;浮动核心就一句话：&lt;strong&gt;浮动元素会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素&lt;/strong&gt;。请默念3次！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：任意元素的垂直水平居中</title>
    <link href="http://yoursite.com/2016/04/02/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E4%BB%BB%E6%84%8F%E5%85%83%E7%B4%A0%E7%9A%84%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2016/04/02/前端知识点/前端知识点：任意元素的垂直水平居中/</id>
    <published>2016-04-02T14:04:15.000Z</published>
    <updated>2017-03-31T16:04:06.966Z</updated>
    
    <content type="html"><![CDATA[<p>这里涉及到行内元素和块级元素。</p>
<p>行内元素和块级元素可以相互转换，比如用<strong>display</strong>来进行设置。</p>
<p><strong>行内元素（又叫内联元素inline element）:</strong>不占据一整行，随内容而定。</p>
<p>有以下特点：</p>
<p> ①不可以设置宽高，也不可以设置行高，其宽度随着内容增加，高度随字体大小而改变。</p>
<p>②内联元素可以设置外边界，但是外边界不对上下起作用，只能对左右起作用。</p>
<p>③也可以设置内边界，但是内边界在ie6中不对上下起作用，只能对左右起作用。</p>
<a id="more"></a>
<p>行内快配合 vertical-middle(需要一个空盒子)/<em> 通过表格去控制元素水平垂直居中元素设置成行内快 display: inline-block; 父级容器设置text-align：center vertical-align: middle; </em>/        .box{            width: 800px;            height: 800px;            border: 1px solid #000;            text-align: center;        }        .content{            background-color: red;            display: inline-block;            vertical-align: middle;        }        .info{            height: 100%;            width: 0;            vertical-align: middle;            display: inline-block;        }!<img src="/images/juzhong/1.png" alt="img"></p>
<p>通过表格去控制 table方法元素设置成行内快  父级容器设置text-align：center vertical-align: 最后把父元素转换为表格middle; display:table-cell;内容需要自己换行        .box{            width: 800px;            height: 800px;            border: 1px solid #000;            text-align: center;                       display: table-cell; /<em> 将这个盒子转换成表格单元格 </em>/            vertical-align: middle;        }        .content{            background-color: red;            display: inline-block;        } 通过transform:translate我们可以通过盒子的绝对定位配合transform：translate（-50%，-50%）实现一个没有宽度高度的盒子水平垂直居中 ,如果没有宽度的话，盒子最大的宽只能达到父盒子的一半<br>需要决定定位 和定位的位置<code>.box{    background-color: red;    position: absolute;    left: 50%;    top: 50%;    /* 因为translate的百分比参照是自身盒子的宽高，所以，我们可以借助于这个配合定位实现居中 */    transform: translate(-50%,-50%);}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里涉及到行内元素和块级元素。&lt;/p&gt;
&lt;p&gt;行内元素和块级元素可以相互转换，比如用&lt;strong&gt;display&lt;/strong&gt;来进行设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行内元素（又叫内联元素inline element）:&lt;/strong&gt;不占据一整行，随内容而定。&lt;/p&gt;
&lt;p&gt;有以下特点：&lt;/p&gt;
&lt;p&gt; ①不可以设置宽高，也不可以设置行高，其宽度随着内容增加，高度随字体大小而改变。&lt;/p&gt;
&lt;p&gt;②内联元素可以设置外边界，但是外边界不对上下起作用，只能对左右起作用。&lt;/p&gt;
&lt;p&gt;③也可以设置内边界，但是内边界在ie6中不对上下起作用，只能对左右起作用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：关于this</title>
    <link href="http://yoursite.com/2016/03/21/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%85%B3%E4%BA%8Ethis/"/>
    <id>http://yoursite.com/2016/03/21/前端知识点/前端知识点：前端知识点：关于this/</id>
    <published>2016-03-21T11:04:15.000Z</published>
    <updated>2017-03-31T15:23:59.403Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中最令人困惑的机制之一就是<code>this</code>关键字。它是一个在每个函数作用域中自动定义的特殊标识符关键字，但即便是一些老练的开发者也对它到底指向什么感到困扰。</p>
<blockquote>
<p>任何足够 <em>先进</em> 的技术都跟魔法没有区别。– Arthur C. Clarke</p>
</blockquote>
<p>JavaScript的<code>this</code>机制实际上没有 <em>那么</em> 先进，但是开发者们总是在大脑中引用这句话来表达“复杂”和“混乱”，毫无疑问，如果没有清晰的理解，在 <em>你的</em> 困惑中<code>this</code>可能看起来就是彻头彻尾的魔法。</p>
<p><strong>注意：</strong> “this”这个词是在一般的论述中极常用的代词。所以，特别是在口头论述中，很难确定我们是在将“this”作为一个代词使用，还是在将它作为一个实际的关键字识别符使用。为了表意清晰，我会总是使用<code>this</code>来代表特殊的关键字，而在其他情况下使用“this”或 <em>this</em> 或this。</p>
<a id="more"></a>
<p>​    1、普通函数中的this（严格模式this指的是undefined，否则指的是window）</p>
<p>​    2、构造函数中的this：this就是该构造函数创建的实例对象</p>
<p>​    3、原型方法中的this：this和构造函数中的this相同，都是实例对象</p>
<p>​    4、对象方法中的this: 调用该方法的对象（重点理解）（对象方法就是function）</p>
<p>​    5、事件方法中的this：绑定该事件的对象</p>
<p>​    6、定时函数中的this: this就是window</p>
<p>​    call/apply可以改变this指向，两者的唯一区别是：第二个参数格式不同：call参数都是单个的，而apply参数是数组</p>
<p>​    bind也可以改变函数的this指向，但是不调用函数（bind是ES5新测性）</p>
<p>(4)理解: // 对象方法</p>
<p>​    // 对象方法中的this就是方法的调用者（方法前面的点前面的对象）</p>
<p>​    // var obj = {};</p>
<p>​    // obj.info = 123;</p>
<p>​    // obj.showInfo = function(){</p>
<p>​    //     console.log(this.info);</p>
<p>​    // }</p>
<p>​    // obj.showInfo();</p>
<p>/*</p>
<p>​    函数调用形式与this的关系</p>
<p>​    */</p>
<p>​    // 普通函数</p>
<p>​    // 普通函数中this指向window，但是在严格模式下this的值是undefined</p>
<p>​    // function foo(){</p>
<p>​    //     “use strict”</p>
<p>​    //     console.log(this);</p>
<p>​    //     console.log(this === window);</p>
<p>​    // }</p>
<p>​    // foo();</p>
<p>​    // ———————————</p>
<p>​    // 构造函数</p>
<p>​    // 构造函数中的this与构造函数原型方法中的this指向相同，都指向该构造函数的实例对象</p>
<p>​    // function Student(name,age){</p>
<p>​    //     this.name = name;</p>
<p>​    //     this.age = age;</p>
<p>​    // }</p>
<p>​    // Student.prototype.showName = function(){</p>
<p>​    //     console.log(this.name);</p>
<p>​    // }</p>
<p>​    // var stu = new Student(‘张三’,12);</p>
<p>​    // console.log(stu.age);</p>
<p>​    // stu.showName();</p>
<p>​    // ———————————–</p>
<p>​    // 对象方法</p>
<p>​    // 对象方法中的this就是方法的调用者（方法前面的点前面的对象）</p>
<p>​    // var obj = {};</p>
<p>​    // obj.info = 123;</p>
<p>​    // obj.showInfo = function(){</p>
<p>​    //     console.log(this.info);</p>
<p>​    // }</p>
<p>​    // obj.showInfo();</p>
<p>​    // ———————————-</p>
<p>​    // call/apply改变所调用函数的内部this指向</p>
<p>​    // function foo(){</p>
<p>​    //     console.log(this);</p>
<p>​    // }</p>
<p>​    // foo.call({name:’abc’});</p>
<p>​    // foo.apply({name:’hello’});</p>
<p>​    // function sum(flag){</p>
<p>​    //     console.log(this.a + this.b);</p>
<p>​    //     console.log(flag);</p>
<p>​    //     return this.a + this.b;</p>
<p>​    // }</p>
<p>​    // // var ret = sum.call({a:123,b:456});</p>
<p>​    // // var ret = sum.call({a:11,b:22},true);</p>
<p>​    // var ret = sum.apply({a:11,b:22},[true]);</p>
<p>​    // console.log(ret);</p>
<p>​    // var arr = [1,223,34,455,34,3443,34];</p>
<p>​    // var ret = Math.max(1,223,34,455,34,3443,34);</p>
<p>​    // console.log(ret);</p>
<p>​    // var ret = Math.max.apply(null,arr);</p>
<p>​    // console.log(ret);</p>
<p>​    // arr.sort(function(a,b){</p>
<p>​    //     if(a &gt; b){</p>
<p>​    //         return 1;</p>
<p>​    //     }else if(a &lt; b){</p>
<p>​    //         return -1;</p>
<p>​    //     }else{</p>
<p>​    //         return 0;</p>
<p>​    //     }</p>
<p>​    // });</p>
<p>​    // console.log(arr);</p>
<p> /*</p>
<p>​    this补充</p>
<p>​    1、事件函数中的this</p>
<p>​    2、定时函数</p>
<p>​    */</p>
<p>​    window.onload = function(){</p>
<p>​        function Change(btn,div){</p>
<p>​            this.btn = document.getElementById(btn);</p>
<p>​            this.div = document.getElementById(div);</p>
<p>​        }</p>
<p>​        Change.prototype.change = function(){</p>
<p>​            // 原型方法中的this指的是构造函数的实例对象</p>
<p>​            var that = this;</p>
<p>​            this.btn.onclick = function(){</p>
<p>​                // 事件函数中的this就是绑定事件的对象</p>
<p>​                that.div.innerHTML = ‘测试数据’;</p>
<p>​            }</p>
<p>​        }</p>
<p>​    }</p>
<p>​    // ————————————–</p>
<p>​    setTimeout(function(){</p>
<p>​        // 定时函数中的this就是window</p>
<p>​        console.log(this);</p>
<p>​    },1000);</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中最令人困惑的机制之一就是&lt;code&gt;this&lt;/code&gt;关键字。它是一个在每个函数作用域中自动定义的特殊标识符关键字，但即便是一些老练的开发者也对它到底指向什么感到困扰。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何足够 &lt;em&gt;先进&lt;/em&gt; 的技术都跟魔法没有区别。– Arthur C. Clarke&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript的&lt;code&gt;this&lt;/code&gt;机制实际上没有 &lt;em&gt;那么&lt;/em&gt; 先进，但是开发者们总是在大脑中引用这句话来表达“复杂”和“混乱”，毫无疑问，如果没有清晰的理解，在 &lt;em&gt;你的&lt;/em&gt; 困惑中&lt;code&gt;this&lt;/code&gt;可能看起来就是彻头彻尾的魔法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; “this”这个词是在一般的论述中极常用的代词。所以，特别是在口头论述中，很难确定我们是在将“this”作为一个代词使用，还是在将它作为一个实际的关键字识别符使用。为了表意清晰，我会总是使用&lt;code&gt;this&lt;/code&gt;来代表特殊的关键字，而在其他情况下使用“this”或 &lt;em&gt;this&lt;/em&gt; 或this。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：面向对象(下)</title>
    <link href="http://yoursite.com/2016/02/12/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2016/02/12/前端知识点/前端知识点：前端知识点：面向对象(下)/</id>
    <published>2016-02-12T14:04:15.000Z</published>
    <updated>2017-03-31T14:52:36.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-如何编写面向对象程序"><a href="#7-如何编写面向对象程序" class="headerlink" title="7. 如何编写面向对象程序"></a>7. 如何编写面向对象程序</h2><ol>
<li>采用构造+原型，写一个构造函数</li>
<li>把方法挂在原型上(不能有方法嵌套)</li>
<li>把全局变量变成属性</li>
<li>调整this</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // 1. 写一个构造函数    function ToRed() &#123;        // 3. 全局变量变成属性        this.oDiv = document.body.children[0];        // document.onclick = this.fnClick;        // 上句相当于        // document.onclick = function() &#123;        //  alert(this);    // document        //  this.oDiv.style.background = &apos;#f00&apos;;    // 当前的this指向document，错误        // &#125;        // 4. 调整this        var _this = this;        document.onclick = function() &#123;            _this.fnClick();        &#125;    &#125;    // 2. 方法挂在原型上    ToRed.prototype.fnClick = function() &#123;        this.oDiv.style.background = &apos;#f00&apos;;    &#125;    new ToRed();&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>``</p>
<h2 id="8-面向对象：继承"><a href="#8-面向对象：继承" class="headerlink" title="8. 面向对象：继承"></a>8. 面向对象：继承</h2><ol>
<li><p>属性的继承</p>
</li>
<li><ul>
<li><code>父级的构造函数.call(this, 参数1, 参数2, ...);</code></li>
<li><code>父级的构造函数.apply(this, arguments);</code></li>
</ul>
</li>
<li><p>方法的继承</p>
</li>
<li><ul>
<li><code>子级.prototype = 父级.prototype;</code> // 引用 子级新方法在此之前写会被清空<br>问题：子级改了，父级也改了</li>
<li>循环复制</li>
</ul>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    for(var name in 父级.prototype) &#123;        子级.prototype[name] = 父级.prototype[name];  // 循环复制父级的方法    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><ul>
<li>问题：<code>子级 instanceof 父级;</code> // false</li>
<li>组合继承：子级的原型对象指向父级的实例，子级的原型对象的构造函数再指向自己。 <strong>推荐使用</strong></li>
</ul>
</li>
<li><ol>
<li>``</li>
</ol>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    子级.prototype = new 父级的构造函数();    子级.prototype.constructor = 子级的构造函数;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="实例：自动播放选项卡-继承"><a href="#实例：自动播放选项卡-继承" class="headerlink" title="实例：自动播放选项卡(继承)"></a>实例：自动播放选项卡(继承)</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;    * &#123;        margin: 0;        padding: 0;    &#125;    #box button.active, #box2 button.active &#123;        background: #ff0;    &#125;    #box div, #box2 div &#123;        display: none;        width: 100px;        height: 100px;        font-size: 20px;        border: 1px solid #ccc;    &#125;    #box div.active, #box2 div.active &#123;        display: block;    &#125;&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 不自动播放 --&gt;&lt;div id=&quot;box&quot;&gt;    &lt;button class=&quot;active&quot;&gt;btn1&lt;/button&gt;    &lt;button&gt;btn2&lt;/button&gt;    &lt;button&gt;btn3&lt;/button&gt;    &lt;div class=&quot;active&quot;&gt;div1&lt;/div&gt;    &lt;div&gt;div2&lt;/div&gt;    &lt;div&gt;div3&lt;/div&gt;&lt;/div&gt;&lt;!-- 自动播放 --&gt;&lt;div id=&quot;box2&quot;&gt;    &lt;button class=&quot;active&quot;&gt;btn1&lt;/button&gt;    &lt;button&gt;btn2&lt;/button&gt;    &lt;button&gt;btn3&lt;/button&gt;    &lt;div class=&quot;active&quot;&gt;div1&lt;/div&gt;    &lt;div&gt;div2&lt;/div&gt;    &lt;div&gt;div3&lt;/div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // 构造函数写属性    function Tab(id) &#123;        if(!id) &#123;            return;        &#125;        this.oBox = document.getElementById(id);        this.aBtn = this.oBox.getElementsByTagName(&apos;button&apos;);        this.aDiv = this.oBox.getElementsByTagName(&apos;div&apos;);    &#125;    // 原型写方法    Tab.prototype.fnClick = function() &#123;        var _this = this;        for (var i = 0; i &lt; this.aBtn.length; i++) &#123;            (function(index) &#123;                _this.aBtn[i].onclick = function() &#123;                    _this._click(this, index);                &#125;            &#125;)(i);        &#125;    &#125;    Tab.prototype._click = function(oBtn, index) &#123;        for (var i = 0; i &lt; this.aBtn.length; i++) &#123;            this.aBtn[i].className = &apos;&apos;;            this.aDiv[i].className = &apos;&apos;;        &#125;        oBtn.className = &apos;active&apos;;        this.aDiv[index].className = &apos;active&apos;;    &#125;    // 自动播放属性    function AutoTab(id) &#123;        var _this = this;        Tab.call(this, id);  // 继承Tab属性        this.iNow = 0;  // 当前选项卡索引值        this.timer = null;        clearInterval(this.timer);        this.timer = setInterval(function() &#123;            _this.next();        &#125;, 1000);    &#125;    AutoTab.prototype = new Tab();  // 继承Tab方法    AutoTab.prototype.constructor = AutoTab;    // 自动播放方法    AutoTab.prototype.next = function() &#123;        this._click(this.aBtn[this.iNow], this.iNow);        this.iNow++;        if(this.iNow == this.aBtn.length) &#123;            this.iNow = 0;        &#125;        this.fnClick();    &#125;    var old_click = AutoTab.prototype._click;    AutoTab.prototype._click = function(oBtn, index) &#123;        this.iNow = index;        old_click.apply(this, arguments);  // 调整this    &#125;    var oTab = new Tab(&apos;box&apos;);  // 不自动播放    var oAuto = new AutoTab(&apos;box2&apos;);    oAuto.next();  // 自动播放    console.log(oTab.constructor == Tab);   // true    console.log(oTab instanceof AutoTab);   // false    console.log(oAuto.constructor == AutoTab);  // true    console.log(oAuto instanceof AutoTab);  // true    console.log(oAuto instanceof Tab);  // true&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="9-解决变量名冲突的多种方法"><a href="#9-解决变量名冲突的多种方法" class="headerlink" title="9. 解决变量名冲突的多种方法"></a>9. 解决变量名冲突的多种方法</h2><p>​    1. 闭包、自执行函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    (function()&#123;&#125;)();    (function()&#123;&#125;());    // 首部加符号防止报错，不限于~    ~function()&#123;&#125;();&lt;/script&gt;</div></pre></td></tr></table></figure>
<ol>
<li><p>面向对象</p>
</li>
<li><p>命名空间</p>
</li>
<li><p>模块化</p>
</li>
<li><p>let(ES6)</p>
</li>
</ol>
<h2 id="10-伪数组问题"><a href="#10-伪数组问题" class="headerlink" title="10. 伪数组问题"></a>10. 伪数组问题</h2><ul>
<li><strong>DOM获取的元素是伪数组</strong></li>
<li><strong>arguments是伪数组</strong></li>
</ul>
<blockquote>
<p>注意json属性名不用纯数字</p>
</blockquote>
<h2 id="11-js的冒泡-Bubbling-Event-和捕获-Capture-Event-的区别"><a href="#11-js的冒泡-Bubbling-Event-和捕获-Capture-Event-的区别" class="headerlink" title="11. js的冒泡(Bubbling Event)和捕获(Capture Event)的区别"></a>11. js的冒泡(Bubbling Event)和捕获(Capture Event)的区别</h2><blockquote>
<p>这个问题在之前的原生篇没有写好，这边补充进来。面试题那篇中也有这题。</p>
</blockquote>
<p>js之事件冒泡和事件捕获详细介绍</p>
<ol>
<li>冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。</li>
<li>捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)。</li>
<li>DOM事件流：<strong>同时支持两种事件模型</strong>：捕获型事件和冒泡型事件，但是，<strong>捕获型事件先发生</strong>。两种事件流会触及DOM中的所有对象，从document对象开始，也在document对象结束。<br>DOM事件模型最独特的性质是，文本节点也触发事件(在IE中不会)。</li>
</ol>
<p>示例<br>假设一个元素div，它有一个下级元素p。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;　　&lt;p&gt;元素&lt;/p&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这两个元素都绑定了click事件，如果用户点击了p：</p>
<ul>
<li>事件捕获<br>当你使用事件捕获时，<strong>父级元素先触发</strong>，子级元素后触发，即div先触发，p后触发。</li>
<li>事件冒泡<br>当你使用事件冒泡时，<strong>子级元素先触发</strong>，父级元素后触发，即p先触发，div后触发。</li>
</ul>
<blockquote>
<p>addEventListener函数，它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。<br>IE只支持事件冒泡，不支持事件捕获。</p>
</blockquote>
<p><img src="http://mmbiz.qpic.cn/mmbiz_png/2bdBSyvBaf148xN0ibmV7CNCJkEPpTW5BiapEnYTibxRdiaXsedbhR6OFcyeGfcfPUibyic67OSTRU8rLNdfq1a7JGdg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p>
<h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><p>• 在W3c中，使用<code>stopPropagation()</code>方法<br>• 在IE下设置<code>oEvent.cancelBubble = true</code>；</p>
<blockquote>
<p>在捕获的过程中stopPropagation()后，后面的冒泡过程也不会发生了。</p>
</blockquote>
<h3 id="阻止捕获"><a href="#阻止捕获" class="headerlink" title="阻止捕获"></a>阻止捕获</h3><p><strong>阻止事件的默认行为</strong>，例如<code>click &lt;a&gt;</code>后的跳转</p>
<p>• 在W3c中，使用<code>oEvent.preventDefault()</code>方法；<br>• 在IE下设置<code>window.event.returnValue = false;</code>或<code>return false</code></p>
<h2 id="12-如何写一个自己的框架"><a href="#12-如何写一个自己的框架" class="headerlink" title="12. 如何写一个自己的框架"></a>12. 如何写一个自己的框架</h2><blockquote>
<p>以下只是我自己的一点想法，有些幼稚，大家可以提供更好的意见</p>
</blockquote>
<h3 id="仿写jQuery要点回顾"><a href="#仿写jQuery要点回顾" class="headerlink" title="仿写jQuery要点回顾"></a>仿写jQuery要点回顾</h3><ul>
<li><p>链式运动<br>每个功能方法最后需返回当前对象<br><code>return this;</code></p>
</li>
<li><p>编写插件</p>
</li>
<li><ul>
<li>一个插件(插件中的this不用加$)</li>
</ul>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.fn = jQuery.prototype;    $.fn.插件名 = fn;    // 调用    $(div).插件名();&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><ul>
<li>一组插件</li>
</ul>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.fn = jQuery.prototype;      $.fn.extend = jQuery.prototype.extend = function(json) &#123;        for(var name in json) &#123;            jQuery.prototype[name] = json[name];        &#125;    &#125;    // 调用    $(div).插件名();&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>$.ajax</code></p>
</li>
<li><ul>
<li><code>$.xxx</code>形式 放在原型的属性上</li>
<li><code>xxx.find()</code>形式 放在原型的原型链上</li>
</ul>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.ajax = jQuery.ajax = function(json) &#123;        // 调用原生的ajax方法，jsonp同理        ajax(json);    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;7-如何编写面向对象程序&quot;&gt;&lt;a href=&quot;#7-如何编写面向对象程序&quot; class=&quot;headerlink&quot; title=&quot;7. 如何编写面向对象程序&quot;&gt;&lt;/a&gt;7. 如何编写面向对象程序&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;采用构造+原型，写一个构造函数&lt;/li&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：面向对象(中)</title>
    <link href="http://yoursite.com/2016/02/11/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD)/"/>
    <id>http://yoursite.com/2016/02/11/前端知识点/前端知识点：前端知识点：面向对象(中)/</id>
    <published>2016-02-10T18:04:15.000Z</published>
    <updated>2017-03-31T15:25:40.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><h3 id="1-对象组成"><a href="#1-对象组成" class="headerlink" title="(1) 对象组成"></a>(1) 对象组成</h3><ol>
<li><strong>属性(变量)</strong></li>
<li><strong>方法(函数)</strong></li>
</ol>
<h3 id="2-面向对象特征"><a href="#2-面向对象特征" class="headerlink" title="(2) 面向对象特征"></a>(2) 面向对象特征</h3><ol>
<li><strong>封装</strong></li>
<li><strong>继承</strong><br>子级可以继承父级的一切东西</li>
<li><strong>多态</strong><br>子级可以继承多个父级</li>
</ol>
<h3 id="3-对象相关方法"><a href="#3-对象相关方法" class="headerlink" title="(3) 对象相关方法"></a>(3) 对象相关方法</h3><ul>
<li><p>instanceof 判断是否属于该类型</p>
</li>
<li><ul>
<li>true 属于</li>
<li>false 不属于<br>eg: <code>arr instanceof Array;</code> // true</li>
</ul>
</li>
<li><p>constructor 查找对象的父级<br>eg: <code>arr.constructor == Array;</code> // true</p>
</li>
</ul>
<blockquote>
<p><strong>JSON不是一个类型，其父类型就是Object</strong><br><code>json.constructor == JSON;</code> // false<br><code>json.constructor == Object;</code> // true</p>
</blockquote>
<h4 id="执念"><a href="#执念" class="headerlink" title="执念"></a>执念</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var arr = [1, 2];    var json = &#123;&#125;;    var oDate = new Date();    console.log(arr.constructor == Array); // true    console.log(json.constructor == JSON); // false    console.log(json.constructor == Object); // true    console.log(typeof oDate); // object    console.log(oDate instanceof Date); // true    console.log(typeof Date); // function    console.log(Date instanceof Function); // true    console.log(oDate instanceof Function); // false    console.log(typeof Image); // function    console.log(Image instanceof Function); // true    // 开始划重点    console.log(Function instanceof Object); // true    console.log(Object instanceof Function); // true    console.log(Object instanceof Object); // true    console.log(Function instanceof Function); // true    console.log(arr instanceof Array); // true    console.log(Array instanceof Object); // true    console.log(arr instanceof Object); // *true    console.log(arr instanceof Array); // true    console.log(Array instanceof Function); // true    console.log(arr instanceof Function); // *false    Object.prototype.run = 7;    var run = 5;    var arr2 = [];    console.log(run); // 5    console.log(typeof run); // number    console.log(run instanceof Number); // false    console.log(Number instanceof Object); // true    console.log(Boolean instanceof Object); // true    console.log(run instanceof Object); // false    console.log(arr2.run); // 7&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2. 引用类型"></a>2. 引用类型</h2><ul>
<li><p>Object类型</p>
</li>
<li><p>Array类型</p>
</li>
<li><p>Date类型</p>
</li>
<li><p>RegExp类型</p>
</li>
<li><p>Function类型</p>
</li>
<li><p>基本包装类型</p>
</li>
<li><ul>
<li>Boolean类型</li>
<li>String类型</li>
</ul>
</li>
<li><p>内置对象</p>
</li>
<li><ul>
<li>Global对象</li>
<li>Math对象</li>
</ul>
</li>
</ul>
<h3 id="Array-sum实现原理"><a href="#Array-sum实现原理" class="headerlink" title="Array.sum实现原理"></a>Array.sum实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var arr = [1, 2, 3];    // sum的实现原理    Array.prototype.sum = function() &#123;        var sum = 0;        for(var i = 0; i &lt; this.length; i++) &#123;            sum += this[i];        &#125;        return sum;    &#125;    console.log(arr.sum());&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-forEach实现原理"><a href="#Array-forEach实现原理" class="headerlink" title="Array.forEach实现原理"></a>Array.forEach实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // forEach实现原理    if (!Array.prototype.forEach) &#123;        Array.prototype.forEach = function(fn) &#123;            for (var i = 0; i &lt; this.length; i++) &#123;                fn(this[i], i, this);            &#125;        &#125;;    &#125;    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].forEach(function(value, index, array) &#123;        assert(value, &quot;Is in position &quot; + index + &quot; out of &quot; + (array.length - 1));    &#125;);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-every实现原理"><a href="#Array-every实现原理" class="headerlink" title="Array.every实现原理"></a>Array.every实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.every === undefined) &#123;        Array.prototype.every = function(fun) &#123;            //遍历当前数组中每个元素            for (var i = 0; i &lt; this.length; i++) &#123;                if (this[i] !== undefined) &#123;                    //调用fun,依次传入当前元素值,位置i,当前数组作为参数  ，将返回值，保存在变量r中                    var r = fun(this[i], i, this);                    if (r == false) &#123; //如果r为false                        return false; //返回false                    &#125;                &#125;            &#125; //(遍历结束)            return true; //返回true        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-some原理"><a href="#Array-some原理" class="headerlink" title="Array.some原理"></a>Array.some原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.some === undefined) &#123;        Array.prototype.some = function(fun) &#123;            for (var i = 0; i &lt; this.length; i++) &#123;                if (this[i] !== unefined) &#123;                    var r = fun(this[i], i, this);                    if (r == true) &#123;                        return true;                    &#125;                &#125;            &#125;            return false;        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-map原理"><a href="#Array-map原理" class="headerlink" title="Array.map原理"></a>Array.map原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.map === undefined) &#123;        Array.prototype.map = function(fun) &#123;            //创建空数组: newArr            var newArr = [];            //遍历当前数组中每个元素            for (var i = 0; i &lt; this.length; i++) &#123;                //如果当前元素不是undefined                if (this[i] !== undefined) &#123; //判断稀疏数组                    //调用fun传入当前元素值，位置i，当前数组，将结果保存在r中                    //将newArr的i位置赋值为r                    var r = fun(this[i], i, this);                    newArr[i] = r;                &#125;            &#125; //(遍历结束)            return newArr; //返回newArr        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-reduce原理"><a href="#Array-reduce原理" class="headerlink" title="Array.reduce原理"></a>Array.reduce原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.reduce === undefined) &#123;        Array.prototype.reduce = function(fun, base) &#123;            base === undefined &amp;&amp; (base = 0);            for (var i = 0; i &lt; this.length; i++) &#123;                if (this[i] !== undefined) &#123;                    base = fun(base, this[i], i, this);                &#125;            &#125;            return base;        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Function-bind原理"><a href="#Function-bind原理" class="headerlink" title="Function.bind原理"></a>Function.bind原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Function.prototype.bind === undefined) &#123;        Function.prototype.bind = function(obj /*，参数列表*/ ) &#123;            var fun = this; //留住this            //*****将类数组对象，转化为普通数组            var args = Array.prototype.slice.call(arguments, 1);            //args保存的就是提前绑定的参数列表            /*function slice(1)&#123;               var sub=[];               for(var i=0;i&lt;length;i++)&#123;                sub.push(arguments[i]);               &#125;               return sub;            &#125;*/            return function() &#123;                //将后传入的参数值，转为普通数组                      var innerArgs = Array.prototype.slice.call(arguments); //将之前绑定的参数值和新传入的参数值，拼接为完整参数之列表                var allArgs = args.concat(innerArgs)                    //调用原始函数fun，替换this为obj，传入所有参数                fun.apply(obj, allArgs);            &#125;        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="3-创建对象前导"><a href="#3-创建对象前导" class="headerlink" title="3. 创建对象前导"></a>3. 创建对象前导</h2><h3 id="1-关于new"><a href="#1-关于new" class="headerlink" title="(1) 关于new"></a>(1) 关于new</h3><ol>
<li>创建一个空对象，并赋值给this</li>
<li>返回this</li>
</ol>
<h3 id="2-关于this"><a href="#2-关于this" class="headerlink" title="(2) 关于this"></a>(2) 关于this</h3><p>当前方法属于谁，this就是谁<br><strong>this默认属于window</strong></p>
<p><strong>this的优先级</strong>：</p>
<ol>
<li>new -&gt; object</li>
<li>定时器 -&gt; window</li>
<li>事件 -&gt; 事件对象</li>
<li>方法 -&gt; 方法对象</li>
</ol>
<blockquote>
<p><strong>多包一层时优先级失效</strong></p>
</blockquote>
<p>哈哈，关于this的坑详见后面的坑集合！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function show() &#123;        console.log(this);    &#125;    var arr = [1, 2];    arr.show = show;    document.onclick = arr.show; // 点击时 document    new arr.show(); // 1. object    new show(); // 2. object    new document.onclick(); // 3. object    setTimeout(show, 1000); // 9. window    setTimeout(arr.show, 1000); // 10. window    setTimeout(new arr.show, 1000); // 4. object **在上两个行执行前先弹出    var oDate = new Date();    oDate.show = show;    document.show = show;    document.onclick = show;    setTimeout(function() &#123; // setTimeout多包一层优先级失效        oDate.show(); // 5. oDate时间        new oDate.show(); // 6. object        document.show(); // 7. document        document.onclick(); // 8. document    &#125;, 100);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="强制改变this指向"><a href="#强制改变this指向" class="headerlink" title="强制改变this指向"></a>强制改变this指向</h4><ul>
<li><p>call</p>
</li>
<li><ul>
<li><code>fn.call(a);</code> 改变this指向，指向a</li>
<li><code>fn.call(a, p1, p2);</code> 改变this指向并传参p1, p2</li>
</ul>
</li>
<li><p>apply</p>
</li>
<li><ul>
<li><code>fn.apply(a, [p1, p2]);</code> 改变this指向并传入参数数组</li>
<li><code>fn.apply(a, arguments);</code> 改变this指向并传入当前方法(非fn)的参数数组</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-面向对象&quot;&gt;&lt;a href=&quot;#1-面向对象&quot; class=&quot;headerlink&quot; title=&quot;1. 面向对象&quot;&gt;&lt;/a&gt;1. 面向对象&lt;/h2&gt;&lt;h3 id=&quot;1-对象组成&quot;&gt;&lt;a href=&quot;#1-对象组成&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：选择器</title>
    <link href="http://yoursite.com/2016/02/11/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2016/02/11/前端知识点/前端知识点：前端知识点：选择器/</id>
    <published>2016-02-10T18:04:15.000Z</published>
    <updated>2017-03-31T15:02:51.646Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>H5选择器</p>
</li>
<li><ul>
<li>querySelectorAll 对比 getElements 的优势</li>
<li>jQuery的选择器即是querySelectorAll</li>
</ul>
</li>
<li><p>H5自定义属性 dataset</p>
</li>
<li><p>H5元素类名操作 classList</p>
</li>
</ul>
<a id="more"></a>
<h2 id="3-H5选择器补充"><a href="#3-H5选择器补充" class="headerlink" title="3. H5选择器补充"></a>3. H5选择器补充</h2><p>*兼容：IE8+</p>
<ul>
<li><p>​</p>
<p>document/dom.querySelector() 匹配指定 css 选择器的一个元素</p>
</li>
<li><p>​</p>
<p>querySelectorAll() 匹配指定 css 选择器的所有元素 (NodeList)</p>
</li>
</ul>
<blockquote>
<p><strong>注意：</strong> querySelectorAll()方法得到的类数组对象是非动态实时的</p>
</blockquote>
<h3 id="querySelectorAll-对比-getElements-的优势"><a href="#querySelectorAll-对比-getElements-的优势" class="headerlink" title="querySelectorAll 对比 getElements 的优势"></a>querySelectorAll 对比 getElements 的优势</h3><p>可以操作数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var aBox = document.querySelectorAll(&apos;div&apos;);    // getElements得到的是伪数组，不能操作各项的属性    // var aBox = document.getElementsByTagName(&apos;div&apos;);    // for (var i = 0; i &lt; aBox.length; i++) &#123;    //  aBox[i].onclick = function() &#123;    //      alert(1);    //  &#125;    // &#125;    aBox.forEach(function(item, index) &#123;        item.onclick = function() &#123;            alert(index);            // 弹出当前点击div的索引值，依次为0、1、2        &#125;    &#125;)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="jQuery的选择器即是querySelectorAll"><a href="#jQuery的选择器即是querySelectorAll" class="headerlink" title="jQuery的选择器即是querySelectorAll"></a>jQuery的选择器即是querySelectorAll</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function $(selector) &#123;        var items = document.querySelectorAll(selector);        if(items.length &gt; 1) &#123;            return items;        &#125; else if (items.length == 0) &#123;            return;        &#125; else &#123;            return items[0];        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>##.CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</p>
<pre><code>*   1.id选择器（ # myid）
    2.类选择器（.myclassname）
    3.标签选择器（div, h1, p）
    4.相邻选择器（h1 + p）
    5.子选择器（ul &lt; li）
    6.后代选择器（li a）
    7.通配符选择器（ * ）
    8.属性选择器（a[rel = &quot;external&quot;]）
    9.伪类选择器（a: hover, li: nth - child）
</code></pre><p>##CSS3新增伪类举例：<br>    p:first-of-type 选择属于其父元素的首个 </p><p> 元素的每个 </p><p> 元素。<br>    p:last-of-type  选择属于其父元素的最后 </p><p> 元素的每个 </p><p> 元素。<br>    p:only-of-type  选择属于其父元素唯一的 </p><p> 元素的每个 </p><p> 元素。<br>    p:only-child    选择属于其父元素的唯一子元素的每个 </p><p> 元素。<br>    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 </p><p> 元素。<br>    :enabled、:disabled 控制表单控件的禁用状态。<br>    :checked，单选框或复选框被选中。<br>上图一张：<br><img src="/images/css3t/1.png" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;H5选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;querySelectorAll 对比 getElements 的优势&lt;/li&gt;
&lt;li&gt;jQuery的选择器即是querySelectorAll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H5自定义属性 dataset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H5元素类名操作 classList&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：面向对象(上)</title>
    <link href="http://yoursite.com/2016/02/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2016/02/10/前端知识点/前端知识点：前端知识点：面向对象(上)/</id>
    <published>2016-02-09T17:34:15.000Z</published>
    <updated>2017-03-31T14:50:49.885Z</updated>
    
    <content type="html"><![CDATA[<p>1.面向过程编程:注重解决问题的步骤,分析问题需要的每一步,实现函数依次调用。</p>
<p>2.面向对象编程:注重问题中的对象,分析问题中对象的联系,实现对象间的通讯解决问题.面向对象编程淡化过程,强调对象 更贴近我们人日常处理问题的方式。</p>
<p>3.面向过程:所有功能都是在需要使用的时候才开发,相当于去餐馆点菜,现点现做,需要等。</p>
<p>4.面向对象:在正式开发之前,就先把所有需要使用的功能都开发好,并以属性或者方法的形式存放</p>
<p>在一个对象中,在实际开发的时候根据需要来调用写好的功能。相当于去快餐店吃快餐,菜都是</p>
<p>事先已经炒好的,去了就可以吃。</p>
<a id="more"></a>
<h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><h3 id="1-对象组成"><a href="#1-对象组成" class="headerlink" title="(1) 对象组成"></a>(1) 对象组成</h3><ol>
<li><strong>属性(变量)</strong></li>
<li><strong>方法(函数)</strong></li>
</ol>
<h3 id="2-面向对象特征"><a href="#2-面向对象特征" class="headerlink" title="(2) 面向对象特征"></a>(2) 面向对象特征</h3><ol>
<li><strong>封装</strong></li>
<li><strong>继承</strong><br>子级可以继承父级的一切东西</li>
<li><strong>多态</strong><br>子级可以继承多个父级</li>
</ol>
<h3 id="3-对象相关方法"><a href="#3-对象相关方法" class="headerlink" title="(3) 对象相关方法"></a>(3) 对象相关方法</h3><ul>
<li><p>instanceof 判断是否属于该类型</p>
</li>
<li><ul>
<li>true 属于</li>
<li>false 不属于<br>eg: <code>arr instanceof Array;</code> // true</li>
</ul>
</li>
<li><p>constructor 查找对象的父级<br>eg: <code>arr.constructor == Array;</code> // true</p>
</li>
</ul>
<blockquote>
<p><strong>JSON不是一个类型，其父类型就是Object</strong><br><code>json.constructor == JSON;</code> // false<br><code>json.constructor == Object;</code> // true</p>
</blockquote>
<h4 id="执念"><a href="#执念" class="headerlink" title="执念"></a>执念</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var arr = [1, 2];    var json = &#123;&#125;;    var oDate = new Date();    console.log(arr.constructor == Array); // true    console.log(json.constructor == JSON); // false    console.log(json.constructor == Object); // true    console.log(typeof oDate); // object    console.log(oDate instanceof Date); // true    console.log(typeof Date); // function    console.log(Date instanceof Function); // true    console.log(oDate instanceof Function); // false    console.log(typeof Image); // function    console.log(Image instanceof Function); // true    // 开始划重点    console.log(Function instanceof Object); // true    console.log(Object instanceof Function); // true    console.log(Object instanceof Object); // true    console.log(Function instanceof Function); // true    console.log(arr instanceof Array); // true    console.log(Array instanceof Object); // true    console.log(arr instanceof Object); // *true    console.log(arr instanceof Array); // true    console.log(Array instanceof Function); // true    console.log(arr instanceof Function); // *false    Object.prototype.run = 7;    var run = 5;    var arr2 = [];    console.log(run); // 5    console.log(typeof run); // number    console.log(run instanceof Number); // false    console.log(Number instanceof Object); // true    console.log(Boolean instanceof Object); // true    console.log(run instanceof Object); // false    console.log(arr2.run); // 7&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2. 引用类型"></a>2. 引用类型</h2><ul>
<li><p>Object类型</p>
</li>
<li><p>Array类型</p>
</li>
<li><p>Date类型</p>
</li>
<li><p>RegExp类型</p>
</li>
<li><p>Function类型</p>
</li>
<li><p>基本包装类型</p>
</li>
<li><ul>
<li>Boolean类型</li>
<li>String类型</li>
</ul>
</li>
<li><p>内置对象</p>
</li>
<li><ul>
<li>Global对象</li>
<li>Math对象</li>
</ul>
</li>
</ul>
<h3 id="Array-sum实现原理"><a href="#Array-sum实现原理" class="headerlink" title="Array.sum实现原理"></a>Array.sum实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var arr = [1, 2, 3];    // sum的实现原理    Array.prototype.sum = function() &#123;        var sum = 0;        for(var i = 0; i &lt; this.length; i++) &#123;            sum += this[i];        &#125;        return sum;    &#125;    console.log(arr.sum());&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-forEach实现原理"><a href="#Array-forEach实现原理" class="headerlink" title="Array.forEach实现原理"></a>Array.forEach实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // forEach实现原理    if (!Array.prototype.forEach) &#123;        Array.prototype.forEach = function(fn) &#123;            for (var i = 0; i &lt; this.length; i++) &#123;                fn(this[i], i, this);            &#125;        &#125;;    &#125;    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].forEach(function(value, index, array) &#123;        assert(value, &quot;Is in position &quot; + index + &quot; out of &quot; + (array.length - 1));    &#125;);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-every实现原理"><a href="#Array-every实现原理" class="headerlink" title="Array.every实现原理"></a>Array.every实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.every === undefined) &#123;        Array.prototype.every = function(fun) &#123;            //遍历当前数组中每个元素            for (var i = 0; i &lt; this.length; i++) &#123;                if (this[i] !== undefined) &#123;                    //调用fun,依次传入当前元素值,位置i,当前数组作为参数  ，将返回值，保存在变量r中                    var r = fun(this[i], i, this);                    if (r == false) &#123; //如果r为false                        return false; //返回false                    &#125;                &#125;            &#125; //(遍历结束)            return true; //返回true        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-some原理"><a href="#Array-some原理" class="headerlink" title="Array.some原理"></a>Array.some原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.some === undefined) &#123;        Array.prototype.some = function(fun) &#123;            for (var i = 0; i &lt; this.length; i++) &#123;                if (this[i] !== unefined) &#123;                    var r = fun(this[i], i, this);                    if (r == true) &#123;                        return true;                    &#125;                &#125;            &#125;            return false;        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-map原理"><a href="#Array-map原理" class="headerlink" title="Array.map原理"></a>Array.map原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.map === undefined) &#123;        Array.prototype.map = function(fun) &#123;            //创建空数组: newArr            var newArr = [];            //遍历当前数组中每个元素            for (var i = 0; i &lt; this.length; i++) &#123;                //如果当前元素不是undefined                if (this[i] !== undefined) &#123; //判断稀疏数组                    //调用fun传入当前元素值，位置i，当前数组，将结果保存在r中                    //将newArr的i位置赋值为r                    var r = fun(this[i], i, this);                    newArr[i] = r;                &#125;            &#125; //(遍历结束)            return newArr; //返回newArr        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Array-reduce原理"><a href="#Array-reduce原理" class="headerlink" title="Array.reduce原理"></a>Array.reduce原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Array.prototype.reduce === undefined) &#123;        Array.prototype.reduce = function(fun, base) &#123;            base === undefined &amp;&amp; (base = 0);            for (var i = 0; i &lt; this.length; i++) &#123;                if (this[i] !== undefined) &#123;                    base = fun(base, this[i], i, this);                &#125;            &#125;            return base;        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Function-bind原理"><a href="#Function-bind原理" class="headerlink" title="Function.bind原理"></a>Function.bind原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (Function.prototype.bind === undefined) &#123;        Function.prototype.bind = function(obj /*，参数列表*/ ) &#123;            var fun = this; //留住this            //*****将类数组对象，转化为普通数组            var args = Array.prototype.slice.call(arguments, 1);            //args保存的就是提前绑定的参数列表            /*function slice(1)&#123;               var sub=[];               for(var i=0;i&lt;length;i++)&#123;                sub.push(arguments[i]);               &#125;               return sub;            &#125;*/            return function() &#123;                //将后传入的参数值，转为普通数组                      var innerArgs = Array.prototype.slice.call(arguments); //将之前绑定的参数值和新传入的参数值，拼接为完整参数之列表                var allArgs = args.concat(innerArgs)                    //调用原始函数fun，替换this为obj，传入所有参数                fun.apply(obj, allArgs);            &#125;        &#125;    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="3-创建对象前导"><a href="#3-创建对象前导" class="headerlink" title="3. 创建对象前导"></a>3. 创建对象前导</h2><h3 id="1-关于new"><a href="#1-关于new" class="headerlink" title="(1) 关于new"></a>(1) 关于new</h3><ol>
<li>创建一个空对象，并赋值给this</li>
<li>返回this</li>
</ol>
<h3 id="2-关于this"><a href="#2-关于this" class="headerlink" title="(2) 关于this"></a>(2) 关于this</h3><p>当前方法属于谁，this就是谁<br><strong>this默认属于window</strong></p>
<p><strong>this的优先级</strong>：</p>
<ol>
<li>new -&gt; object</li>
<li>定时器 -&gt; window</li>
<li>事件 -&gt; 事件对象</li>
<li>方法 -&gt; 方法对象</li>
</ol>
<blockquote>
<p><strong>多包一层时优先级失效</strong></p>
</blockquote>
<p>哈哈，关于this的坑详见后面的坑集合！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function show() &#123;        console.log(this);    &#125;    var arr = [1, 2];    arr.show = show;    document.onclick = arr.show; // 点击时 document    new arr.show(); // 1. object    new show(); // 2. object    new document.onclick(); // 3. object    setTimeout(show, 1000); // 9. window    setTimeout(arr.show, 1000); // 10. window    setTimeout(new arr.show, 1000); // 4. object **在上两个行执行前先弹出    var oDate = new Date();    oDate.show = show;    document.show = show;    document.onclick = show;    setTimeout(function() &#123; // setTimeout多包一层优先级失效        oDate.show(); // 5. oDate时间        new oDate.show(); // 6. object        document.show(); // 7. document        document.onclick(); // 8. document    &#125;, 100);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="强制改变this指向"><a href="#强制改变this指向" class="headerlink" title="强制改变this指向"></a>强制改变this指向</h4><ul>
<li><p>call</p>
</li>
<li><ul>
<li><code>fn.call(a);</code> 改变this指向，指向a</li>
<li><code>fn.call(a, p1, p2);</code> 改变this指向并传参p1, p2</li>
</ul>
</li>
<li><p>apply</p>
</li>
<li><ul>
<li><code>fn.apply(a, [p1, p2]);</code> 改变this指向并传入参数数组</li>
<li><code>fn.apply(a, arguments);</code> 改变this指向并传入当前方法(非fn)的参数数组</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.面向过程编程:注重解决问题的步骤,分析问题需要的每一步,实现函数依次调用。&lt;/p&gt;
&lt;p&gt;2.面向对象编程:注重问题中的对象,分析问题中对象的联系,实现对象间的通讯解决问题.面向对象编程淡化过程,强调对象 更贴近我们人日常处理问题的方式。&lt;/p&gt;
&lt;p&gt;3.面向过程:所有功能都是在需要使用的时候才开发,相当于去餐馆点菜,现点现做,需要等。&lt;/p&gt;
&lt;p&gt;4.面向对象:在正式开发之前,就先把所有需要使用的功能都开发好,并以属性或者方法的形式存放&lt;/p&gt;
&lt;p&gt;在一个对象中,在实际开发的时候根据需要来调用写好的功能。相当于去快餐店吃快餐,菜都是&lt;/p&gt;
&lt;p&gt;事先已经炒好的,去了就可以吃。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：性能优化篇</title>
    <link href="http://yoursite.com/2016/01/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/"/>
    <id>http://yoursite.com/2016/01/09/前端知识点/前端知识点：前端知识点：性能优化篇/</id>
    <published>2016-01-09T09:44:15.000Z</published>
    <updated>2017-03-31T14:39:17.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雅虎规则"><a href="#雅虎规则" class="headerlink" title="雅虎规则"></a>雅虎规则</h1><p>熟悉网站优化的开发者应该都知道，只要提到网页性能优化，就绕不开雅虎军规。<a href="https://github.com/creeperyang/blog/issues/1" target="_blank" rel="external">优化规则</a>&amp;&amp;<a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">原文</a>，仔细阅读这些规则，可以总结到3个方面：</p>
<a id="more"></a>
<p><img src="/images/优化/1.png" alt="img">   </p>
<ul>
<li><p>网页内容</p>
</li>
<li><ul>
<li>减少 http请求次数</li>
<li>减少 DNS查询次数</li>
<li>避免页面跳转</li>
<li>缓存 Ajax</li>
<li>延迟加载</li>
<li>提前加载</li>
<li>减少 DOM元素数量</li>
<li>根据域名划分内容</li>
<li>减少iframe数量</li>
<li>避免 404</li>
</ul>
</li>
<li><p>服务器</p>
</li>
<li><ul>
<li>使用CDN(内容分发网络)</li>
<li>添加Expires或Cache-Control报文头</li>
<li>Gzip压缩传输文件</li>
<li>配置ETags</li>
<li>尽早flush(刷新输出)缓冲</li>
<li>使用GET来完成AJAX请求</li>
<li>避免空的图片src</li>
</ul>
</li>
<li><p>Cookie</p>
</li>
<li><ul>
<li>减少Cookie大小</li>
<li>页面内容使用无cookie域名</li>
</ul>
</li>
<li><p>CSS</p>
</li>
<li><ul>
<li>将样式表置顶</li>
<li>避免使用CSS表达式(Expression)</li>
<li>用<link>代替@import</li>
<li>避免使用Filters(滤镜)</li>
</ul>
</li>
<li><p>JavaScript</p>
</li>
<li><ul>
<li>把脚本置于页面底部</li>
<li>使用外部JavaScript和CSS</li>
<li>精简JavaScript和CSS</li>
<li>去除重复脚本</li>
<li>减少DOM访问</li>
<li>开发智能事件处理程序</li>
</ul>
</li>
<li><p>图片</p>
</li>
<li><ul>
<li>优化图像</li>
<li>优化CSS Spirite</li>
<li>不要在HTML中缩放图片</li>
<li>favicon.ico要小而且可缓存</li>
</ul>
</li>
<li><p>移动客户端</p>
</li>
<li><ul>
<li>保持单个内容小于25KB</li>
<li>打包组建成复合文档</li>
</ul>
</li>
</ul>
<p>再来一张晚上搜的的移动端性能优化图：</p>
<p><img src="/images/优化/2.webp" alt="img">   </p>
<h2 id="1-性能优化"><a href="#1-性能优化" class="headerlink" title="1. 性能优化"></a>1. 性能优化</h2><p>项目讲求：</p>
<ol>
<li>稳定性</li>
<li>可维护性</li>
<li>性能优化</li>
</ol>
<p>性能分类：</p>
<ul>
<li>执行性能</li>
<li>网络性能</li>
</ul>
<h2 id="2-重排-amp-amp-重绘"><a href="#2-重排-amp-amp-重绘" class="headerlink" title="2. 重排 &amp;&amp; 重绘"></a>2. 重排 &amp;&amp; 重绘</h2><p>简单-页面性能优化</p>
<h3 id="1-重排-reflow"><a href="#1-重排-reflow" class="headerlink" title="(1) 重排(reflow)"></a>(1) 重排(reflow)</h3><p>即重新生成布局，<strong>重排必然导致重绘</strong>。</p>
<p>会触发重排的属性：</p>
<ul>
<li><p>盒子模型相关属性</p>
</li>
<li><ul>
<li>width</li>
<li>height</li>
<li>padding</li>
<li>margin</li>
<li>display</li>
<li>border-width</li>
<li>border</li>
<li>min-height</li>
</ul>
</li>
<li><p>定位属性及浮动</p>
</li>
<li><ul>
<li>top</li>
<li>bottom</li>
<li>left</li>
<li>right</li>
<li>position</li>
<li>float</li>
<li>clear</li>
</ul>
</li>
<li><p>改变节点内部文字结构</p>
</li>
<li><ul>
<li>text-align</li>
<li>overflow-y</li>
<li>font-weight</li>
<li>overflow</li>
<li>font-family</li>
<li>line-height</li>
<li>vertival-align</li>
<li>white-space</li>
<li>font-size</li>
</ul>
</li>
</ul>
<h3 id="2-重绘"><a href="#2-重绘" class="headerlink" title="(2) 重绘"></a>(2) 重绘</h3><p>即重新绘制，<strong>重绘不一定需要重排</strong>。</p>
<p>会触发重绘的属性：</p>
<ul>
<li>color</li>
<li>border-style</li>
<li>border-radius</li>
<li>visibility</li>
<li>text-decoration</li>
<li>background</li>
<li>background-image</li>
<li>background-position</li>
<li>background-repeat</li>
<li>background-size</li>
<li>outline-color</li>
<li>outline</li>
<li>outline-style</li>
<li>outline-width</li>
<li>box-shadow</li>
</ul>
<h2 id="3-图层"><a href="#3-图层" class="headerlink" title="3. 图层"></a>3. 图层</h2><p>浏览器layout和paint是在每一个图层上进行的，当有一个元素经常变化，为了减少这个元素对页面的影响，我们可以为这个元素创建一个单独的图层，来提供页面的性能。</p>
<ul>
<li><p>什么时候会创建图层</p>
</li>
<li><ul>
<li>3D或透视变换（perspective transform）CSS属性（例如translateZ(0)/translate3d(0,0,0)）</li>
<li>使用加速视频解码的<video>节点</video></li>
<li>拥有3D（WebGL）上下文或加速的2D上下文的<canvas>节点</canvas></li>
<li>混合插件（如Flash）</li>
<li>对自己的opacity做CSS动画或使用一个动画webkit变换的元素</li>
<li>拥有加速CSS过滤器的元素</li>
<li>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）</li>
<li>元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</li>
<li>position为fixed也会创建图层，而absolute则不会</li>
</ul>
</li>
</ul>
<p>利用GPU来加速页面渲染(硬件加速)</p>
<ul>
<li><p>触发CSS硬件加速</p>
</li>
<li><ul>
<li>translate3d(0,0,0)</li>
<li>rotate3d(0,0,0,0)</li>
<li>scale3d(0,0,0)</li>
<li>translateZ(0)【可能】</li>
</ul>
</li>
</ul>
<h2 id="4-执行性能优化"><a href="#4-执行性能优化" class="headerlink" title="4. 执行性能优化"></a>4. 执行性能优化</h2><p>建议：</p>
<ol>
<li>不用的东西删除</li>
<li>尽量不用全局变量(命名冲突，耗资源)</li>
<li>能用系统自带的一定不用自己写的(eg:getByClass)</li>
<li>尽量使用正则操作字符串</li>
<li>DOM操作耗性能，尽量减少DOM操作</li>
<li>属性用的越多，性能越低</li>
<li>css耗性能属性：expression、filter、border-radius、box-shadow、gradients</li>
</ol>
<blockquote>
<ol>
<li>Math.floor比parseInt快</li>
<li>变量性能消耗：属性 &gt; 全局变量 &gt; 局部变量</li>
</ol>
</blockquote>
<h2 id="5-网络性能优化"><a href="#5-网络性能优化" class="headerlink" title="5. 网络性能优化"></a>5. 网络性能优化</h2><h3 id="查看网络性能-F12-gt-network"><a href="#查看网络性能-F12-gt-network" class="headerlink" title="查看网络性能 F12 -&gt; network"></a>查看网络性能 F12 -&gt; network</h3><ul>
<li><p>Status 状态码</p>
</li>
<li><p>Type 资源类型</p>
</li>
<li><ul>
<li>主类型/次类型</li>
<li>text/html</li>
<li>text/css</li>
<li>image/png/gif</li>
</ul>
</li>
<li><p>Initiator 发起人</p>
</li>
<li><p>Size 资源大小</p>
</li>
<li><p>Time 请求耗时</p>
</li>
<li><p>Timeline 时间轴</p>
</li>
<li><ul>
<li>Queueing 排队</li>
<li>Stalled 停滞</li>
<li>Request sent 请求发送</li>
<li>Waiting 等待</li>
<li>Content Download 内容下载</li>
</ul>
</li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>FF -&gt; firebug -&gt; yslow(网站评分)<br>Chrome -&gt; Audits(查看网络性能)</p>
<h3 id="网络性能提升方法"><a href="#网络性能提升方法" class="headerlink" title="网络性能提升方法"></a>网络性能提升方法</h3><ol>
<li><p>减少http请求 -&gt; 合并</p>
</li>
<li><ul>
<li>js -&gt; 合并</li>
<li>css -&gt; 合并，避免<code>@import</code>方式引入css文件</li>
<li>图片 -&gt; css sprites</li>
</ul>
</li>
<li><p>http请求越小越好 -&gt; 压缩</p>
</li>
<li><ul>
<li>在线工具 —— 开源中国社区</li>
<li>HTML格式化 、HTML压缩- 站长工具</li>
<li>前端自动化工具</li>
</ul>
</li>
</ol>
<ol>
<li><ul>
<li>css值缩写(margin,border等)</li>
<li>省略值为0的单位</li>
<li>色值用最短的表示</li>
</ul>
</li>
</ol>
<ol>
<li><ul>
<li>js -&gt; 压缩</li>
<li>css -&gt; 压缩</li>
<li>图片 -&gt; 压缩<br>工具</li>
</ul>
</li>
<li><p>图片延迟加载</p>
</li>
<li><p>CDN(Content Delivery Network, 内容分发网络)加速</p>
</li>
<li><p>加载顺序</p>
</li>
<li><ul>
<li>阻塞加载(同步加载)<br>js<br><strong>解决</strong>：引用其他网站的js放在body最后</li>
<li>非阻塞加载(异步加载，并行加载)<br>css、html、图片</li>
</ul>
</li>
</ol>
<h2 id="6-垃圾回收-GC-Gabage-Collection"><a href="#6-垃圾回收-GC-Gabage-Collection" class="headerlink" title="6. 垃圾回收 GC(Gabage Collection)"></a>6. 垃圾回收 GC(Gabage Collection)</h2><ul>
<li>js中的垃圾回收：(宿主环境)<br>浏览器会自动回收垃圾</li>
<li>底层语言不会自动回收垃圾</li>
</ul>
<p>垃圾的评判标准：<strong>生存周期</strong></p>
<p>生存周期：作用域</p>
<ol>
<li>全局变量：生存周期长，直到浏览器关闭时清除 <strong>占资源</strong></li>
<li>局部变量：生存周期短，方法调用完即清除</li>
<li>闭包(子函数可以使用父函数的全局变量)<br>子函数若没有释放，整条作用域链上的局部变量都会保留<br>作用域链：从内一级一级往外找，知道全局</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // 作用域链    function show1() &#123;        var a = 12;        function show2() &#123;            var b = 1;            function show3() &#123;                var c = 2;                document.onclick = function() &#123;                    var d = 3;                    alert(a);                &#125;            &#125;            show3();        &#125;        show2();    &#125;    show1();&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;雅虎规则&quot;&gt;&lt;a href=&quot;#雅虎规则&quot; class=&quot;headerlink&quot; title=&quot;雅虎规则&quot;&gt;&lt;/a&gt;雅虎规则&lt;/h1&gt;&lt;p&gt;熟悉网站优化的开发者应该都知道，只要提到网页性能优化，就绕不开雅虎军规。&lt;a href=&quot;https://github.com/creeperyang/blog/issues/1&quot;&gt;优化规则&lt;/a&gt;&amp;amp;&amp;amp;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot;&gt;原文&lt;/a&gt;，仔细阅读这些规则，可以总结到3个方面：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：布局大全</title>
    <link href="http://yoursite.com/2015/11/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%B8%83%E5%B1%80%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2015/11/09/前端知识点/前端知识点：前端知识点：布局大全/</id>
    <published>2015-11-09T13:44:15.000Z</published>
    <updated>2017-03-31T11:17:55.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-单列布局"><a href="#一-单列布局" class="headerlink" title="一. 单列布局"></a>一. 单列布局</h2><h3 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1. 水平居中"></a>1. 水平居中</h3><h4 id="1-文本、图片等行内元素"><a href="#1-文本、图片等行内元素" class="headerlink" title="(1) 文本、图片等行内元素"></a>(1) 文本、图片等行内元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="2-定宽块级元素"><a href="#2-定宽块级元素" class="headerlink" title="(2) 定宽块级元素"></a>(2) 定宽块级元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.child &#123;</div><div class="line">		margin: 0 auto;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="3-不定宽块元素"><a href="#3-不定宽块元素" class="headerlink" title="(3) 不定宽块元素"></a>(3) 不定宽块元素</h4><ul>
<li>inline + text-align</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		display: inline;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>table + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.child &#123;</div><div class="line">		display: table;</div><div class="line">		margin: 0 auto;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>float + relative</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		float: left;</div><div class="line">		position: relative;</div><div class="line">		left: 50%;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		position: relative;</div><div class="line">		left: -50%;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>absolute + transform</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		position: relative;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		position: absolute;</div><div class="line">		left: 50%;</div><div class="line">		transform: translateX(-50%);</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="4-多个块级元素-单个块级元素也可用"><a href="#4-多个块级元素-单个块级元素也可用" class="headerlink" title="(4) 多个块级元素(单个块级元素也可用)"></a>(4) 多个块级元素(单个块级元素也可用)</h4><ul>
<li>inline-block + text-align</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		display: inline-block;</div><div class="line">		*display: inline;</div><div class="line">		*zoom:1;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>flex + justify-content</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: flex;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		justify-content: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h3><h4 id="1-父元素高度确定的单行文本"><a href="#1-父元素高度确定的单行文本" class="headerlink" title="(1) 父元素高度确定的单行文本"></a>(1) 父元素高度确定的单行文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		height: 20px;</div><div class="line">		line-height: 20px;</div><div class="line">		overflow:hidden;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="2-父元素高度确定的多行文本"><a href="#2-父元素高度确定的多行文本" class="headerlink" title="(2) 父元素高度确定的多行文本"></a>(2) 父元素高度确定的多行文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: table;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		display: table-cell;</div><div class="line">		vertical-align: middle;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="3-子元素定高块级元素"><a href="#3-子元素定高块级元素" class="headerlink" title="(3) 子元素定高块级元素"></a>(3) 子元素定高块级元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.child &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 50%;</div><div class="line">		margin-top: -50px;</div><div class="line">		width: 100px;</div><div class="line">		height: 100px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="4-子元素不定高块级元素"><a href="#4-子元素不定高块级元素" class="headerlink" title="(4) 子元素不定高块级元素"></a>(4) 子元素不定高块级元素</h4><ul>
<li>absolute + transform</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		position: relative;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 50%;</div><div class="line">		transform: translateY(-50%);</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>flex + align-items</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: flex;</div><div class="line">		align-items: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3. 水平垂直居中"></a>3. 水平垂直居中</h3><h4 id="1-定宽高"><a href="#1-定宽高" class="headerlink" title="(1) 定宽高"></a>(1) 定宽高</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.child &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 50%;</div><div class="line">		left: 50%;</div><div class="line">		margin-top: -75px;</div><div class="line">		margin-left: -75px;</div><div class="line">		width: 150px;</div><div class="line">		height: 150px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="2-不定宽高"><a href="#2-不定宽高" class="headerlink" title="(2) 不定宽高"></a>(2) 不定宽高</h4><ul>
<li>inline-block + table-cell</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: tabel-cell;</div><div class="line">		text-align: center;</div><div class="line">		vertical-align: middle;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		display: inline-block;</div><div class="line">		*display: inline;</div><div class="line">		*zoom:1;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>table-cell + absolute</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: tabel;</div><div class="line">		position: absolute;</div><div class="line">		width: 100%;</div><div class="line">		height: 100%;</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		display: table-cell;</div><div class="line">		text-align: center;</div><div class="line">		vertical-align: middle;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>absolute + transform</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		position: relative</div><div class="line">	&#125;</div><div class="line">	.child &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 50%;</div><div class="line">		left: 50%;</div><div class="line">		transform: translate(-50%, -50%);</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>flex + justify-content + align-items</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: flex;</div><div class="line">		justify-content: center;</div><div class="line">		align-items: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>jQuery</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	$(window).resize(function() &#123;</div><div class="line">		$(&apos;.child&apos;).css(&#123;</div><div class="line">			position: &apos;absolute&apos;,</div><div class="line">			left: ($(window).width()-$(&apos;.child&apos;).outerWidth())/2,</div><div class="line">			top: ($(window).height()-$(&apos;.child&apos;).outerHeight())/2</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	$(function() &#123;</div><div class="line">		$(window).resize();</div><div class="line">	&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="二-两列布局"><a href="#二-两列布局" class="headerlink" title="二. 两列布局"></a>二. 两列布局</h2><h3 id="1-两个div并排的多种方法"><a href="#1-两个div并排的多种方法" class="headerlink" title="1. 两个div并排的多种方法"></a>1. 两个div并排的多种方法</h3><ul>
<li>定位</li>
<li>margin负值</li>
<li>浮动</li>
<li>行内块</li>
<li>table</li>
</ul>
<h3 id="2-左侧定宽，右侧自适应"><a href="#2-左侧定宽，右侧自适应" class="headerlink" title="2. 左侧定宽，右侧自适应"></a>2. 左侧定宽，右侧自适应</h3><ul>
<li>float + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.left &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100px;</div><div class="line">	&#125;</div><div class="line">	.right &#123;</div><div class="line">		margin-left: 120px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;left&quot;&gt;左侧定宽&lt;/div&gt;</div><div class="line">   &lt;div class=&quot;right&quot;&gt;右侧自适应&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>float + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.left &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100px;</div><div class="line">		margin-right: 20px;</div><div class="line">	&#125;</div><div class="line">	.right &#123;</div><div class="line">		overflow: hidden;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;left&quot;&gt;左侧定宽&lt;/div&gt;</div><div class="line">   &lt;div class=&quot;right&quot;&gt;右侧自适应&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>absolute + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.left &#123;</div><div class="line">		width: 300px;</div><div class="line">		height: 500px;</div><div class="line">		background: red;</div><div class="line">		font-size: 30px;</div><div class="line">		color: #fff;</div><div class="line">		position: absolute;</div><div class="line">		left: 0;</div><div class="line">		top: 0;</div><div class="line">	&#125;</div><div class="line">	.right &#123;</div><div class="line">		height: 500px;</div><div class="line">		background: blue;</div><div class="line">		font-size: 30px;</div><div class="line">		color: #fff;</div><div class="line">		/* padding-left: 300px; */</div><div class="line">		margin-left: 300px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;left&quot;&gt;左侧定宽&lt;/div&gt;</div><div class="line">   &lt;div class=&quot;right&quot;&gt;右侧自适应&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>relative + float + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.g-sd1 &#123;</div><div class="line">		position: relative;</div><div class="line">		float: left;</div><div class="line">		margin-right: -190px;</div><div class="line">		width: 190px;</div><div class="line">	&#125;</div><div class="line">	.g-mn1 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 100%;</div><div class="line">	&#125;</div><div class="line">	.g-mn1c &#123;</div><div class="line">		margin-left: 200px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-sd1&quot;&gt;</div><div class="line">    &lt;p&gt;左侧定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-mn1&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn1c&quot;&gt;</div><div class="line">        &lt;p&gt;右侧自适应&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>absolute + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.parent &#123;</div><div class="line">		display: flex;</div><div class="line">	&#125;</div><div class="line">	.left &#123;</div><div class="line">		margin-right: 20px;</div><div class="line">		width: 100px;</div><div class="line">	&#125;</div><div class="line">	.right &#123;</div><div class="line">		flex: 1;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;parent&quot;&gt;</div><div class="line">	&lt;div class=&quot;left&quot;&gt;</div><div class="line">		&lt;p&gt;左侧定宽&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;right&quot;&gt;</div><div class="line">		&lt;p&gt;右侧自适应&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="3-左侧自适应，右侧定宽-基本同理，不一一列举"><a href="#3-左侧自适应，右侧定宽-基本同理，不一一列举" class="headerlink" title="3. 左侧自适应，右侧定宽(基本同理，不一一列举)"></a>3. 左侧自适应，右侧定宽(基本同理，不一一列举)</h3><ul>
<li>margin + absolute</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.left &#123;</div><div class="line">		/* padding-right: 300px; */</div><div class="line">		margin-left: 300px;</div><div class="line">		height: 500px;</div><div class="line">		background: blue;</div><div class="line">		font-size: 30px;</div><div class="line">		color: #fff;</div><div class="line">	&#125;</div><div class="line">	.right &#123;</div><div class="line">		position: absolute;</div><div class="line">		right: 0;</div><div class="line">		top: 0;</div><div class="line">		width: 300px;</div><div class="line">		height: 500px;</div><div class="line">		background: red;</div><div class="line">		font-size: 30px;</div><div class="line">		color: #fff;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;left&quot;&gt;左侧自适应&lt;/div&gt;</div><div class="line">   &lt;div class=&quot;right&quot;&gt;右侧定宽&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>relative + float + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.g-sd2 &#123;</div><div class="line">		position: relative;</div><div class="line">		float: right;</div><div class="line">		width: 230px;</div><div class="line">		margin-left: -230px</div><div class="line">	&#125;</div><div class="line">	.g-mn2 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">	&#125;</div><div class="line">	.g-mn2c &#123;</div><div class="line">		margin-right: 240px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-mn2&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn2c&quot;&gt;</div><div class="line">        &lt;p&gt;左侧自适应&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-sd2&quot;&gt;</div><div class="line">    &lt;p&gt;右侧定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="三-等高布局"><a href="#三-等高布局" class="headerlink" title="三. 等高布局"></a>三. 等高布局</h2><ul>
<li>float + margin-bottom负值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.box &#123;</div><div class="line">		width: 800px;</div><div class="line">		overflow: hidden;	/* 搭配使用 */</div><div class="line">		margin: 10px auto;</div><div class="line">	&#125;</div><div class="line">	.l-box &#123;</div><div class="line">		float: left;</div><div class="line">		margin-bottom: -2000px;		/* 搭配使用 */</div><div class="line">		padding-bottom: 2000px;		/* 搭配使用 */</div><div class="line">		width: 300px;</div><div class="line">		background: red;</div><div class="line">	&#125;</div><div class="line">	.r-box &#123;</div><div class="line">		float: left;</div><div class="line">		margin-bottom: -2000px;		/* 搭配使用 */</div><div class="line">		padding-bottom: 2000px;		/* 搭配使用 */</div><div class="line">		width: 500px;</div><div class="line">		background: blue;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">   	&lt;div class=&quot;l-box&quot;&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">   	&lt;/div&gt;</div><div class="line">       &lt;div class=&quot;r-box&quot;&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">   &lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>flex</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.box &#123;</div><div class="line">		display: flex;</div><div class="line">	&#125;</div><div class="line">	.l-box &#123;</div><div class="line">		margin-right: 20px;</div><div class="line">		width: 100px;</div><div class="line">	&#125;</div><div class="line">	.r-box &#123;</div><div class="line">		flex: 1;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">   	&lt;div class=&quot;l-box&quot;&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">		左侧左侧左侧左侧&lt;br/&gt;</div><div class="line">   	&lt;/div&gt;</div><div class="line">       &lt;div class=&quot;r-box&quot;&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       	右侧右侧右侧右侧&lt;br/&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">   &lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="四-多列布局"><a href="#四-多列布局" class="headerlink" title="四. 多列布局"></a>四. 多列布局</h2><h3 id="1-左右定宽，中间自适应"><a href="#1-左右定宽，中间自适应" class="headerlink" title="1. 左右定宽，中间自适应"></a>1. 左右定宽，中间自适应</h3><ul>
<li>absolute + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.left &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 0;</div><div class="line">		left: 0;</div><div class="line">		width: 200px;</div><div class="line">		height: 500px;</div><div class="line">		background: red;</div><div class="line">		color: #fff;</div><div class="line">		font-size: 20px;</div><div class="line">	&#125;</div><div class="line">	.right &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 0;</div><div class="line">		right: 0;</div><div class="line">		width: 200px;</div><div class="line">		height: 500px;</div><div class="line">		background: red;</div><div class="line">		color: #fff;</div><div class="line">		font-size: 20px;</div><div class="line">	&#125;</div><div class="line">	.content &#123;</div><div class="line">		/* padding: 0 200px; */</div><div class="line">		margin: 0 200px;</div><div class="line">		height: 500px;</div><div class="line">		background: blue;</div><div class="line">		font-size: 20px;</div><div class="line">		color: #fff;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;left&quot;&gt;左侧定宽&lt;/div&gt;</div><div class="line">&lt;div class=&quot;content&quot;&gt;中间自适应&lt;/div&gt;</div><div class="line">   &lt;div class=&quot;right&quot;&gt;右侧定宽&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>relative + float + margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.g-sd51, .g-sd52 &#123;</div><div class="line">		position: relative;</div><div class="line">		float: left;</div><div class="line">		width: 230px;</div><div class="line">		margin: 0 -230px 0 0;</div><div class="line">	&#125;</div><div class="line">	.g-sd52 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 190px;</div><div class="line">		margin: 0 0 0 -190px;</div><div class="line">	&#125;</div><div class="line">	.g-mn5 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">	&#125;</div><div class="line">	.g-mn5c &#123;</div><div class="line">		margin: 0 200px 0 240px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-sd51&quot;&gt;</div><div class="line">    &lt;p&gt;左侧定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-mn5&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn5c&quot;&gt;</div><div class="line">        &lt;p&gt;中间自适应&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-sd52&quot;&gt;</div><div class="line">    &lt;p&gt;右侧定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><ul>
<li>中间栏放到文档流前面，保证先行渲染</li>
<li>三栏全部float:left浮动</li>
<li>中间栏在添加相对定位，并配合left和right属性</li>
</ul>
<blockquote>
<p>效果上表现为三栏是单独分开的</p>
</blockquote>
<p><a href="http://www.cnblogs.com/linxiong945/p/4041841.html" target="_blank" rel="external">可参考该篇圣杯的分析过程：【CSS】 布局之圣杯布局</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	#hd &#123;</div><div class="line">		height: 50px;</div><div class="line">		background: #666;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">	#bd &#123;</div><div class="line">		/*左右栏通过添加负的margin放到正确的位置了，此段代码是为了摆正中间栏的位置*/</div><div class="line">		padding: 0 200px 0 180px;</div><div class="line">		height: 100px;</div><div class="line">	&#125;</div><div class="line">	#middle &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">		height: 100px;</div><div class="line">		background: blue;</div><div class="line">	&#125;</div><div class="line">	#left &#123;</div><div class="line">		float: left;</div><div class="line">		width: 180px;</div><div class="line">		height: 100px;</div><div class="line">		margin-left: -100%;  /*左栏上去到第一行*/</div><div class="line">		background: #0c9;</div><div class="line">		position: relative;</div><div class="line">		left: -180px;  /*中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置*/</div><div class="line">	&#125;</div><div class="line">	#right &#123;</div><div class="line">		float: left;</div><div class="line">		width: 200px;</div><div class="line">		height: 100px;</div><div class="line">		margin-left: -200px;</div><div class="line">		background: #0c9;</div><div class="line">		position: relative;</div><div class="line">		right: -200px;  /*中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置*/</div><div class="line">	&#125;</div><div class="line">	#footer &#123;</div><div class="line">		height: 50px;</div><div class="line">		background: #666;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;hd&quot;&gt;header&lt;/div&gt;</div><div class="line">&lt;div id=&quot;bd&quot;&gt;</div><div class="line">  &lt;div id=&quot;middle&quot;&gt;middle&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;left&quot;&gt;left&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;right&quot;&gt;right&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><ul>
<li>中间栏放到文档流前面，保证先行渲染</li>
<li>三栏全部float:left浮动</li>
<li>在中间栏的div中嵌套一个div，内容写在嵌套的div里，然后对嵌套的div设置margin-left和margin-right</li>
</ul>
<blockquote>
<p>效果上表现为左右两栏在中间栏的上面</p>
<ul>
<li><strong>区别</strong>：双飞翼多了1个div，少用大致4个css属性（圣杯布局中间div padding-left和padding-right这2个属性，加上左右两个div用相对布局position: relative及对应的right和left共4个属性，一共6个；而双飞翼布局子div里用margin-left和margin-right共2个属性，6-2=4）<br>作者：吕延庆<br>链接：<a href="https://www.zhihu.com/question/21504052/answer/50053054" target="_blank" rel="external">https://www.zhihu.com/question/21504052/answer/50053054</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	#hd &#123;</div><div class="line">		height: 50px;</div><div class="line">		background: #666;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">	#middle &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">		height: 100px;</div><div class="line">		background: blue;</div><div class="line">	&#125;</div><div class="line">	#left &#123;</div><div class="line">		float: left;</div><div class="line">		width: 180px;</div><div class="line">		height: 100px;</div><div class="line">		margin-left: -100%;   /*左栏上去到第一行*/</div><div class="line">		background: #0c9;</div><div class="line">	&#125;</div><div class="line">	#right &#123;</div><div class="line">		float: left;</div><div class="line">		width: 200px;</div><div class="line">		height: 100px;</div><div class="line">		margin-left: -200px;</div><div class="line">		background: #0c9;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/*给内部div添加margin，把内容放到中间栏，其实整个背景还是100%*/</div><div class="line">	#inside &#123;</div><div class="line">		margin: 0 200px 0 180px;</div><div class="line">		height: 100px;</div><div class="line">	&#125;</div><div class="line">	#footer &#123;</div><div class="line">		clear: both; /*记得清除浮动*/</div><div class="line">		height: 50px;</div><div class="line">		background: #666;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;hd&quot;&gt;header&lt;/div&gt;</div><div class="line">&lt;div id=&quot;middle&quot;&gt;</div><div class="line">	&lt;div id=&quot;inside&quot;&gt;middle&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;left&quot;&gt;left&lt;/div&gt;</div><div class="line">&lt;div id=&quot;right&quot;&gt;right&lt;/div&gt;</div><div class="line">&lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="2-左侧自适应，中间右侧定宽"><a href="#2-左侧自适应，中间右侧定宽" class="headerlink" title="2. 左侧自适应，中间右侧定宽"></a>2. 左侧自适应，中间右侧定宽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.g-sd41, .g-sd42 &#123;</div><div class="line">		position: relative;</div><div class="line">		float: right;</div><div class="line">		width: 190px;</div><div class="line">	&#125;</div><div class="line">	.g-sd41 &#123;</div><div class="line">		width: 230px;</div><div class="line">		margin-left: 10px;</div><div class="line">	&#125;</div><div class="line">	.g-mn4 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">		margin-right: -430px;</div><div class="line">	&#125;</div><div class="line">	.g-mn4c &#123;</div><div class="line">		margin-right: 440px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-mn4&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn4c&quot;&gt;</div><div class="line">        &lt;p&gt;左侧自适应&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-sd41&quot;&gt;</div><div class="line">    &lt;p&gt;中间定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-sd42&quot;&gt;</div><div class="line">    &lt;p&gt;右侧定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="3-右侧自适应，中间左侧定宽"><a href="#3-右侧自适应，中间左侧定宽" class="headerlink" title="3. 右侧自适应，中间左侧定宽"></a>3. 右侧自适应，中间左侧定宽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.g-sd31, .g-sd32 &#123;</div><div class="line">		position: relative;</div><div class="line">		float: left;</div><div class="line">		width: 230px;</div><div class="line">	&#125;</div><div class="line">	.g-sd31 &#123;</div><div class="line">		width: 190px;</div><div class="line">		margin-right: 10px;</div><div class="line">	&#125;</div><div class="line">	.g-mn3 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 100%;</div><div class="line">		margin-left: -430px;</div><div class="line">	&#125;</div><div class="line">	.g-mn3c &#123;</div><div class="line">		margin-left: 440px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-sd31&quot;&gt;</div><div class="line">    &lt;p&gt;左侧定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-sd32&quot;&gt;</div><div class="line">    &lt;p&gt;中间定宽&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-mn3&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn3c&quot;&gt;</div><div class="line">        &lt;p&gt;右侧自适应&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="五-图片绝对居中"><a href="#五-图片绝对居中" class="headerlink" title="五. 图片绝对居中"></a>五. 图片绝对居中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.box &#123;</div><div class="line">		width: 500px;</div><div class="line">		height: 600px;</div><div class="line">		margin: 10px auto;</div><div class="line">		border: 1px solid red;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">	.box img &#123;</div><div class="line">		vertical-align: middle;</div><div class="line">	&#125;</div><div class="line">	.box span &#123;</div><div class="line">		display: inline-block;</div><div class="line">		height: 100%;</div><div class="line">		vertical-align: middle;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">	&lt;img src=&quot;img/xxx.png&quot; alt=&quot;&quot;/&gt;</div><div class="line">    &lt;span&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="图片居中溢出隐藏"><a href="#图片居中溢出隐藏" class="headerlink" title="图片居中溢出隐藏"></a>图片居中溢出隐藏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.m-demo &#123;</div><div class="line">		position: relative;</div><div class="line">		width: 300px;</div><div class="line">		height: 300px;</div><div class="line">		overflow: hidden;</div><div class="line">		border: 1px solid #ddd;</div><div class="line">	&#125;</div><div class="line">	.m-demo p &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: 50%;</div><div class="line">		left: 50%;</div><div class="line">		margin: 0;</div><div class="line">		padding: 0;</div><div class="line">	&#125;</div><div class="line">	.m-demo img &#123;</div><div class="line">		position: absolute;</div><div class="line">		top: -50%;</div><div class="line">		left: -50%;</div><div class="line">		display: block;</div><div class="line">	&#125;</div><div class="line">	.m-demo img.hidden &#123;</div><div class="line">		visibility: hidden;</div><div class="line">		position: static;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">    &lt;p&gt;</div><div class="line">        &lt;img src=&quot;http://nec.netease.com/img/s/1.jpg&quot; class=&quot;hidden&quot;/&gt;</div><div class="line">        &lt;img src=&quot;http://nec.netease.com/img/s/1.jpg&quot; alt=&quot;&quot;/&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">    &lt;p&gt;</div><div class="line">        &lt;img src=&quot;http://nec.netease.com/img/m/1.jpg&quot; class=&quot;hidden&quot;/&gt;</div><div class="line">        &lt;img src=&quot;http://nec.netease.com/img/m/1.jpg&quot; alt=&quot;&quot;/&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">    &lt;p&gt;</div><div class="line">        &lt;img src=&quot;http://nec.netease.com/img/l/1.jpg&quot; class=&quot;hidden&quot;/&gt;</div><div class="line">        &lt;img src=&quot;http://nec.netease.com/img/l/1.jpg&quot; alt=&quot;&quot;/&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="六-两列三列自适应"><a href="#六-两列三列自适应" class="headerlink" title="六. 两列三列自适应"></a>六. 两列三列自适应</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	/* 两列布局  主列左 侧列右 */</div><div class="line">	.g-mn1 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">		margin-right: -200px;</div><div class="line">	&#125;</div><div class="line">	.g-mnc1 &#123;</div><div class="line">		margin-right: 210px;</div><div class="line">	&#125;</div><div class="line">	.g-sd1 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 200px;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* 两列布局  主列右 侧列左*/</div><div class="line">	.g-mn2 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 100%;</div><div class="line">		margin-left: -200px;</div><div class="line">	&#125;</div><div class="line">	.g-mnc2 &#123;</div><div class="line">		margin-left: 210px;</div><div class="line">	&#125;</div><div class="line">	.g-sd2 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 200px;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* 三列布局  主列右 两侧列左*/</div><div class="line">	.g-mn3 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 100%;</div><div class="line">		margin-left: -520px;</div><div class="line">	&#125;</div><div class="line">	.g-mnc3 &#123;</div><div class="line">		margin-left: 520px;</div><div class="line">	&#125;</div><div class="line">	.g-sd3a &#123;</div><div class="line">		float: left;</div><div class="line">		width: 300px;</div><div class="line">		margin-right: 10px;</div><div class="line">	&#125;</div><div class="line">	.g-sd3b &#123;</div><div class="line">		float: left;</div><div class="line">		width: 200px;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* 三列布局  主列中 两侧列分居左右*/</div><div class="line">	.g-mn4 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 100%;</div><div class="line">		margin-left: -200px;</div><div class="line">	&#125;</div><div class="line">	.g-mnc4 &#123;</div><div class="line">		margin-left: 210px;</div><div class="line">	&#125;</div><div class="line">	.g-sd4 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 200px;</div><div class="line">	&#125;</div><div class="line">	.g-mn5 &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100%;</div><div class="line">		margin-right: -200px;</div><div class="line">	&#125;</div><div class="line">	.g-mnc5 &#123;</div><div class="line">		margin-right: 210px;</div><div class="line">	&#125;</div><div class="line">	.g-sd5 &#123;</div><div class="line">		float: right;</div><div class="line">		width: 200px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-bd&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn1&quot;&gt;</div><div class="line">        &lt;div class=&quot;g-mnc1&quot;&gt;</div><div class="line">            &lt;p&gt;主列1内容区&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;g-sd1&quot;&gt;</div><div class="line">        &lt;p&gt;侧列1内容区&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-bd&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn2&quot;&gt;</div><div class="line">        &lt;div class=&quot;g-mnc2&quot;&gt;</div><div class="line">            &lt;p&gt;主列2内容区&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;g-sd2&quot;&gt;</div><div class="line">        &lt;p&gt;侧列2内容区&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-bd&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn3&quot;&gt;</div><div class="line">        &lt;div class=&quot;g-mnc3&quot;&gt;</div><div class="line">            &lt;p&gt;主列3内容区&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;g-sd3a&quot;&gt;</div><div class="line">        &lt;p&gt;侧列a内容区&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;g-sd3b&quot;&gt;</div><div class="line">        &lt;p&gt;侧列b内容区&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-bd&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-mn4&quot;&gt;</div><div class="line">        &lt;div class=&quot;g-mnc4&quot;&gt;</div><div class="line">            &lt;div class=&quot;g-mn5&quot;&gt;</div><div class="line">                &lt;div class=&quot;g-mnc5&quot;&gt;</div><div class="line">                    &lt;p&gt;主列5内容区&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div class=&quot;g-sd5&quot;&gt;</div><div class="line">                &lt;p&gt;侧列5内容区&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;g-sd4&quot;&gt;</div><div class="line">        &lt;p&gt;侧列4内容区&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="七-全屏自适应"><a href="#七-全屏自适应" class="headerlink" title="七. 全屏自适应"></a>七. 全屏自适应</h2><ul>
<li>absolute</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	html, body &#123;</div><div class="line">		width: 100%;</div><div class="line">		height: 100%;</div><div class="line">		overflow: hidden;</div><div class="line">		margin: 0;</div><div class="line">	&#125;</div><div class="line">	html &#123;</div><div class="line">		_height: auto;</div><div class="line">		_padding: 100px 0 50px;</div><div class="line">	&#125;</div><div class="line">	.g-hd, .g-sd, .g-mn, .g-ft &#123;</div><div class="line">		position: absolute;</div><div class="line">		left: 0;</div><div class="line">	&#125;</div><div class="line">	.g-hd, .g-ft &#123;</div><div class="line">		width: 100%;</div><div class="line">	&#125;</div><div class="line">	.g-sd, .g-mn &#123;</div><div class="line">		top: 100px;</div><div class="line">		bottom: 50px;</div><div class="line">		_height: 100%;</div><div class="line">		overflow: auto;</div><div class="line">	&#125;</div><div class="line">	.g-hd &#123;</div><div class="line">		top: 0;</div><div class="line">		height: 100px;</div><div class="line">	&#125;</div><div class="line">	.g-sd &#123;</div><div class="line">		width: 300px;</div><div class="line">	&#125;</div><div class="line">	.g-mn &#123;</div><div class="line">		_position: relative;</div><div class="line">		left: 300px;</div><div class="line">		right: 0;</div><div class="line">		_top: 0;</div><div class="line">		_left: 0;</div><div class="line">		_margin-left: 300px;</div><div class="line">	&#125;</div><div class="line">	.g-ft &#123;</div><div class="line">		bottom: 0;</div><div class="line">		height: 50px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-hd&quot;&gt;</div><div class="line">    顶部</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-sd&quot;&gt;</div><div class="line">    内容左侧</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-mn&quot;&gt;</div><div class="line">    内容右侧</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-ft&quot;&gt;</div><div class="line">    底部</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>flex</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	html, body, .wrapper &#123;</div><div class="line">		height: 100%;</div><div class="line">		overflow: hidden;</div><div class="line">	&#125;</div><div class="line">	.wrapper &#123;</div><div class="line">		display: flex;</div><div class="line">		flex-direction: column;</div><div class="line">	&#125;</div><div class="line">	.g-hd &#123;</div><div class="line">		height: 100px;</div><div class="line">	&#125;</div><div class="line">	.g-ft &#123;</div><div class="line">		height: 50px;</div><div class="line">	&#125;</div><div class="line">	.g-md &#123;</div><div class="line">		flex: 1;</div><div class="line">		display: flex;</div><div class="line">	&#125;</div><div class="line">	.g-md .g-sd &#123;</div><div class="line">		width: 200px;</div><div class="line">	&#125;</div><div class="line">	.g-md .g-mn &#123;</div><div class="line">		flex: 1;</div><div class="line">		overflow: auto;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;wrapper&quot;&gt;</div><div class="line">	&lt;div class=&quot;g-hd&quot;&gt;</div><div class="line">	    顶部</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;g-md&quot;&gt;</div><div class="line">		&lt;div class=&quot;g-sd&quot;&gt;</div><div class="line">		    内容左侧</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div class=&quot;g-mn&quot;&gt;</div><div class="line">		    内容右侧</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;g-ft&quot;&gt;</div><div class="line">	    底部</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="八-底部显示自适应"><a href="#八-底部显示自适应" class="headerlink" title="八. 底部显示自适应"></a>八. 底部显示自适应</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	html, body &#123;</div><div class="line">		width: 100%;</div><div class="line">		height: 100%;</div><div class="line">		margin: 0;</div><div class="line">	&#125;</div><div class="line">	.g-doc &#123;</div><div class="line">		position: relative;</div><div class="line">		min-height: 100%;</div><div class="line">		_height: 100%;</div><div class="line">	&#125;</div><div class="line">	.g-bd &#123;</div><div class="line">		padding: 0 0 60px;</div><div class="line">		zoom: 1;</div><div class="line">	&#125;</div><div class="line">	.g-ft &#123;</div><div class="line">		height: 50px;</div><div class="line">		margin: -50px 0 0;</div><div class="line">		background: #ddd;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;g-doc&quot;&gt;</div><div class="line">    &lt;div class=&quot;g-bd&quot;&gt;</div><div class="line">        &lt;p&gt;请增加或减少内容，或改变窗口大小，以便查看效果。&lt;/p&gt;</div><div class="line">        &lt;p&gt;请增加或减少内容，或改变窗口大小，以便查看效果。&lt;/p&gt;</div><div class="line">        &lt;p&gt;请增加或减少内容，或改变窗口大小，以便查看效果。&lt;/p&gt;</div><div class="line">        &lt;p&gt;请增加或减少内容，或改变窗口大小，以便查看效果。&lt;/p&gt;</div><div class="line">        &lt;p&gt;请增加或减少内容，或改变窗口大小，以便查看效果。&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;g-ft&quot;&gt;</div><div class="line">    &lt;p&gt;底部始终在文档末尾，当文档较长时跟随在文档末尾，当文档较短时在窗口底部。&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="九-前自适应后跟随"><a href="#九-前自适应后跟随" class="headerlink" title="九. 前自适应后跟随"></a>九. 前自适应后跟随</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.m-demo &#123;</div><div class="line">		padding: 5px 0;</div><div class="line">		border-bottom: 1px dotted #ddd;</div><div class="line">		font-size: 12px;</div><div class="line">	&#125;</div><div class="line">	.m-demo .cnt &#123;</div><div class="line">		float: left;</div><div class="line">		margin-right: 80px;</div><div class="line">	&#125;</div><div class="line">	.m-demo .date &#123;</div><div class="line">		display: inline;</div><div class="line">		float: left;</div><div class="line">		margin-left: -70px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;m-demo f-cb&quot;&gt;</div><div class="line">    &lt;div class=&quot;cnt&quot;&gt;这是一段长度未知的文本，自动换行，且不会把右边的时间挤掉，修改这段文字长度或改变窗口宽度试试。&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;date&quot;&gt;2009-08-08&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="十-图文问题"><a href="#十-图文问题" class="headerlink" title="十. 图文问题"></a>十. 图文问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	/* 左图右文  */</div><div class="line">	.m-demo:after, .m-demo li .cnt:after &#123;</div><div class="line">		display: block;</div><div class="line">		clear: both;</div><div class="line">		visibility: hidden;</div><div class="line">		height: 0;</div><div class="line">		overflow: hidden;</div><div class="line">		content: &quot;.&quot;;</div><div class="line">	&#125;</div><div class="line">	.m-demo, .m-demo li .cnt &#123;</div><div class="line">		zoom: 1;</div><div class="line">	&#125;</div><div class="line">	.m-demo &#123;</div><div class="line">		width: 640px;</div><div class="line">		margin: 0 0 1em;</div><div class="line">		overflow: hidden;</div><div class="line">		background: #dfedf0;</div><div class="line">	&#125;</div><div class="line">	.m-demo ul &#123;</div><div class="line">		padding: 0;</div><div class="line">		margin: -11px 0 -10px;</div><div class="line">	&#125;</div><div class="line">	.m-demo li &#123;</div><div class="line">		padding: 10px 0;</div><div class="line">		border-top: 1px dashed #999;</div><div class="line">	&#125;</div><div class="line">	.m-demo .img &#123;</div><div class="line">		float: left;</div><div class="line">		width: 100px;</div><div class="line">		height: 100px;</div><div class="line">		padding: 5px;</div><div class="line">		border: 1px solid #ccc;</div><div class="line">		margin-right: -112px;</div><div class="line">		background: #eee;</div><div class="line">	&#125;</div><div class="line">	.m-demo .img img, .m-demo .img a &#123;</div><div class="line">		display: block;</div><div class="line">		width: 100px;</div><div class="line">		height: 100px;</div><div class="line">	&#125;</div><div class="line">	.m-demo .txt &#123;</div><div class="line">		line-height: 18px;</div><div class="line">		color: #666;</div><div class="line">		margin-left: 122px;</div><div class="line">	&#125;</div><div class="line">	.m-demo .txt h3 &#123;</div><div class="line">		margin: 0 0 3px;</div><div class="line">		font-size: 14px;</div><div class="line">	&#125;</div><div class="line">	.m-demo .txt a, .m-demo .txt a:hover &#123;</div><div class="line">		color: #f60;</div><div class="line">	&#125;</div><div class="line">	.m-demo .txt p &#123;</div><div class="line">		font-size: 12px;</div><div class="line">		margin: 0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* 左图右文列表 */</div><div class="line">	.m-demo-1 ul &#123;</div><div class="line">		margin: -21px 0 0 -20px;</div><div class="line">	&#125;</div><div class="line">	.m-demo-1 li &#123;</div><div class="line">		float: left;</div><div class="line">		display: inline;</div><div class="line">		width: 200px;</div><div class="line">		overflow: hidden;</div><div class="line">		margin: 1px 0 -11px;</div><div class="line">		padding: 20px 0 10px 20px;</div><div class="line">		border-top: none;</div><div class="line">		border-bottom: 1px dashed #999;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* 上图下文列表 */</div><div class="line">	.m-demo-2 ul &#123;</div><div class="line">		margin: -20px 0 0 -20px;</div><div class="line">	&#125;</div><div class="line">	.m-demo-2 li &#123;</div><div class="line">		float: left;</div><div class="line">		display: inline;</div><div class="line">		width: 112px;</div><div class="line">		padding: 0;</div><div class="line">		border: none;</div><div class="line">		margin: 20px 0 0 20px;</div><div class="line">		overflow: hidden;</div><div class="line">	&#125;</div><div class="line">	.m-demo-2 .img &#123;</div><div class="line">		float: none;</div><div class="line">	&#125;</div><div class="line">	.m-demo-2 .txt &#123;</div><div class="line">		margin: 6px 0 0 0;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">       &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文左图右文&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt; </div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo m-demo-1&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;左图右文列表左图右文列表左图右文列表左图右文列表左图右文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;左图右文列表左图右文列表左图右文列表左图右文列表左图右文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;左图右文列表左图右文列表左图右文列表左图右文列表左图右文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo m-demo-2&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;上图下文列表上图下文列表上图下文列表上图下文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;上图下文列表上图下文列表上图下文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;上图下文列表上图下文列表上图下文列表上图下文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;上图下文列表上图下文列表上图下文列表上图下文列表上图下文列表上图下文列表上图下文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;div class=&quot;cnt&quot;&gt;</div><div class="line">                &lt;div class=&quot;img&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://nec.netease.com/img/s/3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">                &lt;div class=&quot;txt&quot;&gt;</div><div class="line">                    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;标题标题标题&lt;/a&gt;&lt;/h3&gt;</div><div class="line">                    &lt;p&gt;上图下文列表上图下文列表上图下文列表上图下文列表上图下文列表&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="十一-表头固定内容滚动"><a href="#十一-表头固定内容滚动" class="headerlink" title="十一. 表头固定内容滚动"></a>十一. 表头固定内容滚动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">	.m-demo &#123;</div><div class="line">		margin: 0 0 20px;</div><div class="line">		line-height: 18px;</div><div class="line">	&#125;</div><div class="line">	.m-demo .scroll &#123;</div><div class="line">		max-height: 116px;</div><div class="line">		border: 1px solid #ddd;</div><div class="line">		border-top: 0;</div><div class="line">		overflow-y: auto;</div><div class="line">	&#125;</div><div class="line">	.m-demo table &#123;</div><div class="line">		width: 100%;</div><div class="line">		table-layout: fixed;</div><div class="line">	&#125;</div><div class="line">	.m-demo th, .m-demo td &#123;</div><div class="line">		width: 100px;</div><div class="line">		padding: 10px;</div><div class="line">		border: 1px solid #ddd;</div><div class="line">	&#125;</div><div class="line">	.m-demo th &#123;</div><div class="line">		font-weight: bold;</div><div class="line">		background: #eee;</div><div class="line">	&#125;</div><div class="line">	.m-demo thead th:last-child, .m-demo tbody td:last-child &#123;</div><div class="line">		width: auto;</div><div class="line">	&#125;</div><div class="line">	.m-demo tbody tr:nth-child(2n) &#123;</div><div class="line">		background: #fafafa;</div><div class="line">	&#125;</div><div class="line">	.m-demo tbody tr:first-child td &#123;</div><div class="line">		border-top: 0;</div><div class="line">	&#125;</div><div class="line">	.m-demo tbody tr:last-child td &#123;</div><div class="line">		border-bottom: 0;</div><div class="line">	&#125;</div><div class="line">	.m-demo tbody tr td:first-child &#123;</div><div class="line">		border-left: 0;</div><div class="line">	&#125;</div><div class="line">	.m-demo tbody tr td:last-child &#123;</div><div class="line">		border-right: 0;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">	&lt;table&gt;</div><div class="line">        &lt;thead&gt;</div><div class="line">           &lt;tr&gt;&lt;th&gt;定宽a&lt;/th&gt;&lt;th&gt;定宽b&lt;/th&gt;&lt;th&gt;定宽c&lt;/th&gt;&lt;th&gt;最后列不定宽d&lt;/th&gt;&lt;/tr&gt;</div><div class="line">        &lt;/thead&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">	&lt;div class=&quot;scroll&quot;&gt;</div><div class="line">	    &lt;table&gt;</div><div class="line">            &lt;tbody&gt;</div><div class="line">                &lt;tr&gt;&lt;td&gt;定宽a&lt;/td&gt;&lt;td&gt;定宽b&lt;/td&gt;&lt;td&gt;定宽c&lt;/td&gt;&lt;td&gt;最后列不定宽d&lt;/td&gt;&lt;/tr&gt;</div><div class="line">                &lt;tr&gt;&lt;td&gt;定宽a&lt;/td&gt;&lt;td&gt;定宽b&lt;/td&gt;&lt;td&gt;定宽c&lt;/td&gt;&lt;td&gt;最后列不定宽d&lt;/td&gt;&lt;/tr&gt;</div><div class="line">                &lt;tr&gt;&lt;td&gt;定宽a&lt;/td&gt;&lt;td&gt;定宽b&lt;/td&gt;&lt;td&gt;定宽c&lt;/td&gt;&lt;td&gt;最后列不定宽d&lt;/td&gt;&lt;/tr&gt;</div><div class="line">                &lt;tr&gt;&lt;td&gt;定宽a&lt;/td&gt;&lt;td&gt;定宽b&lt;/td&gt;&lt;td&gt;定宽c&lt;/td&gt;&lt;td&gt;最后列不定宽d&lt;/td&gt;&lt;/tr&gt;</div><div class="line">                &lt;tr&gt;&lt;td&gt;定宽a&lt;/td&gt;&lt;td&gt;定宽b&lt;/td&gt;&lt;td&gt;定宽c&lt;/td&gt;&lt;td&gt;最后列不定宽d&lt;/td&gt;&lt;/tr&gt;</div><div class="line">                &lt;tr&gt;&lt;td&gt;定宽a&lt;/td&gt;&lt;td&gt;定宽b&lt;/td&gt;&lt;td&gt;定宽c&lt;/td&gt;&lt;td&gt;最后列不定宽d&lt;/td&gt;&lt;/tr&gt;</div><div class="line">            &lt;/tbody&gt;</div><div class="line">        &lt;/table&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-单列布局&quot;&gt;&lt;a href=&quot;#一-单列布局&quot; class=&quot;headerlink&quot; title=&quot;一. 单列布局&quot;&gt;&lt;/a&gt;一. 单列布局&lt;/h2&gt;&lt;h3 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：jQuery(下)</title>
    <link href="http://yoursite.com/2015/11/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9AjQuery(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2015/11/09/前端知识点/前端知识点：前端知识点：jQuery(下)/</id>
    <published>2015-11-09T13:44:15.000Z</published>
    <updated>2017-03-31T11:14:41.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jQuery获取物体信息"><a href="#1-jQuery获取物体信息" class="headerlink" title="1. jQuery获取物体信息"></a>1. jQuery获取物体信息</h2><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul>
<li><p>​</p>
<p>obj.offsetWidth</p>
</li>
<li><p>​</p>
<p>obj.offsetHeight</p>
</li>
<li><p>​</p>
<p>obj.offsetLeft</p>
</li>
<li><p>​</p>
<p>obj.offsetTop</p>
</li>
<li><p>​</p>
<p>obj.parentNode 结构父级 根：document</p>
</li>
<li><p>​</p>
<p>obj.offsetParent 定位父级 根：body</p>
</li>
</ul>
<p><strong>js处理小数较弱，取出时取整Math.round()</strong></p>
<h3 id="jQuery-只封装了以下方法"><a href="#jQuery-只封装了以下方法" class="headerlink" title="jQuery(只封装了以下方法)"></a>jQuery(只封装了以下方法)</h3><ul>
<li><p>​</p>
<p><code>obj.width();</code> 纯width</p>
</li>
<li><p>​</p>
<p><code>obj.height();</code> 纯height</p>
</li>
<li><p>​</p>
<p><code>obj.outerWidth();</code> 盒子模型的width (width+padding+border) =&gt; offsetWidth</p>
</li>
<li><p>​</p>
<p><code>obj.outerHeight();</code> 盒子模型的height (height+padding+border) =&gt; offsetHeight</p>
</li>
<li><p>​</p>
<p><code>obj.position().left;</code> 距离定位父级left值 (不包括margin) =&gt; offsetLeft</p>
</li>
<li><p>​</p>
<p><code>obj.position().top;</code> 距离定位父级top值 (不包括margin) =&gt; offsetTop</p>
</li>
<li><p>​</p>
<p><code>obj.offset().left;</code> 距离定位父级left值 (包括margin)</p>
</li>
<li><p>​</p>
<p><code>obj.offset().top;</code> 距离定位父级top值 (包括margin)</p>
</li>
<li><p>​</p>
<p><code>obj.scrollTop();</code> 元素相对滚动条顶部的偏移</p>
</li>
<li><p>​</p>
<p><code>obj.scrollLeft();</code> 元素相对滚动条左侧的偏移</p>
</li>
</ul>
<p>父级</p>
<ul>
<li><code>obj.parent()</code> 结构父级 根：document =&gt; parentNode</li>
<li><code>obj.parents()</code> 返回被选元素的所有祖先元素，直到 <code>&lt;html&gt;</code></li>
<li><code>obj.offsetParent()</code> 定位父级 根：body =&gt; offsetParent</li>
</ul>
<p>子级</p>
<ul>
<li><code>obj.children()</code> 返回被选元素的所有直接子元素</li>
<li><code>obj.find()</code> 返回被选元素的后代元素，一路向下直到最后一个后代</li>
</ul>
<h2 id="2-jQuery筛选"><a href="#2-jQuery筛选" class="headerlink" title="2. jQuery筛选"></a>2. jQuery筛选</h2><h3 id="1-过滤"><a href="#1-过滤" class="headerlink" title="(1) 过滤"></a>(1) 过滤</h3><ul>
<li><p><code>.eq(index)</code></p>
</li>
<li><ul>
<li>index &gt;= 0 正向选取(0代表第一个，1代表第二个)</li>
<li>index &lt; 0 反向选取(-1代表倒数第一个)</li>
</ul>
</li>
<li><p><code>.first()</code></p>
</li>
<li><p><code>.last()</code></p>
</li>
<li><p><code>.hasClass(className)</code></p>
</li>
</ul>
<h3 id="2-查找"><a href="#2-查找" class="headerlink" title="(2) 查找"></a>(2) 查找</h3><ul>
<li><code>.find(tagName/className/id)</code> eg: <code>oBox.find(&#39;ol li&#39;);</code></li>
</ul>
<h2 id="3-jQuery-lt-gt-js"><a href="#3-jQuery-lt-gt-js" class="headerlink" title="3. jQuery &lt;=&gt; js"></a>3. jQuery &lt;=&gt; js</h2><h3 id="1-原生js转jQuery对象"><a href="#1-原生js转jQuery对象" class="headerlink" title="(1) 原生js转jQuery对象"></a>(1) 原生js转jQuery对象</h3><p><strong>$() 包裹</strong>this -&gt; $(this) document -&gt; $(document)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var oDiv = document.getElementById(&apos;div1&apos;);    $(oDiv).html(&apos;xxx&apos;);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="2-jQuery转原生js对象"><a href="#2-jQuery转原生js对象" class="headerlink" title="(2) jQuery转原生js对象"></a>(2) jQuery转原生js对象</h3><p><strong>[] / get()</strong></p>
<ol>
<li><code>$(&#39;div&#39;)[0].innerHTML=&#39;xxx&#39;;</code></li>
<li><code>$(&#39;div&#39;).get(0).innerHTML=&#39;xxx;</code></li>
</ol>
<h2 id="4-jQuery链式运动"><a href="#4-jQuery链式运动" class="headerlink" title="4. jQuery链式运动"></a>4. jQuery链式运动</h2><p><code>obj.css(...).html(...).attr(...).click();</code></p>
<h2 id="5-jQuery循环"><a href="#5-jQuery循环" class="headerlink" title="5. jQuery循环"></a>5. jQuery循环</h2><p><code>obj.each(function(){...});</code></p>
<p>JS中的forEach、$.each、map方法推荐</p>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $(&apos;div&apos;).each(function(index, element) &#123;  // 索引，当前元素        console.log($(element).html);  // **element是原生对象，需转成jq对象        $(this);  // 当前对象    &#125;);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-jQuery工具"><a href="#6-jQuery工具" class="headerlink" title="6. jQuery工具"></a>6. jQuery工具</h2><ul>
<li><code>$.trim(str);</code> 去掉字符串起始和结尾的空格</li>
<li><code>$.browser.version;</code> 浏览器版本</li>
</ul>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if($.browse.version.substring(0, 1) == &apos;6&apos;) &#123;        // IE6 code here    &#125;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="7-jQuery-Ajax"><a href="#7-jQuery-Ajax" class="headerlink" title="7. jQuery Ajax"></a>7. jQuery Ajax</h2><p><code>$.ajax({...});</code></p>
<ul>
<li><strong>type: ‘get/post’</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.ajax(&#123;        url: URL,        data: &#123;&#125;,        type: &apos;get&apos;,        error: fn,        complete: fn,        time: 3000;        success: function(str) &#123;            console.log(str);        &#125;    &#125;)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="8-jQuery-jsonp"><a href="#8-jQuery-jsonp" class="headerlink" title="8. jQuery jsonp"></a>8. jQuery jsonp</h2><p><code>$.ajax({...});</code></p>
<ul>
<li><strong>dataType: ‘jsonp’</strong></li>
<li><strong>cbName: ‘callback/cb’</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.ajax(&#123;        url: URL,        data: &#123;&#125;,        dataType: &apos;jsonp&apos;,        cbName: &apos;callback&apos;,        success: function(json) &#123;            console.log(json);        &#125;    &#125;);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="9-jQuery插件"><a href="#9-jQuery插件" class="headerlink" title="9. jQuery插件"></a>9. jQuery插件</h2><h3 id="写插件"><a href="#写插件" class="headerlink" title="写插件"></a>写插件</h3><p>$: jq fn: 帮助</p>
<p><strong>jq里面除了插件里的this以外，其他都是原生的js</strong></p>
<p>jquery的$.extend和$.fn.extend作用及区别</p>
<h3 id="一个插件"><a href="#一个插件" class="headerlink" title="一个插件"></a>一个插件</h3><p><code>$.fn.插件名=fn;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.fn.插件名 = function() &#123;        this.css(&apos;name&apos;, &apos;value&apos;);  // 插件中的this不用加$    &#125;    $(&apos;div&apos;).插件名();&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="一组插件"><a href="#一组插件" class="headerlink" title="一组插件"></a>一组插件</h3><p><code>$.fn.extend(...);</code></p>
<blockquote>
<p>插件调用不能用链式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $.fn.extend(&#123;        插件名1: function() &#123;            this.css(&apos;name&apos;, &apos;value&apos;);        &#125;,        插件名2: function() &#123;            this.css(&apos;name&apos;, &apos;value&apos;);        &#125;    &#125;)    // 插件调用不能用链式    $(&apos;div&apos;).插件名1();    $(&apos;div&apos;).插件名2();&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-jQuery获取物体信息&quot;&gt;&lt;a href=&quot;#1-jQuery获取物体信息&quot; class=&quot;headerlink&quot; title=&quot;1. jQuery获取物体信息&quot;&gt;&lt;/a&gt;1. jQuery获取物体信息&lt;/h2&gt;&lt;h3 id=&quot;js&quot;&gt;&lt;a href=&quot;#j
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：前端知识点：jQuery(上)</title>
    <link href="http://yoursite.com/2015/11/01/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9AjQuery(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2015/11/01/前端知识点/前端知识点：前端知识点：jQuery(上)/</id>
    <published>2015-11-01T14:44:15.000Z</published>
    <updated>2017-03-31T11:13:38.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jQuery-amp-amp-js"><a href="#1-jQuery-amp-amp-js" class="headerlink" title="1. jQuery &amp;&amp; js"></a>1. jQuery &amp;&amp; js</h2><table>
<thead>
<tr>
<th></th>
<th>jQuery</th>
<th>js</th>
</tr>
</thead>
<tbody>
<tr>
<td>onload</td>
<td>$(function() {});</td>
<td>window.onload=function(){};</td>
</tr>
<tr>
<td>获取元素</td>
<td>$(‘div’);</td>
<td>document.getElementsByTagName(‘div’);</td>
</tr>
<tr>
<td>事件</td>
<td>obj.click(fn);</td>
<td>obj.onclick=fn;</td>
</tr>
<tr>
<td>this</td>
<td>$(this)</td>
<td>this</td>
</tr>
<tr>
<td>索引</td>
<td>$(this).index()</td>
<td>aDiv[i].index=i;…</td>
</tr>
<tr>
<td>操作属性</td>
<td>(1)获取attr(name)</td>
<td>(1).</td>
</tr>
<tr>
<td></td>
<td>(2)设置attr(name, value)</td>
<td>(2)[]</td>
</tr>
<tr>
<td></td>
<td></td>
<td>(3)getAttribute()/setAttribute()</td>
</tr>
</tbody>
</table>
<h2 id="2-jQuery效果"><a href="#2-jQuery效果" class="headerlink" title="2. jQuery效果"></a>2. jQuery效果</h2><ul>
<li><code>.hide()</code> 隐藏</li>
<li><code>.show()</code> 显示</li>
<li><code>.slideDown()</code> 下滑</li>
<li><code>.slideUp()</code> 上滑</li>
<li><code>.fadeIn()</code> 淡入</li>
<li><code>.fadeOut()</code> 淡出</li>
</ul>
<blockquote>
<p>参数：time时间，easing运动方式，fn回调函数</p>
</blockquote>
<ul>
<li><code>.animate(params,[speed],[easing],fn)</code></li>
</ul>
<p>eg: <code>.animate({width:&#39;100px&#39;,opacity:1},&#39;slow&#39;,{duration:1000,easing:&#39;linear&#39;,complete:function(){...}})</code></p>
<blockquote>
<p>animate()函数记得先清除定时器<code>$(&#39;ul&#39;).stop().animate(...);</code></p>
</blockquote>
<h2 id="3-jQuery选择器"><a href="#3-jQuery选择器" class="headerlink" title="3. jQuery选择器"></a>3. jQuery选择器</h2><h3 id="1-伪类选择器"><a href="#1-伪类选择器" class="headerlink" title="(1) 伪类选择器"></a>(1) 伪类选择器</h3><ul>
<li><code>$(&#39;li:first&#39;)</code> 第一个</li>
<li><code>$(&#39;li:last&#39;)</code> 最后一个</li>
<li><code>$(&#39;li:eq(n)&#39;)</code> 第<strong>n+1</strong>个</li>
<li><code>$(&#39;li:odd&#39;)</code> 第<strong>奇数</strong>个 (tips:记忆odd字母个数为奇数个)</li>
<li><code>$(&#39;li:even&#39;)</code> 第<strong>偶数</strong>个 (tips:记忆even字母个数为偶数个)</li>
<li><code>$(&#39;li:contains(xxx)&#39;)</code> 包含文本xxx的li标签</li>
<li><code>$(&#39;li:has(p)&#39;)</code> 包含p标签的li标签</li>
</ul>
<h3 id="2-属性选择器"><a href="#2-属性选择器" class="headerlink" title="(2) 属性选择器"></a>(2) 属性选择器</h3><ul>
<li><code>$(&#39;input[type==password]&#39;)</code> 属性type为password的input标签</li>
</ul>
<h2 id="4-jQuery操作css属性"><a href="#4-jQuery操作css属性" class="headerlink" title="4. jQuery操作css属性"></a>4. jQuery操作css属性</h2><ul>
<li><p>获取 <code>.css(&#39;name&#39;)</code>;</p>
</li>
<li><p>设置</p>
</li>
<li><ul>
<li>单一样式 <code>.css(&#39;name&#39;, &#39;value&#39;)</code></li>
<li>多个样式 <code>.css({&#39;name&#39;: &#39;value&#39;, &#39;name2&#39;: &#39;value2&#39;})</code><br>eg: <code>.css(&#39;background-color&#39;: &#39;red&#39;)</code>或者<code>.css(&#39;backgroundColor&#39;: &#39;red&#39;)</code></li>
</ul>
</li>
</ul>
<h2 id="5-jQuery操作内容"><a href="#5-jQuery操作内容" class="headerlink" title="5. jQuery操作内容"></a>5. jQuery操作内容</h2><ul>
<li><p>非表单</p>
</li>
<li><ul>
<li>获取 <code>.html()</code> // innnerHTML</li>
<li>设置 <code>.html(&#39;xxx&#39;)</code></li>
</ul>
</li>
<li><p>表单</p>
</li>
<li><ul>
<li>获取 <code>.val()</code> // value</li>
<li>设置 <code>.val(&#39;xxx&#39;)</code></li>
</ul>
</li>
<li><p>文本</p>
</li>
<li><ul>
<li>获取 <code>.text()</code></li>
<li>设置 <code>.text(&#39;xxx&#39;)</code></li>
</ul>
</li>
</ul>
<h2 id="6-jQuery操作类名"><a href="#6-jQuery操作类名" class="headerlink" title="6. jQuery操作类名"></a>6. jQuery操作类名</h2><ul>
<li>添加 <code>.addClass(&#39;xxx&#39;)</code></li>
<li>删除 <code>.removeClass(&#39;xxx&#39;)</code></li>
<li>添加/删除 <code>.toggleClass(&#39;xxx&#39;)</code></li>
</ul>
<h2 id="7-jQuery操作属性"><a href="#7-jQuery操作属性" class="headerlink" title="7. jQuery操作属性"></a>7. jQuery操作属性</h2><ul>
<li><p>获取 <code>.attr(name)</code></p>
</li>
<li><p>设置</p>
</li>
<li><ul>
<li>单一属性 <code>.attr(&#39;name&#39;, &#39;value&#39;)</code></li>
<li>多个属性 <code>.attr({&#39;name&#39;: &#39;value&#39;, &#39;name2&#39;: &#39;value2&#39;})</code></li>
</ul>
</li>
</ul>
<h2 id="8-jQuery-DOM"><a href="#8-jQuery-DOM" class="headerlink" title="8. jQuery DOM"></a>8. jQuery DOM</h2><h3 id="1-创建元素"><a href="#1-创建元素" class="headerlink" title="(1) 创建元素"></a>(1) 创建元素</h3><p><code>$(&#39;&lt;div&gt;text&lt;/div&gt;&#39;)</code></p>
<h3 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="(2) 添加元素"></a>(2) 添加元素</h3><ul>
<li><p>​</p>
<p><code>.append()</code>parent.append(child); 父级添加子级至末尾</p>
</li>
<li><p>​</p>
<p><code>.appendTo</code>child.appendTo(parent); 子级追加至父级末尾</p>
</li>
<li><p>​</p>
<p><code>.prepend()</code>parent.prepend(child); 父级添加子级至最前</p>
</li>
<li><p>​</p>
<p><code>.prependTo()</code>child.prependTo(parent); 子级追加至父级最前</p>
</li>
<li><p>​</p>
<p><code>.before()</code>sib1.before(sib2); sib2添加至同级sib1前面</p>
</li>
<li><p>​</p>
<p><code>.after()</code>sib1.after(sib2); sib2添加至同级sib1后面</p>
</li>
<li><p>​</p>
<p><code>.insertBefore()</code>sib1.insertBefore(sib2); sib1添加至同级sib2前面</p>
</li>
<li><p>​</p>
<p><code>.insertAfter()</code>sib1.insertAfter(sib2); sib1添加至同级sib2后面</p>
</li>
<li><p>​</p>
<p><code>.wrap()</code>child.wrap(parent); 子元素被父元素包裹</p>
</li>
<li><p>​</p>
<p><code>.unwrap()</code>child.unwrap(); 子元素移出上级父元素</p>
</li>
</ul>
<h3 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="(3) 删除元素"></a>(3) 删除元素</h3><ul>
<li><p>​</p>
<p><code>.remove()</code>obj.remove(); 删除obj节点</p>
</li>
<li><p>​</p>
<p><code>.empty()</code>obj.empty(); 删除obj内所有子节点</p>
</li>
<li><p>​</p>
<p><code>.detach()</code></p>
</li>
<li><p>​</p>
<p>$(‘p’).detach(); 删除所有p标签及其中内容</p>
</li>
<li><p>​</p>
<p>$(‘p’).detach(‘.hello’); 删除所有类为hello的p标签及其中内容</p>
</li>
</ul>
<h2 id="9-jQuery事件"><a href="#9-jQuery事件" class="headerlink" title="9. jQuery事件"></a>9. jQuery事件</h2><p><strong>jQuery中所有事件都是绑定的</strong></p>
<ul>
<li><p>​</p>
<p><code>.ready()</code> DOM完全加载时执行的函数</p>
</li>
<li><p>​</p>
<p><code>.change()</code></p>
</li>
<li><p>​</p>
<p><code>.click()</code></p>
</li>
<li><p>​</p>
<p><code>.dblclick()</code> 双击 注意是<strong>dbl</strong></p>
</li>
<li><p>​</p>
<p><code>.contextmenu()</code> 右击</p>
</li>
<li><p>​</p>
<p><code>.hover()</code>hover(over, out) 可以绑定两个方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    obj.hover(function() &#123;        // 移入    &#125;, function() &#123;        // 移出    &#125;)&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>.mouseover()</code></li>
<li><code>.mouseout()</code></li>
<li><code>.mousedown()</code></li>
<li><code>.mouseup()</code></li>
<li><code>.mousewheel</code> 鼠标滚轮 <strong>jQuery没有封装这个函数，需用on事件绑定</strong></li>
<li><code>.keydown()</code></li>
<li><code>.keypress()</code></li>
<li><code>.keyup()</code></li>
</ul>
<blockquote>
<p><strong>最好不用jQuery封装的事件，都用on事件绑定</strong></p>
</blockquote>
<ul>
<li><p>​</p>
<p><code>.on()</code> 绑定</p>
</li>
<li><p>​</p>
<p><code>.off()</code> 解绑</p>
</li>
<li><p>​</p>
<p><code>.bind()</code> 绑定</p>
</li>
<li><p>​</p>
<p><code>.unbind()</code> 解绑</p>
</li>
</ul>
<p>// live() die() jQuery 1.7+被删除</p>
<p>jQuery事件绑定on()、bind()与delegate() 方法详解</p>
<h3 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h3><ul>
<li><code>returnfalse;</code> 阻止默认事件、阻止冒泡</li>
<li><code>ev.preventDefault();</code> 阻止默认事件</li>
<li><code>ev.stopPropagation();</code> 阻止冒泡</li>
</ul>
<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul>
<li>第一种方法 <code>.on(events,selector,callback)</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // $(&apos;table td&apos;).on(&apos;hover&apos;, function() &#123;    //  $(this).toggleClass(&apos;active&apos;);    // &#125;)    // =&gt;    $(&apos;table&apos;).on(&apos;hover&apos;, &apos;td&apos;, function() &#123;        #(this).toggleClass(&apos;active&apos;);    &#125;)&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>第二种方法 <code>.delegate()</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    $(&apos;table&apos;).delegate(&apos;td&apos;, &apos;hover&apos;, function() &#123;        $(this).toggleClass(&apos;active&apos;);    &#125;)&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-jQuery-amp-amp-js&quot;&gt;&lt;a href=&quot;#1-jQuery-amp-amp-js&quot; class=&quot;headerlink&quot; title=&quot;1. jQuery &amp;amp;&amp;amp; js&quot;&gt;&lt;/a&gt;1. jQuery &amp;amp;&amp;amp; js&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：slice和splice区别</title>
    <link href="http://yoursite.com/2015/08/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9Aslice%E5%92%8Csplice%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2015/08/17/前端知识点/前端知识点：slice和splice区别/</id>
    <published>2015-08-17T12:14:15.000Z</published>
    <updated>2017-03-31T11:08:11.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="slice和splice区别"><a href="#slice和splice区别" class="headerlink" title="slice和splice区别"></a>slice和splice区别</h1><p>##slice</p>
<ul>
<li>基于当前数组中的一或多个项创建一个新数组</li>
<li>可以接受一或两个参数，即要返回项的起始和结束位置,但不包括结束位置</li>
<li>在只有一个参数的情况下，返回从该参数指定位置开始到当前数组末尾的所有项</li>
<li><strong>不会影响原始数组</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;];</div><div class="line">var colors2 = colors.slice(1);</div><div class="line">var colors3 = colors.slice(1,4);</div><div class="line"></div><div class="line">console.log(colors); // [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</div><div class="line">console.log(colors2); // [&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;purple&quot;]</div><div class="line">console.log(colors3); // [&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;]</div></pre></td></tr></table></figure>
<blockquote>
<p>如果参数中有一个负数，则用数组长度加上该数来确定相应的位置。例如，在一个包含5项的数组上调用 <code>slice(-2,-1)</code>与调用 <code>slice(3,4)</code>得到的结果相同。如果结束位置小于起始位置，则返回空数组。</p>
</blockquote>
<hr>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><ul>
<li>主要用途是向数组的中部插入元素</li>
<li><strong>会影响原始数组</strong></li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>要实现 <code>splice</code> 的删除功能，最多只能传两个参数</p>
<h6 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h6><p>删除从参数位置到当前数组末尾的所有项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(0)</div><div class="line"></div><div class="line">console.log(colors) // []</div><div class="line">console.log(spliceColors) // [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;]</div></pre></td></tr></table></figure>
<h6 id="两个参数"><a href="#两个参数" class="headerlink" title="两个参数"></a>两个参数</h6><p>起始位置和要删除元素的数量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(0,2)</div><div class="line"></div><div class="line">console.log(colors) // [&quot;blue&quot;, &quot;black&quot;]</div><div class="line">console.log(spliceColors) // [&quot;red&quot;, &quot;green&quot;]</div></pre></td></tr></table></figure>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>要实现 <code>splice</code> 的插入功能，至少传3个参数：起始位置、0（要删除元素的数量）和要插入的元素。如果要插入多个元素，可以再传入第四、第五，以至任意多个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(1,0,&apos;yellow&apos;,&apos;white&apos;)</div><div class="line"></div><div class="line">console.log(colors) // [&quot;red&quot;, &quot;yellow&quot;, &quot;white&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;]</div><div class="line">console.log(spliceColors) // []</div></pre></td></tr></table></figure>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>splice</code> 可以向指定位置插入任意数量的项，且同时删除任意数量的项。要实现 <code>splice</code>的替换功能，只需指定3个参数：起始位置、要删除元素的数量和要插入的元素。插入的项数不必与删除的项数相等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(1,2,&apos;yellow&apos;,&apos;white&apos;)</div><div class="line"></div><div class="line">console.log(colors) // [&quot;red&quot;, &quot;yellow&quot;, &quot;white&quot;, &quot;black&quot;]</div><div class="line">console.log(spliceColors) // [&quot;green&quot;, &quot;blue&quot;]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;slice和splice区别&quot;&gt;&lt;a href=&quot;#slice和splice区别&quot; class=&quot;headerlink&quot; title=&quot;slice和splice区别&quot;&gt;&lt;/a&gt;slice和splice区别&lt;/h1&gt;&lt;p&gt;##slice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：事件篇</title>
    <link href="http://yoursite.com/2015/08/03/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%AF%87/"/>
    <id>http://yoursite.com/2015/08/03/前端知识点/前端知识点：事件篇/</id>
    <published>2015-08-03T13:44:15.000Z</published>
    <updated>2017-03-31T11:04:34.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-事件对象"><a href="#1-事件对象" class="headerlink" title="1. 事件对象"></a>1. 事件对象</h2><ul>
<li>event  事件对象(系统自带)<br>*兼容：Chrome IE系<br>FF -&gt; 报错</li>
<li>ev     事件函数传入参数<br>*兼容：高级浏览器(Chrome、FF、IE9+)<br>IE8- -&gt; undefined</li>
</ul>
<p><strong>兼容写法</strong>：var oEvent = ev || event;</p>
<h2 id="2-事件冒泡"><a href="#2-事件冒泡" class="headerlink" title="2. 事件冒泡"></a>2. 事件冒泡</h2><p>概念：子级的事件会传递给父级。如果父级有相同的事件，会依次从内到外执行，直到相同事件的祖宗节点，否则会继续冒泡。</p>
<p><strong>阻止事件冒泡：</strong></p>
<p>子级事件内添加  <code>oEvent.cancelBubble = true;</code></p>
<h2 id="3-事件绑定"><a href="#3-事件绑定" class="headerlink" title="3. 事件绑定"></a>3. 事件绑定</h2><p><strong>有效解决事件冲突</strong></p>
<ul>
<li>obj.addEventListener(事件名, 函数名/函数, 是否捕获);</li>
</ul>
<p>*兼容：高级浏览器</p>
<p>事件名 -&gt; 不能加’on’</p>
<p>函数名 -&gt; 不能加括号</p>
<p>是否捕获 -&gt; false</p>
<ul>
<li>obj.attachEvent(事件名, 函数名/函数);</li>
</ul>
<p>*兼容：IE10-</p>
<p>事件名 -&gt; 必须加’on’</p>
<p>函数名 -&gt; 不能加括号</p>
<p><strong>兼容写法</strong></p>
<p>封装一个事件绑定的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function addEvent(obj, sEv, fn) &#123;    //对象, 事件(不加on), 函数名/函数</div><div class="line">        if(obj.addEventListner) &#123;    //高级浏览器 -&gt; function  低级 -&gt;undefined</div><div class="line">            //高级浏览器</div><div class="line">            obj.addEventListener(sEv, fn, false);</div><div class="line">        &#125; else &#123;            //低级浏览器</div><div class="line">            obj.attachEvent(&apos;on&apos; + sEv, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="4-关于捕获-这点理解不是很到位"><a href="#4-关于捕获-这点理解不是很到位" class="headerlink" title="4. 关于捕获(这点理解不是很到位)"></a>4. 关于捕获(这点理解不是很到位)</h2><p>事件冒泡：子级 -&gt; 父级<br>设置捕获：父级 -&gt; 子级</p>
<h2 id="5-事件解绑"><a href="#5-事件解绑" class="headerlink" title="5. 事件解绑"></a>5. 事件解绑</h2><ul>
<li>obj.removeEventListener(事件名, 函数名/函数, 是否捕获);</li>
</ul>
<p>*兼容：高级浏览器</p>
<p><strong>注意：函数不能是匿名函数，每个匿名函数都相当于新创建了一个函数。</strong></p>
<p>创建函数 var show = new Function(‘a’,’b’, ‘alert(a + b)’);</p>
<ul>
<li>obj.detachEvent(事件名, 函数名/函数);</li>
</ul>
<p>*兼容：IE10-</p>
<p><strong>兼容写法</strong></p>
<p>封装一个事件解绑的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function removeEvent(obj, sEv, fn) &#123;    //对象, 事件(不加on), 函数名/函数</div><div class="line">        if(obj.removeEventListner) &#123;    //高级浏览器 -&gt; function  低级 -&gt;undefined</div><div class="line">            //高级浏览器</div><div class="line">            obj.removeEventListener(sEv, fn, false);</div><div class="line">        &#125; else &#123;            //低级</div><div class="line">            obj.detachEvent(&apos;on&apos; + sEv, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-查看鼠标点击位置"><a href="#6-查看鼠标点击位置" class="headerlink" title="6. 查看鼠标点击位置"></a>6. 查看鼠标点击位置</h2><p>var oEvent = ev || event;</p>
<p>X轴：oEvent.clientX;</p>
<p>Y轴：oEvent.clientY;</p>
<h2 id="7-键盘事件"><a href="#7-键盘事件" class="headerlink" title="7. 键盘事件"></a>7. 键盘事件</h2><ol>
<li>obj.onkeydown  按下键盘触发</li>
<li>obj.onkeyup    释放键盘触发</li>
<li>obj.oninput           键盘输入时实时触发<br>*兼容：高级浏览器<br>IE9删除时有问题</li>
</ol>
<ul>
<li>obj.onpropertychange    键盘输入时实时触发<br>*兼容：IE10-<br>IE9删除时有问题</li>
</ul>
<p><strong>兼容处理</strong></p>
<p>事件的兼容不需要处理，直接连等</p>
<p>obj.oninput = obj.onpropertychange = function() {}</p>
<p>*处理IE9：定时器</p>
<p>封装一个实时统计字数的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function calLen(obj1, obj2) &#123;        if (window.navigator.userAgent.indexOf(&apos;MSIE 9.0&apos;) != -1) &#123; //IE9</div><div class="line">            var timer = null;</div><div class="line">            obj1.onfocus = function() &#123;</div><div class="line">                timer = setInterval(function() &#123;</div><div class="line">                    obj2.innerHTML = obj1.value.length;</div><div class="line">                &#125;, 50);</div><div class="line">            &#125;;</div><div class="line">            obj1.onblur = function() &#123;</div><div class="line">                clearInterval(timer);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123; //能不添加定时器时就不添加</div><div class="line">            obj1.oninput = obj1.onpropertychange = function() &#123; //高级浏览器、IE10-</div><div class="line">                obj2.innerHTML = obj1.value.length;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>应用：实时统计输入字数</p>
<h3 id="键码-oEvent-keyCode"><a href="#键码-oEvent-keyCode" class="headerlink" title="键码 oEvent.keyCode"></a>键码 <code>oEvent.keyCode</code></h3><p><strong>重要</strong></p>
<ul>
<li>0~9：48~57</li>
<li>a~z：65~90</li>
<li>ctrl：17</li>
<li>delete：46</li>
<li>backspace：8</li>
<li>enter：13</li>
<li>左键：37</li>
<li>上键：38</li>
<li>右键：39</li>
<li>下键：40</li>
</ul>
<blockquote>
<p>组合键(js中键码不能组合使用)</p>
</blockquote>
<ul>
<li>ctrl  -&gt; ctrlKey</li>
<li>shift -&gt; shiftKey</li>
<li>alt   -&gt; altKey</li>
</ul>
<p>eg:<br><code>if(oEvent.ctrlKey &amp;&amp; oEvent.shiftKey &amp;&amp; oEvent.keyCode == 65){...}</code></p>
<h2 id="8-鼠标事件"><a href="#8-鼠标事件" class="headerlink" title="8. 鼠标事件"></a>8. 鼠标事件</h2><ol>
<li><p>obj.oncontextmenu 点击鼠标右键触发(有默认右键菜单行为)</p>
<blockquote>
<p>默认行为：<br>点击右键有菜单 文本框能输入内容 点击a标签能跳转等</p>
</blockquote>
<p><strong>阻止默认行为：return  false;</strong></p>
<p>应用：自定义右键菜单<br>应用：自定义输入框</p>
</li>
<li><p>obj.onmousedown    按下鼠标时触发</p>
</li>
<li><p>obj.onmouseup    抬起鼠标时触发</p>
</li>
<li><p>obj.onmousemove    鼠标移动触发</p>
<p>应用：拖拽<br>应用：拖拽(带框)<br>应用：磁性吸附</p>
</li>
<li><p>obj.onmouseover  鼠标移入时触发</p>
</li>
<li><p>obj.onmouseout   鼠标移出时触发</p>
<p><strong>问题</strong></p>
<p>问题1：移入子级也算重新移入<br>解决1：onmouseover -&gt; onmouseenter</p>
<p>问题2：移出子级也算移出<br>解决2：onmouseout -&gt; onmouseleave</p>
</li>
<li><p>obj.onmousewheel  滚动鼠标滚轮触发</p>
</li>
</ol>
<p>*兼容：Chrome IE系</p>
<p>DOMMouseScroll       DOM滚轮事件(<strong>DOM事件只能通过事件绑定添加</strong>)</p>
<p>*兼容：FF</p>
<p><strong>兼容写法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (window.navigator.userAgent.indexOf(&apos;FireFox&apos;) != -1) &#123;        document.addEventListener(&apos;DOMMouseScroll&apos;, function() &#123; //FF</div><div class="line">            //scroll code here</div><div class="line">        &#125;, false)</div><div class="line">    &#125; else &#123;        document.onmousewheel = function() &#123; //Chrome IE系</div><div class="line">            //scroll code here</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="判断滚动方向"><a href="#判断滚动方向" class="headerlink" title="判断滚动方向"></a>判断滚动方向</h3><ul>
<li><p>oEvent.wheelDelta</p>
<p>*兼容：Chrome IE系</p>
<p>向上：120</p>
<p>向下：-120</p>
</li>
<li><p>DOMMouseScroll</p>
<p>*兼容：FF</p>
<p>向上：-3</p>
<p>向下：3</p>
</li>
</ul>
<p><strong>兼容写法</strong></p>
<p>封装一个鼠标滚动方向的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function addWheel(obj, fn) &#123; //向上fn(false)，向下fn(true)</div><div class="line">        function wheel(ev) &#123;            var oEvent = ev || event;            // var bDown = true;                //默认向下 --&gt;</div><div class="line">            // if(oEvent.wheelDelta) &#123;            //FF -&gt; undefined</div><div class="line">            //     //Chrome IE系</div><div class="line">            //     bDown = oEvent.wheelDelta &lt; 0;</div><div class="line">            // &#125; else &#123;</div><div class="line">            //     //FF</div><div class="line">            //     bDown = oEvent.detail &gt; 0;</div><div class="line">            // &#125;</div><div class="line"></div><div class="line">            var bDown = oEvent.wheelDelta ? oEvent.wheelDelta &lt; 0 : oEvent.detail &gt; 0;            //判断是否传入函数，执行回调函数</div><div class="line">            fn &amp;&amp; fn(bDown);            //FF阻止默认</div><div class="line">            oEvent.preventDefault &amp;&amp; oEvent.preventDefault();            //阻止默认</div><div class="line">            return false;</div><div class="line">        &#125;        if (window.navigator.userAgent.indexOf(&apos;FireFox&apos;) != -1) &#123;            //FF</div><div class="line">            document.addEventListener(&apos;DOMMouseScroll&apos;, wheel, false); //事件中阻止默认没有用</div><div class="line">        &#125; else &#123;            //Chrome IE系</div><div class="line">            // document.onmousewheel = wheel;</div><div class="line">            addEvent(obj, &apos;mousewheel&apos;, wheel);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>oEvent.preventDefault();<br> 兼容：高级浏览器<br> IE8- -&gt; undefined</p>
</blockquote>
<p>应用：自定义滚动条</p>
<h2 id="9-domReady"><a href="#9-domReady" class="headerlink" title="9. domReady"></a>9. domReady</h2><ul>
<li>DOMContentLoaded 当DOM加载完成时触发(在页面前) <strong>DOM事件必须通过事件绑定添加</strong><br>*兼容：高级浏览器</li>
<li>onreadystatechange 模拟domReady</li>
</ul>
<p><strong>兼容写法</strong><br>封装domReady全兼容方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function domReady(fn) &#123;        if (document.addEventListener) &#123;            //高级浏览器</div><div class="line">            document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</div><div class="line">                fn &amp;&amp; fn();</div><div class="line">            &#125;, false);</div><div class="line">        &#125; else &#123;            //低级浏览器  模拟domReady</div><div class="line">            document.onreadystatechange = function() &#123;                if (document.readyState == &apos;complete&apos;) &#123;    // 全兼容</div><div class="line">                    fn &amp;&amp; fn();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="10-事件委托"><a href="#10-事件委托" class="headerlink" title="10. 事件委托"></a>10. 事件委托</h2><p>概念：子级自己的事件可以委托给父级处理</p>
<p>好处： (1)提高性能  <strong>(2)可以给未来的子元素添加事件</strong></p>
<h2 id="11-事件源"><a href="#11-事件源" class="headerlink" title="11. 事件源"></a>11. 事件源</h2><ul>
<li>oEvent.target<br>*兼容：高级浏览器<br>低级浏览器 -&gt; undefined</li>
<li>oEvent.srcElement<br>*兼容：Chrome、IE系<br>FF -&gt; undefined</li>
</ul>
<p><strong>兼容写法</strong><br>var oSrc = oEvent.srcElement || oEvent.target;</p>
<blockquote>
<p>注意：oSrc.tagName获取到的标签名都是大写</p>
</blockquote>
<h3 id="给子级循环添加事件-闭包的替代写法-gt-委托"><a href="#给子级循环添加事件-闭包的替代写法-gt-委托" class="headerlink" title="给子级循环添加事件 闭包的替代写法 -&gt; 委托"></a>给子级循环添加事件 闭包的替代写法 -&gt; 委托</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">window.onload=function()&#123;</div><div class="line">       var ul=document.getElementById(&quot;number&quot;);</div><div class="line">       var li=ul.getElementsByTagName(&quot;li&quot;);</div><div class="line">       var but=document.getElementById(&quot;add&quot;);</div><div class="line"></div><div class="line">       but.onclick=function()&#123;</div><div class="line">       	var li =document.createElement(&quot;li&quot;);</div><div class="line">       	li.innerHTML=&quot;hello&quot;;</div><div class="line">       	ul.appendChild(li)</div><div class="line">       &#125;</div><div class="line">       ul.onmouseover=function(ev)&#123;</div><div class="line">           var ev=ev||window.event;</div><div class="line">           var target=ev.target||ev.srcElement;</div><div class="line">           if(target.nodeName.toLowerCase()==&quot;li&quot;)&#123;</div><div class="line">               target.style.background=&quot;red&quot;;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       ul.onmouseout=function(ev)&#123;</div><div class="line">           var ev=ev||window.event;</div><div class="line">           var target=ev.target||ev.srcElement;</div><div class="line">           if(target.nodeName.toLowerCase()==&quot;li&quot;)&#123;</div><div class="line">               target.style.background=&quot;white&quot;;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line">       ul.onclick=function(ev)&#123;</div><div class="line">           var ev = event||window.event;</div><div class="line">           var target=ev.target||ev.srcElement  //获取事件源</div><div class="line">           if(target.nodeName==&quot;LI&quot; )&#123;</div><div class="line">               target.style.background=&quot;pink&quot;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       </div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-事件对象&quot;&gt;&lt;a href=&quot;#1-事件对象&quot; class=&quot;headerlink&quot; title=&quot;1. 事件对象&quot;&gt;&lt;/a&gt;1. 事件对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;event  事件对象(系统自带)&lt;br&gt;*兼容：Chrome IE系&lt;br&gt;FF -&amp;gt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：offset系类与style系类</title>
    <link href="http://yoursite.com/2015/07/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9Aoffset%E4%B8%8Estyle%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2015/07/17/前端知识点/前端知识点：offset与style系列/</id>
    <published>2015-07-17T11:39:15.000Z</published>
    <updated>2017-03-31T11:02:28.610Z</updated>
    
    <content type="html"><![CDATA[<p>#offset系类与style系类区分<br>首先offset系类，offset有left、top、width、height、四个值即offsetLeft,offsetTop,offsetHeight,offsetWidth</p>
<p><img src="/images/offset/1.png" alt="img"><br><img src="/images/offset/2.png" alt="img">   </p>
<p>offset系类与style系类区别就是:1 style系类只能获取行内的样式，如果样式没写，或写到了别处则无法获取。2 offset系类只读，style系类能读也能设置。3 offset系类值是数值，style系类值是字符串，需加+“px”。4 如果没有加定位，style可能获取的值可能是无效的。5 两者最大的区别在于offsetLeft以border左上角为基准，而styleLeft以margin左上角为基准。（如下图）</p>
<p><img src="/images/offset/3.png" alt="img"> </p>
<p>offsetParent:返回该对象距离最近的带有定位的父级，如果当前的父级元素都没有设置定位，offsetParent为body,如果当前父级元素设置了定位，offsetParent为那个父级元素。<br><strong>scroll系类：</strong>主要分为scrollTop,scrollLeft,scrollWidth,scrollHeight四个。</p>
<p><img src="/images/offset/4.png" alt="img"><br><strong>client系类：</strong>clientLeft和clientTop没用，他们就是borderTop和borderLeft。clientWidth和clientHeight：可视区域的宽度和高度不包括边框。</p>
<p><img src="/images/offset/5.png" alt="img">  <img src="/images/offset/6.png" alt="img"> </p>
<p>事件对象<br><img src="/images/offset/7.png" alt="img"> </p>
<p> 其中三个重要的坐标：</p>
<p><img src="/images/offset/8.png" alt="img"><br><img src="/images/offset/9.png" alt="img"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#offset系类与style系类区分&lt;br&gt;首先offset系类，offset有left、top、width、height、四个值即offsetLeft,offsetTop,offsetHeight,offsetWidth&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：各种宽高距离篇</title>
    <link href="http://yoursite.com/2015/07/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%90%84%E7%A7%8D%E5%AE%BD%E9%AB%98%E8%B7%9D%E7%A6%BB%E7%AF%87/"/>
    <id>http://yoursite.com/2015/07/15/前端知识点/前端知识点：各种宽高距离篇/</id>
    <published>2015-07-15T08:32:15.000Z</published>
    <updated>2017-03-31T12:43:28.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-滚动距离"><a href="#1-滚动距离" class="headerlink" title="1. 滚动距离"></a>1. 滚动距离</h2><p><strong>html简写：document.documentElement</strong></p>
<ul>
<li>document.body.scrollTop<br> 兼容：Chrome<br> 其他 -&gt; 0</li>
<li>document.documentElement.scrollTop<br> 兼容：IE、FF<br> 其他 -&gt; 0</li>
</ul>
<a id="more"></a>
<p><strong>兼容写法</strong><br>纵向：var scrollT = document.documentElement.scrollTop || document.body.scrollTop;<br>横向：var scrollL = document.documentElement.scrollLeft || document.body.scrollLeft;</p>
<h2 id="2-滚动高度"><a href="#2-滚动高度" class="headerlink" title="2. 滚动高度"></a>2. 滚动高度</h2><p>obj.scrollHeight</p>
<ul>
<li>内容高度 &gt; 盒模型高度    取内容高度</li>
<li>盒模型高度 &gt; 内容高度    去盒模型高度</li>
</ul>
<h2 id="3-可视区高度"><a href="#3-可视区高度" class="headerlink" title="3. 可视区高度"></a>3. 可视区高度</h2><ul>
<li>可视区高度：var clientH = document.documentElement.clientHeight;</li>
<li>可视区宽度：var clientW = document.documentElement.clientWidth;</li>
</ul>
<p>兼容：全兼容</p>
<h2 id="4-物体高度"><a href="#4-物体高度" class="headerlink" title="4. 物体高度"></a>4. 物体高度</h2><p><strong>获取的是盒模型大小 = width/height + padding + border;</strong></p>
<ul>
<li>物体的高度：var oH = obj.offsetHeight;</li>
<li>物体的宽度：var oW = obj.offsetWidth;</li>
</ul>
<blockquote>
<p>注意：offsetWidth/height只有append进body后才有，创建时获取不到盒模型的大小。</p>
</blockquote>
<h2 id="5-offsetHeight-amp-amp-getStyle"><a href="#5-offsetHeight-amp-amp-getStyle" class="headerlink" title="5. offsetHeight &amp;&amp; getStyle()"></a>5. offsetHeight &amp;&amp; getStyle()</h2><table>
<thead>
<tr>
<th></th>
<th>offsetHeight</th>
<th>getStyle()</th>
</tr>
</thead>
<tbody>
<tr>
<td>返回值</td>
<td>数字</td>
<td>字符串</td>
</tr>
<tr>
<td>获取值</td>
<td>获取的是盒模型的大小(width/height+padding+border)</td>
<td>获取的是纯width/height</td>
</tr>
<tr>
<td>display:none后</td>
<td>0</td>
<td>仍可以获取</td>
</tr>
</tbody>
</table>
<h2 id="6-物体的相对距离"><a href="#6-物体的相对距离" class="headerlink" title="6. 物体的相对距离"></a>6. 物体的相对距离</h2><ul>
<li>物体距离定位父级左边距离：var oL = obj.offsetLeft;</li>
<li>物体距离定位父级上边距离：var oT = obj.offsetTop;</li>
</ul>
<h2 id="7-关于父级"><a href="#7-关于父级" class="headerlink" title="7. 关于父级"></a>7. 关于父级</h2><ul>
<li>结构父级 obj.parentNode    根：document</li>
<li>定位父级 obj.offsetParent  根：body</li>
</ul>
<h2 id="8-封装一个物体距离左边-上边的绝对位置的函数"><a href="#8-封装一个物体距离左边-上边的绝对位置的函数" class="headerlink" title="8. 封装一个物体距离左边/上边的绝对位置的函数"></a>8. 封装一个物体距离左边/上边的绝对位置的函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function getPos(obj) &#123;        var l = 0;    // 距离左边的绝对距离</div><div class="line">        var t = 0;    // 距离上边的绝对距离</div><div class="line">        while(obj) &#123;</div><div class="line">            l += obj.offsetLeft;</div><div class="line">            t += obj.offsetTop;</div><div class="line">            obj = obj.offsetParent;    // 继续查找上一层定位父级</div><div class="line">        &#125;        return &#123;left: l, top: t&#125;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-滚动距离&quot;&gt;&lt;a href=&quot;#1-滚动距离&quot; class=&quot;headerlink&quot; title=&quot;1. 滚动距离&quot;&gt;&lt;/a&gt;1. 滚动距离&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;html简写：document.documentElement&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;document.body.scrollTop&lt;br&gt; 兼容：Chrome&lt;br&gt; 其他 -&amp;gt; 0&lt;/li&gt;
&lt;li&gt;document.documentElement.scrollTop&lt;br&gt; 兼容：IE、FF&lt;br&gt; 其他 -&amp;gt; 0&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：数组应用</title>
    <link href="http://yoursite.com/2015/06/05/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E6%95%B0%E7%BB%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2015/06/05/前端知识点/前端知识点：数组应用/</id>
    <published>2015-06-05T11:37:15.000Z</published>
    <updated>2017-03-31T12:44:26.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-数组翻转方法2"><a href="#1-数组翻转方法2" class="headerlink" title="1. 数组翻转方法2"></a>1. 数组翻转方法2</h3><p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var arr=[1,2,3,4];    var arr2=[];    while(arr.length) &#123;        var num=arr.pop();</div><div class="line">        arr2.push(num);</div><div class="line">    &#125;</div><div class="line">    alert(arr2);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="2-首字母大写"><a href="#2-首字母大写" class="headerlink" title="2. 首字母大写"></a>2. 首字母大写</h3><p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var str = &apos;welcome to china&apos;;    var arr = str.split(&apos; &apos;);    var arr2 = [];    for(var i = 0; i &lt; arr.length; i++) &#123;        var first = arr[i].charAt(0).toUpperCase();        var other = arr[i].substring(1);</div><div class="line">        arr2.push(first + other);</div><div class="line">    &#125;</div><div class="line">    alert(arr2.join(&apos; &apos;));    //正则写法</div><div class="line">    var str2 = str.replace(/\w+/g, function(s) &#123;        return s.charAt(0).toUpperCase().substring();</div><div class="line">    &#125;)</div><div class="line">    alert(str2);&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="3-快速清空数组"><a href="#3-快速清空数组" class="headerlink" title="3.快速清空数组"></a>3.快速清空数组</h3><ol>
<li>length=0;</li>
<li>arr=[];</li>
<li>arr.splice(0,arr.length);</li>
<li>循环pop或shift</li>
</ol>
<h3 id="4-数组排序方法"><a href="#4-数组排序方法" class="headerlink" title="4. 数组排序方法"></a>4. 数组排序方法</h3><p>更多方法见后续排序算法篇</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function findMinIndex(arr, start) &#123;        var iMin = arr[start];        var iMinIndex = start;        for(var i = start + 1; i &lt; arr.length; i++) &#123;            if(iMin &gt; arr[i]) &#123;</div><div class="line">                iMin = arr[i];</div><div class="line">                iMinIndex = i;</div><div class="line">            &#125;</div><div class="line">        &#125;        return iMinIndex;</div><div class="line">    &#125;    for(var i = 0; i &lt; arr.length; i++) &#123;        var iMinIndex = findMinIndex(arr, i);        var temp;</div><div class="line">        temp = arr[iMinIndex];</div><div class="line">        arr[iMinIndex] = arr[i];</div><div class="line">        arr[i] = temp;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="5-数组内查找元素是否存在"><a href="#5-数组内查找元素是否存在" class="headerlink" title="5. 数组内查找元素是否存在"></a>5. 数组内查找元素是否存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function findInArr(item, arr) &#123;        for(var i = 0; i &lt; arr.length; i++) &#123;            if(item == arr[i]) &#123;                return true;</div><div class="line">            &#125; else &#123;                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="6-数组去重的多种方法"><a href="#6-数组去重的多种方法" class="headerlink" title="6. 数组去重的多种方法"></a>6. 数组去重的多种方法</h3><h4 id="1-findInArr"><a href="#1-findInArr" class="headerlink" title="(1)findInArr"></a>(1)findInArr</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;   </div><div class="line">	 var arr=[1,2,3,2,5,5,6,7,8,7,6]</div><div class="line">	 var n=[];</div><div class="line">	 var ok=true;</div><div class="line">	 arr.map((v)=&gt;&#123;</div><div class="line">		n.map((v2)=&gt;&#123;</div><div class="line">	 		if(v2===v)&#123;ok=false&#125;</div><div class="line">	 	&#125;)</div><div class="line">	 	if(ok)&#123;</div><div class="line">	 		n.push(v);</div><div class="line">	 	&#125;</div><div class="line">	 	ok=true;</div><div class="line">	 &#125;)</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="2-json-自动从小到大排序"><a href="#2-json-自动从小到大排序" class="headerlink" title="(2)json(自动从小到大排序)"></a>(2)json(自动从小到大排序)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var json = &#123;&#125;;    var arr2 = [];    for(var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">        json[arr[i]] = &apos;xxx&apos;;</div><div class="line">    &#125;    for(var name in json) &#123;</div><div class="line">        arr2.push(name);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="3-sort"><a href="#3-sort" class="headerlink" title="(3)sort()"></a>(3)sort()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    arr.sort();    for(var i = 0; i &lt; arr.length; i++) &#123;        if(arr[i] == arr[i+1]) &#123;</div><div class="line">            arr.splice(i, 1);</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="4-indexOf"><a href="#4-indexOf" class="headerlink" title="(4) indexOf"></a>(4) indexOf</h4><p>这个方法是在前端公众号偶然看到的，数组的indexOf方法第一次用到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    for(var i = 0; i &lt; arr.length; i++) &#123;        if(arr2.indexOf(arr[i] &lt; 0)) &#123;</div><div class="line">            arr2.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-数组翻转方法2&quot;&gt;&lt;a href=&quot;#1-数组翻转方法2&quot; class=&quot;headerlink&quot; title=&quot;1. 数组翻转方法2&quot;&gt;&lt;/a&gt;1. 数组翻转方法2&lt;/h3&gt;&lt;p&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
