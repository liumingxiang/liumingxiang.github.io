<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-21T04:33:05.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vuex 2.0 源码分析</title>
    <link href="http://yoursite.com/2017/03/20/%E6%A1%86%E6%9E%B6/vue/Vuex%202.0%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/03/20/框架/vue/Vuex 2.0 源码分析/</id>
    <published>2017-03-20T04:24:22.000Z</published>
    <updated>2017-03-21T04:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们用 Vue.js 开发一个中到大型的单页应用时，经常会遇到如下问题：</p>
<ul>
<li>如何让多个 Vue 组件共享状态</li>
<li>Vue 组件间如何通讯</li>
</ul>
<p>通常，在项目不是很复杂的时候，我们会利用全局事件总线 （global event bus）解决，但是随着复杂度的提升，这些代码将变的难以维护。因此，我们需要一种更加好用的解决方案，于是，Vuex 诞生了。</p>
<a id="more"></a>
<p>本文并不是 Vuex 的科普文章，对于还不了解 Vuex 的同学，建议先移步 <a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">Vuex 官方文档</a>；</p>
<p><a href="https://camo.githubusercontent.com/dfd0f78b33acef4969f3274bb4674ccd48c46000/68747470733a2f2f767565782e7675656a732e6f72672f7a682d636e2f696d616765732f767565782e706e67" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/dfd0f78b33acef4969f3274bb4674ccd48c46000/68747470733a2f2f767565782e7675656a732e6f72672f7a682d636e2f696d616765732f767565782e706e67" alt="vuex 原理图"></a></p>
<p>Vuex 的设计思想受到了 Flux，Redux 和 The Elm Architecture 的启发，它的实现又十分巧妙，和 Vue.js 配合相得益彰，下面就让我们一起来看它的实现吧。</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Vuex 的源码托管在 <a href="https://github.com/vuejs/vuex" target="_blank" rel="external">github</a>，我们首先通过 git 把代码 clone 到本地，选一款适合自己的 IDE 打开源码，展开 src 目录，如下图所示：</p>
<p><a href="https://camo.githubusercontent.com/4c0c82eb95a6d128f80355522e266fe5220ca863/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565785f7372632e706e67" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/4c0c82eb95a6d128f80355522e266fe5220ca863/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565785f7372632e706e67" alt="enter image description here"></a></p>
<p>src 目录下的文件并不多，包含几个 js 文件和 plugins 目录， plugins 目录里面包含 2 个 Vuex 的内置插件，整个源码加起来不过 500-600 行，可谓非常轻巧的一个库。</p>
<p>麻雀虽小，五脏俱全，我们先直观的感受一下源码的结构，接下来看一下其中的实现细节。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>本文的源码分析过程不会是自上而下的给代码加注释，我更倾向于是从 Vuex 提供的 API 和我们的使用方法等维度去分析。Vuex 的源码是基于 es6 的语法编写的，对于不了解 es6 的同学，建议还是先学习一下 es6。</p>
<h3 id="从入口开始"><a href="#从入口开始" class="headerlink" title="从入口开始"></a>从入口开始</h3><p>看源码一般是从入口开始，Vuex 源码的入口是 src/index.js，先来打开这个文件。</p>
<p>我们首先看这个库的 export ，在 index.js 代码最后。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  Store,</div><div class="line">  install,</div><div class="line">  mapState,</div><div class="line">  mapMutations,</div><div class="line">  mapGetters,</div><div class="line">  mapActions</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以一目了然地看到 Vuex 对外暴露的 API。其中, Store 是 Vuex 提供的状态存储类，通常我们使用 Vuex 就是通过创建 Store 的实例，稍后我们会详细介绍。接着是 install 方法，这个方法通常是我们编写第三方 Vue 插件的“套路”，先来看一下“套路”代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">_Vue</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (Vue) &#123;</div><div class="line">    <span class="built_in">console</span>.error(</div><div class="line">      <span class="string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></div><div class="line">    )</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  Vue = _Vue</div><div class="line">  applyMixin(Vue)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// auto install in dist mode</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</div><div class="line">  install(<span class="built_in">window</span>.Vue)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们实现了一个 install 方法，这个方法当我们全局引用 Vue ，也就是 window 上有 Vue 对象的时候，会手动调用 install 方法，并传入 Vue 的引用；当 Vue 通过 npm 安装到项目中的时候，我们在代码中引入第三方 Vue 插件通常会编写如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line">...</div><div class="line">Vue.use(Vuex)</div></pre></td></tr></table></figure>
<p>当我们执行 Vue.use(Vuex) 这句代码的时候，实际上就是调用了 install 的方法并传入 Vue 的引用。install 方法顾名思义，现在让我们来看看它的实现。它接受了一个参数 _Vue，函数体首先判断 Vue ，这个变量的定义在 index.js 文件的开头部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Vue <span class="comment">// bind on install</span></div></pre></td></tr></table></figure>
<p>对 Vue 的判断主要是保证 install 方法只执行一次，这里把 install 方法的参数 _Vue 对象赋值给 Vue 变量，这样我们就可以在 index.js 文件的其它地方使用 Vue 这个变量了。install 方法的最后调用了 applyMixin 方法，我们顺便来看一下这个方法的实现，在 src/mixin.js 文件里定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</div><div class="line">    <span class="keyword">const</span> usesInit = Vue.config._lifecycleHooks.indexOf(<span class="string">'init'</span>) &gt; <span class="number">-1</span></div><div class="line">    Vue.mixin(usesInit ? &#123; <span class="attr">init</span>: vuexInit &#125; : &#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// override init and inject vuex init procedure</span></div><div class="line">    <span class="comment">// for 1.x backwards compatibility.</span></div><div class="line">    <span class="keyword">const</span> _init = Vue.prototype._init</div><div class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</div><div class="line">      options.init = options.init</div><div class="line">        ? [vuexInit].concat(options.init)</div><div class="line">        : vuexInit</div><div class="line">      _init.call(<span class="keyword">this</span>, options)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Vuex init hook, injected into each instances init hooks list.</div><div class="line">   */</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</div><div class="line">    <span class="comment">// store injection</span></div><div class="line">    <span class="keyword">if</span> (options.store) &#123;</div><div class="line">      <span class="keyword">this</span>.$store = options.store</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</div><div class="line">      <span class="keyword">this</span>.$store = options.parent.$store</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的作用就是在 Vue 的生命周期中的初始化（1.0 版本是 init，2.0 版本是 beforeCreated）钩子前插入一段 Vuex 初始化代码。这里做的事情很简单——给 Vue 的实例注入一个 <code>$store</code> 的属性，这也就是为什么我们在 Vue 的组件中可以通过 <code>this.$store.xxx</code> 访问到 Vuex 的各种数据和状态。</p>
<h3 id="认识-Store-构造函数"><a href="#认识-Store-构造函数" class="headerlink" title="认识 Store 构造函数"></a>认识 Store 构造函数</h3><p>我们在使用 Vuex 的时候，通常会实例化 Store 类，然后传入一个对象，包括我们定义好的 actions、getters、mutations、state等，甚至当我们有多个子模块的时候，我们可以添加一个 modules 对象。那么实例化的时候，到底做了哪些事情呢？带着这个疑问，让我们回到 index.js 文件，重点看一下 Store 类的定义。Store 类定义的代码略长，我不会一下就贴上所有代码，我们来拆解分析它，首先看一下构造函数的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (options = &#123;&#125;) &#123;</div><div class="line">    assert(Vue, <span class="string">`must call Vue.use(Vuex) before creating a store instance.`</span>)</div><div class="line">    assert(<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>, <span class="string">`vuex requires a Promise polyfill in this browser.`</span>)</div><div class="line"></div><div class="line">    <span class="keyword">const</span> &#123;</div><div class="line">      state = &#123;&#125;,</div><div class="line">      plugins = [],</div><div class="line">      strict = <span class="literal">false</span></div><div class="line">    &#125; = options</div><div class="line"></div><div class="line">    <span class="comment">// store internal state</span></div><div class="line">    <span class="keyword">this</span>._options = options</div><div class="line">    <span class="keyword">this</span>._committing = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="keyword">this</span>._runtimeModules = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="keyword">this</span>._subscribers = []</div><div class="line">    <span class="keyword">this</span>._watcherVM = <span class="keyword">new</span> Vue()</div><div class="line"></div><div class="line">    <span class="comment">// bind commit and dispatch to self</span></div><div class="line">    <span class="keyword">const</span> store = <span class="keyword">this</span></div><div class="line">    <span class="keyword">const</span> &#123; dispatch, commit &#125; = <span class="keyword">this</span></div><div class="line">    <span class="keyword">this</span>.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">boundDispatch</span> (<span class="params">type, payload</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> dispatch.call(store, type, payload)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.commit = <span class="function"><span class="keyword">function</span> <span class="title">boundCommit</span> (<span class="params">type, payload, options</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> commit.call(store, type, payload, options)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// strict mode</span></div><div class="line">    <span class="keyword">this</span>.strict = strict</div><div class="line"></div><div class="line">    <span class="comment">// init root module.</span></div><div class="line">    <span class="comment">// this also recursively registers all sub-modules</span></div><div class="line">    <span class="comment">// and collects all module getters inside this._wrappedGetters</span></div><div class="line">    installModule(<span class="keyword">this</span>, state, [], options)</div><div class="line"></div><div class="line">    <span class="comment">// initialize the store vm, which is responsible for the reactivity</span></div><div class="line">    <span class="comment">// (also registers _wrappedGetters as computed properties)</span></div><div class="line">    resetStoreVM(<span class="keyword">this</span>, state)</div><div class="line"></div><div class="line">    <span class="comment">// apply plugins</span></div><div class="line">    plugins.concat(devtoolPlugin).forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> plugin(<span class="keyword">this</span>))</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数的一开始就用了“断言函数”，来判断是否满足一些条件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">assert(Vue, <span class="string">`must call Vue.use(Vuex) before creating a store instance.`</span>)</div></pre></td></tr></table></figure>
<p>这行代码的目的是确保 Vue 的存在，也就是在我们实例化 Store 之前，必须要保证之前的 install 方法已经执行了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">assert(<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>, <span class="string">`vuex requires a Promise polyfill in this browser.`</span>)</div></pre></td></tr></table></figure>
<p>这行代码的目的是为了确保 Promsie 可以使用的，因为 Vuex 的源码是依赖 Promise 的。Promise 是 es6 提供新的 API，由于现在的浏览器并不是都支持 es6 语法的，所以通常我们会用 babel 编译我们的代码，如果想使用 Promise 这个 特性，我们需要在 package.json 中添加对 babel-polyfill 的依赖并在代码的入口加上 <code>import &#39;babel-polyfill&#39;</code> 这段代码。</p>
<p>再来看看 assert 这个函数，它并不是浏览器原生支持的，它的实现在 src/util.js 里，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">assert</span> (<span class="params">condition, msg</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!condition) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`[vuex] <span class="subst">$&#123;msg&#125;</span>`</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单，对 condition 判断，如果不不为真，则抛出异常。这个函数虽然简单，但这种编程方式值得我们学习。</p>
<p>再来看构造函数接下来的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  state = &#123;&#125;,</div><div class="line">  plugins = [],</div><div class="line">  strict = <span class="literal">false</span></div><div class="line">&#125; = options</div></pre></td></tr></table></figure>
<p>这里就是利用 es6 的结构赋值拿到 options 里的 state，plugins 和 strict。state 表示 rootState，plugins 表示应用的插件、strict 表示是否开启严格模式。</p>
<p>接着往下看：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// store internal state</span></div><div class="line"><span class="keyword">this</span>._options = options</div><div class="line"><span class="keyword">this</span>._committing = <span class="literal">false</span></div><div class="line"><span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line"><span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line"><span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line"><span class="keyword">this</span>._runtimeModules = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line"><span class="keyword">this</span>._subscribers = []</div><div class="line"><span class="keyword">this</span>._watcherVM = <span class="keyword">new</span> Vue()</div></pre></td></tr></table></figure>
<p>这里主要是创建一些内部的属性：<br><code>this._options</code> 存储参数 options。<br><code>this._committing</code> 标志一个提交状态，作用是保证对 Vuex 中 state 的修改只能在 mutation 的回调函数中，而不能在外部随意修改 state。<br><code>this._actions</code> 用来存储用户定义的所有的 actions。<br><code>this._mutations</code> 用来存储用户定义所有的 mutatins。<br><code>this._wrappedGetters</code> 用来存储用户定义的所有 getters 。<br><code>this._runtimeModules</code> 用来存储所有的运行时的 modules。<br><code>this._subscribers</code> 用来存储所有对 mutation 变化的订阅者。<br><code>this._watcherVM</code> 是一个 Vue 对象的实例，主要是利用 Vue 实例方法 $watch 来观测变化的。</p>
<p>继续往下看：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bind commit and dispatch to self</span></div><div class="line"><span class="keyword">const</span> store = <span class="keyword">this</span></div><div class="line"><span class="keyword">const</span> &#123; dispatch, commit &#125; = <span class="keyword">this</span></div><div class="line"><span class="keyword">this</span>.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">boundDispatch</span> (<span class="params">type, payload</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> dispatch.call(store, type, payload)</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.commit = <span class="function"><span class="keyword">function</span> <span class="title">boundCommit</span> (<span class="params">type, payload, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> commit.call(store, type, payload, options)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// strict mode</span></div><div class="line"><span class="keyword">this</span>.strict = strict</div></pre></td></tr></table></figure>
<p>这里的代码也不难理解，把 Store 类的 dispatch 和 commit 的方法的 this 指针指向当前 store 的实例上，dispatch 和 commit 的实现我们稍后会分析。this.strict 表示是否开启严格模式，在严格模式下会观测所有的 state 的变化，建议在开发环境时开启严格模式，线上环境要关闭严格模式，否则会有一定的性能开销。</p>
<h3 id="Vuex-的初始化核心"><a href="#Vuex-的初始化核心" class="headerlink" title="Vuex 的初始化核心"></a>Vuex 的初始化核心</h3><h4 id="installModule"><a href="#installModule" class="headerlink" title="installModule"></a>installModule</h4><p>我们接着往下看：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// init root module.</span></div><div class="line"><span class="comment">// this also recursively registers all sub-modules</span></div><div class="line"><span class="comment">// and collects all module getters inside this._wrappedGetters</span></div><div class="line">installModule(<span class="keyword">this</span>, state, [], options)</div><div class="line"></div><div class="line"><span class="comment">// initialize the store vm, which is responsible for the reactivity</span></div><div class="line"><span class="comment">// (also registers _wrappedGetters as computed properties)</span></div><div class="line">resetStoreVM(<span class="keyword">this</span>, state)</div><div class="line"></div><div class="line"><span class="comment">// apply plugins</span></div><div class="line">plugins.concat(devtoolPlugin).forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> plugin(<span class="keyword">this</span>))</div></pre></td></tr></table></figure>
<p>这段代码是 Vuex 的初始化的核心，其中，installModule 方法是把我们通过 options 传入的各种属性模块注册和安装；resetStoreVM 方法是初始化 store._vm，观测 state 和 getters 的变化；最后是应用传入的插件。</p>
<p>下面，我们先来看一下 installModule 的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span> (<span class="params">store, rootState, path, module, hot</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> isRoot = !path.length</div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    state,</div><div class="line">    actions,</div><div class="line">    mutations,</div><div class="line">    getters,</div><div class="line">    modules</div><div class="line">  &#125; = <span class="built_in">module</span></div><div class="line"></div><div class="line">  <span class="comment">// set state</span></div><div class="line">  <span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class="line">    <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</div><div class="line">    <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</div><div class="line">    store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (mutations) &#123;</div><div class="line">    <span class="built_in">Object</span>.keys(mutations).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">      registerMutation(store, key, mutations[key], path)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (actions) &#123;</div><div class="line">    <span class="built_in">Object</span>.keys(actions).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">      registerAction(store, key, actions[key], path)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (getters) &#123;</div><div class="line">    wrapGetters(store, getters, path)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (modules) &#123;</div><div class="line">    <span class="built_in">Object</span>.keys(modules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">      installModule(store, rootState, path.concat(key), modules[key], hot)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>installModule 函数可接收5个参数，store、rootState、path、module、hot，store 表示当前 Store 实例，rootState 表示根 state，path 表示当前嵌套模块的路径数组，module 表示当前安装的模块，hot 当动态改变 modules 或者热更新的时候为 true。</p>
<p>先来看这部分代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> isRoot = !path.length</div><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  state,</div><div class="line">  actions,</div><div class="line">  mutations,</div><div class="line">  getters,</div><div class="line">  modules</div><div class="line">&#125; = <span class="built_in">module</span></div></pre></td></tr></table></figure>
<p>代码首先通过 path 数组的长度判断是否为根。我们在构造函数调用的时候是 <code>installModule(this, state, [], options)</code>，所以这里 isRoot 为 true。module 为传入的 options，我们拿到了 module 下的 state、actions、mutations、getters 以及嵌套的 modules。</p>
<p>接着看下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// set state</span></div><div class="line"><span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class="line">  <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</div><div class="line">  <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</div><div class="line">  store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里判断当不为根且非热更新的情况，然后设置级联状态，这里乍一看不好理解，我们先放一放，稍后来回顾。</p>
<p>再往下看代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mutations) &#123;</div><div class="line">  <span class="built_in">Object</span>.keys(mutations).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">    registerMutation(store, key, mutations[key], path)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (actions) &#123;</div><div class="line">  <span class="built_in">Object</span>.keys(actions).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">    registerAction(store, key, actions[key], path)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (getters) &#123;</div><div class="line">  wrapGetters(store, getters, path)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里分别是对 mutations、actions、getters 进行注册，如果我们实例化 Store 的时候通过 options 传入这些对象，那么会分别进行注册，我稍后再去介绍注册的具体实现。那么到这，如果 Vuex 没有 module ，这个 installModule 方法可以说已经做完了。但是 Vuex 巧妙了设计了 module 这个概念，因为 Vuex 本身是单一状态树，应用的所有状态都包含在一个大对象内，随着我们应用规模的不断增长，这个 Store 变得非常臃肿。为了解决这个问题，Vuex 允许我们把 store 分 module（模块）。每一个模块包含各自的 state、mutations、actions 和 getters，甚至是嵌套模块。所以，接下来还有一行代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (modules) &#123;</div><div class="line">  <span class="built_in">Object</span>.keys(modules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">    installModule(store, rootState, path.concat(key), modules[key], hot)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过遍历 modules，递归调用 installModule 去安装子模块。这里传入了 store、rootState、path.concat(key)、和 modules[key]，和刚才不同的是，path 不为空，module 对应为子模块，那么我们回到刚才那段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// set state</span></div><div class="line"><span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class="line">  <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</div><div class="line">  <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</div><div class="line">  store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当递归初始化子模块的时候，isRoot 为 false，注意这里有个方法<code>getNestedState(rootState, path)</code>，来看一下 getNestedState 函数的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNestedState</span> (<span class="params">state, path</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> path.length</div><div class="line">    ? path.reduce(<span class="function">(<span class="params">state, key</span>) =&gt;</span> state[key], state)</div><div class="line">    : state</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法很简单，就是根据 path 查找 state 上的嵌套 state。在这里就是传入 rootState 和 path，计算出当前模块的父模块的 state，由于模块的 path 是根据模块的名称 concat 连接的，所以 path 的最后一个元素就是当前模块的模块名，最后调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>把当前模块的 state 添加到 parentState 中。<br>这里注意一下我们用了 store._withCommit 方法，来看一下这个方法的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_withCommit (fn) &#123;</div><div class="line">  <span class="keyword">const</span> committing = <span class="keyword">this</span>._committing</div><div class="line">  <span class="keyword">this</span>._committing = <span class="literal">true</span></div><div class="line">  fn()</div><div class="line">  <span class="keyword">this</span>._committing = committing</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们是在修改 state，Vuex 中所有对 state 的修改都会用 <code>_withCommit</code>函数包装，保证在同步修改 state 的过程中 <code>this._committing</code> 的值始终为true。这样当我们观测 state 的变化时，如果 this._committing 的值不为 true，则能检查到这个状态修改是有问题的。</p>
<p>看到这里，有些同学可能会有点困惑，举个例子来直观感受一下，以 Vuex 源码中的 example/shopping-cart 为例，打开 store/index.js，有这么一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  actions,</div><div class="line">  getters,</div><div class="line">  <span class="attr">modules</span>: &#123;</div><div class="line">    cart,</div><div class="line">    products</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">strict</span>: debug,</div><div class="line">  <span class="attr">plugins</span>: debug ? [createLogger()] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里有两个子 module，cart 和 products，我们打开 store/modules/cart.js，看一下 cart 模块中的 state 定义，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">added</span>: [],</div><div class="line">  <span class="attr">checkoutStatus</span>: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们运行这个项目，打开浏览器，利用 Vue 的调试工具来看一下 Vuex 中的状态，如下图所示：</p>
<p><a href="https://camo.githubusercontent.com/2bd2ed9ea9f74792db15c5980666275330ab64a2/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565782d746573742e706e67" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/2bd2ed9ea9f74792db15c5980666275330ab64a2/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565782d746573742e706e67" alt="enter image description here"></a></p>
<p>可以看到，在 rootState 下，分别有 cart 和 products 2个属性，key 根据模块名称而来，value 就是在每个模块文件中定义的 state，这就把模块 state 挂载到 rootState 上了。</p>
<p>我们了解完嵌套模块 state 是怎么一回事后，我们回过头来看一下 installModule 过程中的其它 3 个重要方法：registerMutation、registerAction 和 wrapGetters。顾名思义，这 3 个方法分别处理 mutations、actions 和 getters。我们先来看一下 registerMutation 的定义：</p>
<h4 id="registerMutation"><a href="#registerMutation" class="headerlink" title="registerMutation"></a>registerMutation</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMutation</span> (<span class="params">store, type, handler, path = []</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</div><div class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedMutationHandler</span> (<span class="params">payload</span>) </span>&#123;</div><div class="line">    handler(getNestedState(store.state, path), payload)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>registerMutation 是对 store 的 mutation 的初始化，它接受 4 个参数，store为当前 Store 实例，type为 mutation 的 key，handler 为 mutation 执行的回调函数，path 为当前模块的路径。mutation 的作用就是同步修改当前模块的 state ，函数首先通过 type 拿到对应的 mutation 对象数组， 然后把一个 mutation 的包装函数 push 到这个数组中，这个函数接收一个参数 payload，这个就是我们在定义 mutation 的时候接收的额外参数。这个函数执行的时候会调用 mutation 的回调函数，并通过 getNestedState(store.state, path) 方法得到当前模块的 state，和 playload 一起作为回调函数的参数。举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">mutations: &#123;</div><div class="line">  increment (state, n) &#123;</div><div class="line">    state.count += n</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们定义了一个 mutation，通过刚才的 registerMutation 方法，我们注册了这个 mutation，这里的 state 对应的就是当前模块的 state，n 就是额外参数 payload，接下来我们会从源码分析的角度来介绍这个 mutation 的回调是何时被调用的，参数是如何传递的。</p>
<p>我们有必要知道 mutation 的回调函数的调用时机，在 Vuex 中，mutation 的调用是通过 store 实例的 API 接口 commit 来调用的，来看一下 commit 函数的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">commit (type, payload, options) &#123;</div><div class="line">  <span class="comment">// check object-style commit</span></div><div class="line">  <span class="keyword">if</span> (isObject(type) &amp;&amp; type.type) &#123;</div><div class="line">    options = payload</div><div class="line">    payload = type</div><div class="line">    type = type.type</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> mutation = &#123; type, payload &#125;</div><div class="line">  <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</div><div class="line">  <span class="keyword">if</span> (!entry) &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown mutation type: <span class="subst">$&#123;type&#125;</span>`</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    entry.forEach(<span class="function"><span class="keyword">function</span> <span class="title">commitIterator</span> (<span class="params">handler</span>) </span>&#123;</div><div class="line">      handler(payload)</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">if</span> (!options || !options.silent) &#123;</div><div class="line">    <span class="keyword">this</span>._subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub(mutation, <span class="keyword">this</span>.state))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>commit 支持 3 个参数，type 表示 mutation 的类型，payload 表示额外的参数，options 表示一些配置，比如 silent 等，稍后会用到。commit 函数首先对 type 的类型做了判断，处理了 type 为 object 的情况，接着根据 type 去查找对应的 mutation，如果找不到，则输出一条错误信息，否则遍历这个 type 对应的 mutation 对象数组，执行 handler(payload) 方法，这个方法就是之前定义的 wrappedMutationHandler(handler)，执行它就相当于执行了 registerMutation 注册的回调函数，并把当前模块的 state 和 额外参数 payload 作为参数传入。注意这里我们依然使用了 <code>this._withCommit</code> 的方法提交 mutation。commit 函数的最后，判断如果不是静默模式，则遍历 <code>this._subscribers</code>，调用回调函数，并把 mutation 和当前的根 state 作为参数传入。那么这个 <code>this._subscribers</code> 是什么呢？原来 Vuex 的 Store 实例提供了 subscribe API 接口，它的作用是订阅（注册监听） store 的 mutation。先来看一下它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">subscribe (fn) &#123;</div><div class="line">  <span class="keyword">const</span> subs = <span class="keyword">this</span>._subscribers</div><div class="line">  <span class="keyword">if</span> (subs.indexOf(fn) &lt; <span class="number">0</span>) &#123;</div><div class="line">    subs.push(fn)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> i = subs.indexOf(fn)</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">-1</span>) &#123;</div><div class="line">      subs.splice(i, <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>subscribe 方法很简单，他接受的参数是一个回调函数，会把这个回调函数保存到 <code>this._subscribers</code> 上，并返回一个函数，当我们调用这个返回的函数，就可以解除当前函数对 store 的 mutation 的监听。其实，Vuex 的内置 logger 插件就是基于 subscribe 接口实现对 store 的 muation的监听，稍后我们会详细介绍这个插件。</p>
<h4 id="registerAction"><a href="#registerAction" class="headerlink" title="registerAction"></a>registerAction</h4><p>在了解完 registerMutation，我们再来看一下 registerAction 的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerAction</span> (<span class="params">store, type, handler, path = []</span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> entry = store._actions[type] || (store._actions[type] = [])</div><div class="line">  <span class="keyword">const</span> &#123; dispatch, commit &#125; = store</div><div class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedActionHandler</span> (<span class="params">payload, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> res = handler(&#123;</div><div class="line">      dispatch,</div><div class="line">      commit,</div><div class="line">      <span class="attr">getters</span>: store.getters,</div><div class="line">      <span class="attr">state</span>: getNestedState(store.state, path),</div><div class="line">      <span class="attr">rootState</span>: store.state</div><div class="line">    &#125;, payload, cb)</div><div class="line">    <span class="keyword">if</span> (!isPromise(res)) &#123;</div><div class="line">      res = <span class="built_in">Promise</span>.resolve(res)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (store._devtoolHook) &#123;</div><div class="line">      <span class="keyword">return</span> res.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        store._devtoolHook.emit(<span class="string">'vuex:error'</span>, err)</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">      &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> res</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>registerAction 是对 store 的 action 的初始化，它和 registerMutation 的参数一致，和 mutation 不同一点，mutation 是同步修改当前模块的 state，而 action 是可以异步去修改 state，这里不要误会，在 action 的回调中并不会直接修改 state ，仍然是通过提交一个 mutation 去修改 state（在 Vuex 中，mutation 是修改 state 的唯一途径）。那我们就来看看 action 是如何做到这一点的。</p>
<p>函数首先也是通过 type 拿到对应 action 的对象数组，然后把一个 action 的包装函数 push 到这个数组中，这个函数接收 2 个参数，payload 表示额外参数 ，cb 表示回调函数（实际上我们并没有使用它）。这个函数执行的时候会调用 action 的回调函数，传入一个 context 对象，这个对象包括了 store 的 commit 和 dispatch 方法、getter、当前模块的 state 和 rootState 等等。接着对这个函数的返回值做判断，如果不是一个 Promise 对象，则调用 <code>Promise.resolve（res）</code> 给res 包装成了一个 Promise 对象。这里也就解释了为何 Vuex 的源码依赖 Promise，这里对 Promise 的判断也和简单，参考代码 src/util.js，对 isPromise 的判断如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPromise</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val &amp;&amp; <span class="keyword">typeof</span> val.then === <span class="string">'function'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是简单的检查对象的 then 方法，如果包含说明就是一个 Promise 对象。</p>
<p>接着判断 <code>store._devtoolHook</code>，这个只有当用到 Vuex devtools 开启的时候，我们才能捕获 promise 的过程中的 。 action 的包装函数最后返回 res ，它就是一个地地道道的 Promise 对象。来看个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  checkout (&#123; commit, state &#125;, payload) &#123;</div><div class="line">    <span class="comment">// 把当前购物车的商品备份起来</span></div><div class="line">    <span class="keyword">const</span> savedCartItems = [...state.cart.added]</div><div class="line">    <span class="comment">// 发送结帐请求，并愉快地清空购物车</span></div><div class="line">    commit(types.CHECKOUT_REQUEST)</div><div class="line">    <span class="comment">// 购物 API 接收一个成功回调和一个失败回调</span></div><div class="line">    shop.buyProducts(</div><div class="line">      products,</div><div class="line">      <span class="comment">// 成功操作</span></div><div class="line">      () =&gt; commit(types.CHECKOUT_SUCCESS),</div><div class="line">      <span class="comment">// 失败操作</span></div><div class="line">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们定义了一个 action，通过刚才的 registerAction 方法，我们注册了这个 action，这里的 commit 就是 store 的 API 接口，可以通过它在 action 里提交一个 mutation。state 对应的就是当前模块的 state，我们在这个 action 里即可以同步提交 mutation，也可以异步提交。接下来我们会从源码分析的角度来介绍这个 action 的回调是何时被调用的，参数是如何传递的。</p>
<p>我们有必要知道 action 的回调函数的调用时机，在 Vuex 中，action 的调用是通过 store 实例的 API 接口 dispatch 来调用的，来看一下 dispatch 函数的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dispatch (type, payload) &#123;</div><div class="line"> <span class="comment">// check object-style dispatch</span></div><div class="line">  <span class="keyword">if</span> (isObject(type) &amp;&amp; type.type) &#123;</div><div class="line">    payload = type</div><div class="line">    type = type.type</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</div><div class="line">  <span class="keyword">if</span> (!entry) &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown action type: <span class="subst">$&#123;type&#125;</span>`</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> entry.length &gt; <span class="number">1</span></div><div class="line">    ? <span class="built_in">Promise</span>.all(entry.map(<span class="function"><span class="params">handler</span> =&gt;</span> handler(payload)))</div><div class="line">    : entry[<span class="number">0</span>](payload)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dispatch 支持2个参数，type 表示 action 的类型，payload 表示额外的参数。前面几行代码和 commit 接口非常类似，都是找到对应 type 下的 action 对象数组，唯一和 commit 不同的地方是最后部分，它对 action 的对象数组长度做判断，如果长度为 1 则直接调用 <code>entry[0](payload)</code>， 这个方法就是之前定义的 wrappedActionHandler(payload, cb)，执行它就相当于执行了 registerAction 注册的回调函数，并把当前模块的 context 和 额外参数 payload 作为参数传入。所以我们在 action 的回调函数里，可以拿到当前模块的上下文包括 store 的 commit 和 dispatch 方法、getter、当前模块的 state 和 rootState，可见 action 是非常灵活的。</p>
<h4 id="wrapGetters"><a href="#wrapGetters" class="headerlink" title="wrapGetters"></a>wrapGetters</h4><p>了解完 registerAction 后，我们来看看 wrapGetters的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapGetters</span> (<span class="params">store, moduleGetters, modulePath</span>) </span>&#123;</div><div class="line">  <span class="built_in">Object</span>.keys(moduleGetters).forEach(<span class="function"><span class="params">getterKey</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> rawGetter = moduleGetters[getterKey]</div><div class="line">    <span class="keyword">if</span> (store._wrappedGetters[getterKey]) &#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">`[vuex] duplicate getter key: <span class="subst">$&#123;getterKey&#125;</span>`</span>)</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    store._wrappedGetters[getterKey] = <span class="function"><span class="keyword">function</span> <span class="title">wrappedGetter</span> (<span class="params">store</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> rawGetter(</div><div class="line">        getNestedState(store.state, modulePath), <span class="comment">// local state</span></div><div class="line">        store.getters, <span class="comment">// getters</span></div><div class="line">        store.state <span class="comment">// root state</span></div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>wrapGetters 是对 store 的 getters 初始化，它接受 3个 参数， store 表示当前 Store 实例，moduleGetters 表示当前模块下的所有 getters, modulePath 对应模块的路径。细心的同学会发现，和刚才的 registerMutation 以及 registerAction 不同，这里对 getters 的循环遍历是放在了函数体内，并且 getters 和它们的一个区别是不允许 getter 的 key 有重复。</p>
<p>这个函数做的事情就是遍历 moduleGetters，把每一个 getter 包装成一个方法，添加到 store._wrappedGetters 对象中，注意 getter 的 key 是不允许重复的。在这个包装的方法里，会执行 getter 的回调函数，并把当前模块的 state，store 的 getters 和 store 的 rootState 作为它参数。来看一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> cartProducts = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> state.cart.added.map(<span class="function">(<span class="params">&#123; id, quantity &#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> product = state.products.all.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === id)</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">title</span>: product.title,</div><div class="line">      <span class="attr">price</span>: product.price,</div><div class="line">      quantity</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们定义了一个 getter，通过刚才的 wrapGetters 方法，我们把这个 getter 添加到 <code>store._wrappedGetters</code> 对象里，这和回调函数的参数 state 对应的就是当前模块的 state，接下来我们从源码的角度分析这个函数是如何被调用，参数是如何传递的。</p>
<p>我们有必要知道 getter 的回调函数的调用时机，在 Vuex 中，我们知道当我们在组件中通过 <code>this.$store.getters.xxxgetters</code> 可以访问到对应的 getter 的回调函数，那么我们需要把对应 getter 的包装函数的执行结果绑定到 <code>this.$store</code> 上。这部分的逻辑就在 resetStoreVM 函数里。我们在 Store 的构造函数中，在执行完 installModule 方法后，就会执行 resetStoreVM 方法。来看一下它的定义：</p>
<h4 id="resetStoreVM"><a href="#resetStoreVM" class="headerlink" title="resetStoreVM"></a>resetStoreVM</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStoreVM</span> (<span class="params">store, state</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> oldVm = store._vm</div><div class="line"></div><div class="line">  <span class="comment">// bind store public getters</span></div><div class="line">  store.getters = &#123;&#125;</div><div class="line">  <span class="keyword">const</span> wrappedGetters = store._wrappedGetters</div><div class="line">  <span class="keyword">const</span> computed = &#123;&#125;</div><div class="line">  <span class="built_in">Object</span>.keys(wrappedGetters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> fn = wrappedGetters[key]</div><div class="line">    <span class="comment">// use computed to leverage its lazy-caching mechanism</span></div><div class="line">    computed[key] = <span class="function"><span class="params">()</span> =&gt;</span> fn(store)</div><div class="line">    <span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</div><div class="line">      <span class="attr">get</span>: <span class="function"><span class="params">()</span> =&gt;</span> store._vm[key]</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// use a Vue instance to store the state tree</span></div><div class="line">  <span class="comment">// suppress warnings just in case the user has added</span></div><div class="line">  <span class="comment">// some funky global mixins</span></div><div class="line">  <span class="keyword">const</span> silent = Vue.config.silent</div><div class="line">  Vue.config.silent = <span class="literal">true</span></div><div class="line">  store._vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123; state &#125;,</div><div class="line">    computed</div><div class="line">  &#125;)</div><div class="line">  Vue.config.silent = silent</div><div class="line"></div><div class="line">  <span class="comment">// enable strict mode for new vm</span></div><div class="line">  <span class="keyword">if</span> (store.strict) &#123;</div><div class="line">    enableStrictMode(store)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (oldVm) &#123;</div><div class="line">    <span class="comment">// dispatch changes in all subscribed watchers</span></div><div class="line">    <span class="comment">// to force getter re-evaluation.</span></div><div class="line">    store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      oldVm.state = <span class="literal">null</span></div><div class="line">    &#125;)</div><div class="line">    Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> oldVm.$destroy())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法主要是重置一个私有的 _vm 对象，它是一个 Vue 的实例。这个 _vm 对象会保留我们的 state 树，以及用计算属性的方式存储了 store 的 getters。来具体看看它的实现过程。我们把这个函数拆成几个部分来分析：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> oldVm = store._vm</div><div class="line"></div><div class="line"> <span class="comment">// bind store public getters</span></div><div class="line"> store.getters = &#123;&#125;</div><div class="line"> <span class="keyword">const</span> wrappedGetters = store._wrappedGetters</div><div class="line"> <span class="keyword">const</span> computed = &#123;&#125;</div><div class="line"> <span class="built_in">Object</span>.keys(wrappedGetters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">const</span> fn = wrappedGetters[key]</div><div class="line">   <span class="comment">// use computed to leverage its lazy-caching mechanism</span></div><div class="line">   computed[key] = <span class="function"><span class="params">()</span> =&gt;</span> fn(store)</div><div class="line">   <span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</div><div class="line">     <span class="attr">get</span>: <span class="function"><span class="params">()</span> =&gt;</span> store._vm[key]</div><div class="line">   &#125;)</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<p>这部分留了现有的 store._vm 对象，接着遍历 <code>store._wrappedGetters</code> 对象，在遍历过程中，依次拿到每个 getter 的包装函数，并把这个包装函数执行的结果用 computed 临时变量保存。接着用 es5 的 Object.defineProperty 方法为 store.getters 定义了 get 方法，也就是当我们在组件中调用<code>this.$store.getters.xxxgetters</code> 这个方法的时候，会访问 <code>store._vm[xxxgetters]</code>。我们接着往下看：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// use a Vue instance to store the state tree</span></div><div class="line"><span class="comment">// suppress warnings just in case the user has added</span></div><div class="line"> <span class="comment">// some funky global mixins</span></div><div class="line"> <span class="keyword">const</span> silent = Vue.config.silent</div><div class="line"> Vue.config.silent = <span class="literal">true</span></div><div class="line"> store._vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">   <span class="attr">data</span>: &#123; state &#125;,</div><div class="line">   computed</div><div class="line"> &#125;)</div><div class="line"> Vue.config.silent = silent</div><div class="line"></div><div class="line"> <span class="comment">// enable strict mode for new vm</span></div><div class="line"> <span class="keyword">if</span> (store.strict) &#123;</div><div class="line">   enableStrictMode(store)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这部分的代码首先先拿全局 Vue.config.silent 的配置，然后临时把这个配置设成 true，接着实例化一个 Vue 的实例，把 store 的状态树 state 作为 data 传入，把我们刚才的临时变量 computed 作为计算属性传入。然后再把之前的 silent 配置重置。设置 silent 为 true 的目的是为了取消这个 _vm 的所有日志和警告。把 computed 对象作为 _vm 的 computed 属性，这样就完成了 getters 的注册。因为当我们在组件中访问 <code>this.$store.getters.xxxgetters</code> 的时候，就相当于访问 <code>store._vm[xxxgetters]</code>，也就是在访问 computed[xxxgetters]，这样就访问到了 xxxgetters 对应的回调函数了。这段代码最后判断 strict 属性决定是否开启严格模式，我们来看看严格模式都干了什么：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableStrictMode</span> (<span class="params">store</span>) </span>&#123;</div><div class="line">  store._vm.$watch(<span class="string">'state'</span>, () =&gt; &#123;</div><div class="line">    assert(store._committing, <span class="string">`Do not mutate vuex store state outside mutation handlers.`</span>)</div><div class="line">  &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span>, <span class="attr">sync</span>: <span class="literal">true</span> &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>严格模式做的事情很简单，监测 <code>store._vm.state</code> 的变化，看看 state 的变化是否通过执行 mutation 的回调函数改变，如果是外部直接修改 state，那么 <code>store._committing</code> 的值为 false，这样就抛出一条错误。再次强调一下，Vuex 中对 state 的修改只能在 mutation 的回调函数里。</p>
<p>回到 resetStoreVM 函数，我们来看一下最后一部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (oldVm) &#123;</div><div class="line">  <span class="comment">// dispatch changes in all subscribed watchers</span></div><div class="line">  <span class="comment">// to force getter re-evaluation.</span></div><div class="line">  store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    oldVm.state = <span class="literal">null</span></div><div class="line">  &#125;)</div><div class="line">  Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> oldVm.$destroy())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的逻辑很简单，由于这个函数每次都会创建新的 Vue 实例并赋值到 <code>store._vm</code> 上，那么旧的 _vm 对象的状态设置为 null，并调用 $destroy 方法销毁这个旧的 _vm 对象。</p>
<p>那么到这里，Vuex 的初始化基本告一段落了，初始化核心就是 installModule 和<br>resetStoreVM 函数。通过对 mutations 、actions 和 getters 的注册，我们了解到 state 的是按模块划分的，按模块的嵌套形成一颗状态树。而 actions、mutations 和 getters 的全局的，其中 actions 和 mutations 的 key 允许重复，但 getters 的 key 是不允许重复的。官方推荐我们给这些全局的对象在定义的时候加一个名称空间来避免命名冲突。<br>从源码的角度介绍完 Vuex 的初始化的玩法，我们再从 Vuex 提供的 API 方向来分析其中的源码，看看这些 API 是如何实现的。</p>
<h3 id="Vuex-API-分析"><a href="#Vuex-API-分析" class="headerlink" title="Vuex API 分析"></a>Vuex API 分析</h3><p>Vuex 常见的 API 如 dispatch、commit 、subscribe �我们前面已经介绍过了，这里就不再赘述了，下面介绍的一些 Store 的 API，虽然不常用，�但是了解一下也不错。�</p>
<h4 id="watch-getter-cb-options"><a href="#watch-getter-cb-options" class="headerlink" title="watch(getter, cb, options)"></a>watch(getter, cb, options)</h4><p>watch 作用是响应式的监测一个 getter 方法的返回值，当值改变时调用回调。getter 接收 store 的 state 作为唯一参数。来看一下它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">watch (getter, cb, options) &#123;</div><div class="line">    assert(<span class="keyword">typeof</span> getter === <span class="string">'function'</span>, <span class="string">`store.watch only accepts a function.`</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._watcherVM.$watch(<span class="function"><span class="params">()</span> =&gt;</span> getter(<span class="keyword">this</span>.state), cb, options)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>函数首先断言 watch 的 getter 必须是一个方法，接着利用了内部一个 Vue 的实例对象 <figure class="highlight plain"><figcaption><span>``` 的 $watch 方法，观测 getter 方法返回值的变化，如果有变化则调用 cb 函数，回调函数的参数为新值和旧值。watch 方法返回的是一个方法，调用它则取消观测。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### registerModule(path, module)</div><div class="line"></div><div class="line">registerModule 的作用是注册一个动态模块，有的时候当我们异步加载一些业务的时候，可以通过这个 API 接口去动态注册模块，来看一下它的实现：</div><div class="line"></div><div class="line">```javascript</div><div class="line">registerModule (path, module) &#123;</div><div class="line">    if (typeof path === &apos;string&apos;) path = [path]</div><div class="line">    assert(Array.isArray(path), `module path must be a string or an Array.`)</div><div class="line">    this._runtimeModules[path.join(&apos;.&apos;)] = module</div><div class="line">    installModule(this, this.state, path, module)</div><div class="line">    // reset store to update getters...</div><div class="line">    resetStoreVM(this, this.state)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>函数首先对 path 判断，如果 path 是一个 string 则把 path 转换成一个 Array。接着把 module 对象缓存到 <code>this._runtimeModules</code> 这个对象里，path 用点连接作为该对象的 key。接着和初始化 Store 的逻辑一样，调用 installModule 和 resetStoreVm 方法安装一遍动态注入的 module。</p>
<h4 id="unregisterModule-path"><a href="#unregisterModule-path" class="headerlink" title="unregisterModule(path)"></a>unregisterModule(path)</h4><p>和 registerModule 方法相对的就是 unregisterModule 方法，它的作用是注销一个动态模块，来看一下它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">unregisterModule (path) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) path = [path]</div><div class="line">    assert(<span class="built_in">Array</span>.isArray(path), <span class="string">`module path must be a string or an Array.`</span>)</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>._runtimeModules[path.join(<span class="string">'.'</span>)]</div><div class="line">    <span class="keyword">this</span>._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> parentState = getNestedState(<span class="keyword">this</span>.state, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</div><div class="line">      Vue.delete(parentState, path[path.length - <span class="number">1</span>])</div><div class="line">    &#125;)</div><div class="line">    resetStore(<span class="keyword">this</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>函数首先还是对 path 的类型做了判断，这部分逻辑和注册是一样的。接着从 <code>this._runtimeModules</code> 里删掉以 path 点连接的 key 对应的模块。接着通过 <code>this._withCommit</code> 方法把当前模块的 state 对象从父 state 上删除。最后调用 resetStore(this) 方法，来看一下这个方法的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStore</span> (<span class="params">store</span>) </span>&#123;</div><div class="line">  store._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">  store._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">  store._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">  <span class="keyword">const</span> state = store.state</div><div class="line">  <span class="comment">// init root module</span></div><div class="line">  installModule(store, state, [], store._options, <span class="literal">true</span>)</div><div class="line">  <span class="comment">// init all runtime modules</span></div><div class="line">  <span class="built_in">Object</span>.keys(store._runtimeModules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">    installModule(store, state, key.split(<span class="string">'.'</span>), store._runtimeModules[key], <span class="literal">true</span>)</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// reset vm</span></div><div class="line">  resetStoreVM(store, state)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法作用就是重置 store 对象，重置 store 的 <code>_actions、_mutations、_wrappedGetters</code> 等等属性。然后再次调用 installModules 去重新安装一遍 Module 对应的这些属性，注意这里我们的最后一个参数 hot 为true，表示它是一次热更新。这样在 installModule 这个方法体类，如下这段逻辑就不会执行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span> (<span class="params">store, rootState, path, module, hot</span>) </span>&#123;</div><div class="line">  ... </div><div class="line">  <span class="comment">// set state</span></div><div class="line">  <span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class="line">    <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</div><div class="line">    <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</div><div class="line">    store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 hot 始终为 true，这里我们就不会重新对状态树做设置，我们的 state 保持不变。因为我们已经明确的删除了对应 path 下的 state 了，要做的事情只不过就是重新注册一遍 muations、actions 以及 getters。</p>
<p>回调 resetStore 方法，接下来遍历 <code>this._runtimeModules</code> 模块，重新安装所有剩余的 runtime Moudles。最后还是调用 resetStoreVM 方法去重置 Store 的 _vm 对象。</p>
<h4 id="hotUpdate-newOptions"><a href="#hotUpdate-newOptions" class="headerlink" title="hotUpdate(newOptions)"></a>hotUpdate(newOptions)</h4><p>hotUpdate 的作用是热加载新的 action 和 mutation。 来看一下它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hotUpdate (newOptions) &#123;</div><div class="line">  updateModule(<span class="keyword">this</span>._options, newOptions)</div><div class="line">  resetStore(<span class="keyword">this</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数首先调用 updateModule 方法去更新状态，其中当前 Store 的 opition 配置和要更新的 newOptions 会作为参数。来看一下这个函数的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateModule</span> (<span class="params">targetModule, newModule</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (newModule.actions) &#123;</div><div class="line">    targetModule.actions = newModule.actions</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (newModule.mutations) &#123;</div><div class="line">    targetModule.mutations = newModule.mutations</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (newModule.getters) &#123;</div><div class="line">    targetModule.getters = newModule.getters</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (newModule.modules) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newModule.modules) &#123;</div><div class="line">      <span class="keyword">if</span> (!(targetModule.modules &amp;&amp; targetModule.modules[key])) &#123;</div><div class="line">        <span class="built_in">console</span>.warn(</div><div class="line">          <span class="string">`[vuex] trying to add a new module '<span class="subst">$&#123;key&#125;</span>' on hot reloading, `</span> +</div><div class="line">          <span class="string">'manual reload is needed'</span></div><div class="line">        )</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      updateModule(targetModule.modules[key], newModule.modules[key])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我们对 newOptions 对象的 actions、mutations 以及 getters 做了判断，如果有这些属性的话则替换 targetModule（当前 Store 的 options）对应的属性。最后判断如果 newOptions 包含 modules 这个 key，则遍历这个 modules 对象，如果 modules 对应的 key 不在之前的 modules 中，则报一条警告，因为这是添加一个新的 module ，需要手动重新加载。如果 key 在之前的 modules，则递归调用 updateModule，热更新子模块。</p>
<p>调用完 updateModule 后，回到 hotUpdate 函数，接着调用 resetStore 方法重新设置 store，刚刚我们已经介绍过了。</p>
<h4 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState"></a>replaceState</h4><p>replaceState的作用是替换整个 rootState，一般在用于调试，来看一下它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">replaceState (state) &#123;</div><div class="line">    <span class="keyword">this</span>._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>._vm.state = state</div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>函数非常简单，就是调用 <code>this._withCommit</code> 方法修改 Store 的 rootState，之所以提供这个 API 是由于在我们是不能在 muations 的回调函数外部去改变 state。</p>
<p>到此为止，API 部分介绍完了，其实整个 Vuex 源码下的 src/index.js 文件里的代码基本都过了一遍。</p>
<h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><p>Vuex 除了提供我们 Store 对象外，还对外提供了一系列的辅助函数，方便我们在代码中使用 Vuex，提供了操作 store 的各种属性的一系列语法糖，下面我们来一起看一下：</p>
<h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>mapState 工具函数会将 store 中的 state 映射到局部计算属性中。为了更好理解它的实现，先来看一下它的使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// vuex 提供了独立的构建工具函数 Vuex.mapState</span></div><div class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: mapState(&#123;</div><div class="line">    <span class="comment">// 箭头函数可以让代码非常简洁</span></div><div class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</div><div class="line">    <span class="comment">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></div><div class="line">    countAlias: <span class="string">'count'</span>,</div><div class="line">    <span class="comment">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></div><div class="line">    countPlusLocalState (state) &#123;</div><div class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当计算属性名称和状态子树名称对应相同时，我们可以向 mapState 工具函数传入一个字符串数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">computed: mapState([</div><div class="line">  <span class="comment">// 映射 this.count 到 this.$store.state.count</span></div><div class="line">  <span class="string">'count'</span></div><div class="line">])</div></pre></td></tr></table></figure>
<p>通过例子我们可以直观的看到，mapState 函数可以接受一个对象，也可以接收一个数组，那它底层到底干了什么事呢，我们一起来看一下源码这个函数的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mapState</span> (<span class="params">states</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> res = &#123;&#125;</div><div class="line">  normalizeMap(states).forEach(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class="line">    res[key] = <span class="function"><span class="keyword">function</span> <span class="title">mappedState</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'function'</span></div><div class="line">        ? val.call(<span class="keyword">this</span>, <span class="keyword">this</span>.$store.state, <span class="keyword">this</span>.$store.getters)</div><div class="line">        : <span class="keyword">this</span>.$store.state[val]</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数首先对传入的参数调用 normalizeMap 方法，我们来看一下这个函数的定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeMap</span> (<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(map)</div><div class="line">    ? map.map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; key, <span class="attr">val</span>: key &#125;))</div><div class="line">    : <span class="built_in">Object</span>.keys(map).map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; key, <span class="attr">val</span>: map[key] &#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法判断参数 map 是否为数组，如果是数组，则调用数组的 map 方法，把数组的每个元素转换成一个 <code>{key, val: key}</code>的对象；否则传入的 map 就是一个对象（从 mapState 的使用场景来看，传入的参数不是数组就是对象），我们调用 Object.keys 方法遍历这个 map 对象的 key，把数组的每个 key 都转换成一个 <code>{key, val: key}</code>的对象。最后我们把这个对象数组作为 normalizeMap 的返回值。</p>
<p>回到 mapState 函数，在调用了 normalizeMap 函数后，把传入的 states 转换成由 {key, val} 对象构成的数组，接着调用 forEach 方法遍历这个数组，构造一个新的对象，这个新对象每个元素都返回一个新的函数 mappedState，函数对 val 的类型判断，如果 val 是一个函数，则直接调用这个 val 函数，把当前 store 上的 state 和 getters 作为参数，返回值作为 mappedState 的返回值；否则直接把 <code>this.$store.state[val]</code> 作为 mappedState 的返回值。</p>
<p>那么为何 mapState 函数的返回值是这样一个对象呢，因为 mapState 的作用是把全局的 state 和 getters 映射到当前组件的 computed 计算属性中，我们知道在 Vue 中 每个计算属性都是一个函数。</p>
<p>为了更加直观地说明，回到刚才的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: mapState(&#123;</div><div class="line">    <span class="comment">// 箭头函数可以让代码非常简洁</span></div><div class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</div><div class="line">    <span class="comment">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></div><div class="line">    countAlias: <span class="string">'count'</span>,</div><div class="line">    <span class="comment">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></div><div class="line">    countPlusLocalState (state) &#123;</div><div class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过 mapState 函数调用后的结果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: &#123;</div><div class="line">    count() &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</div><div class="line">    &#125;,</div><div class="line">    countAlias() &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="keyword">this</span>.$store.state[<span class="string">'count'</span>]</div><div class="line">    &#125;,</div><div class="line">    countPlusLocalState() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count + <span class="keyword">this</span>.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再看一下 mapState 参数为数组的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">computed: mapState([</div><div class="line">  <span class="comment">// 映射 this.count 到 this.$store.state.count</span></div><div class="line">  <span class="string">'count'</span></div><div class="line">])</div></pre></td></tr></table></figure>
<p>经过 mapState 函数调用后的结果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  count() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state[<span class="string">'count'</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h4><p>mapGetters 工具函数会将 store 中的 getter 映射到局部计算属性中。它的功能和 mapState 非常类似，我们来直接看它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mapGetters</span> (<span class="params">getters</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> res = &#123;&#125;</div><div class="line">  normalizeMap(getters).forEach(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class="line">    res[key] = <span class="function"><span class="keyword">function</span> <span class="title">mappedGetter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!(val <span class="keyword">in</span> <span class="keyword">this</span>.$store.getters)) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown getter: <span class="subst">$&#123;val&#125;</span>`</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[val]</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mapGetters 的实现也和 mapState 很类似，不同的是它的 val 不能是函数，只能是一个字符串，而且会检查 <code>val in this.$store.getters</code> 的值，如果为 false 会输出一条错误日志。为了更直观地理解，我们来看一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: &#123;</div><div class="line">    <span class="comment">// 使用对象扩展操作符把 getter 混入到 computed 中</span></div><div class="line">    ...mapGetters([</div><div class="line">      <span class="string">'doneTodosCount'</span>,</div><div class="line">      <span class="string">'anotherGetter'</span>,</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过 mapGetters 函数调用后的结果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: &#123;</div><div class="line">    doneTodosCount() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[<span class="string">'doneTodosCount'</span>]</div><div class="line">    &#125;,</div><div class="line">    anotherGetter() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[<span class="string">'anotherGetter'</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看一个参数 mapGetters 参数是对象的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">computed: mapGetters(&#123;</div><div class="line">  <span class="comment">// 映射 this.doneCount 到 store.getters.doneTodosCount</span></div><div class="line">  doneCount: <span class="string">'doneTodosCount'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>经过 mapGetters 函数调用后的结果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneCount() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[<span class="string">'doneTodosCount'</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h4><p>mapActions 工具函数会将 store 中的 dispatch 方法映射到组件的 methods 中。和 mapState、mapGetters 也类似，只不过它映射的地方不是计算属性，而是组件的 methods 对象上。我们来直接看它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mapActions</span> (<span class="params">actions</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> res = &#123;&#125;</div><div class="line">  normalizeMap(actions).forEach(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class="line">    res[key] = <span class="function"><span class="keyword">function</span> <span class="title">mappedAction</span> (<span class="params">...args</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.dispatch.apply(<span class="keyword">this</span>.$store, [val].concat(args))</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，函数的实现套路和 mapState、mapGetters 差不多，甚至更简单一些， 实际上就是做了一层函数包装。为了更直观地理解，我们来看一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    ...mapActions([</div><div class="line">      <span class="string">'increment'</span> <span class="comment">// 映射 this.increment() 到 this.$store.dispatch('increment')</span></div><div class="line">    ]),</div><div class="line">    ...mapActions(&#123;</div><div class="line">      <span class="attr">add</span>: <span class="string">'increment'</span> <span class="comment">// 映射 this.add() to this.$store.dispatch('increment')</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过 mapActions 函数调用后的结果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    increment(...args) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.dispatch.apply(<span class="keyword">this</span>.$store, [<span class="string">'increment'</span>].concat(args))</div><div class="line">	&#125;</div><div class="line">    add(...args) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.dispatch.apply(<span class="keyword">this</span>.$store, [<span class="string">'increment'</span>].concat(args))</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h4><p>mapMutations 工具函数会将 store 中的 commit 方法映射到组件的 methods 中。和 mapActions 的功能几乎一样，我们来直接看它的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mapMutations</span> (<span class="params">mutations</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> res = &#123;&#125;</div><div class="line">  normalizeMap(mutations).forEach(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class="line">    res[key] = <span class="function"><span class="keyword">function</span> <span class="title">mappedMutation</span> (<span class="params">...args</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.commit.apply(<span class="keyword">this</span>.$store, [val].concat(args))</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数的实现几乎也和 mapActions 一样，唯一差别就是映射的是 store 的 commit 方法。为了更直观地理解，我们来看一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      <span class="string">'increment'</span> <span class="comment">// 映射 this.increment() 到 this.$store.commit('increment')</span></div><div class="line">    ]),</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      <span class="attr">add</span>: <span class="string">'increment'</span> <span class="comment">// 映射 this.add() 到 this.$store.commit('increment')</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过 mapMutations 函数调用后的结果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    increment(...args) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.commit.apply(<span class="keyword">this</span>.$store, [<span class="string">'increment'</span>].concat(args))</div><div class="line">	&#125;</div><div class="line">    add(...args) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.commit.apply(<span class="keyword">this</span>.$store, [<span class="string">'increment'</span>].concat(args))</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Vuex 的 store 接收 plugins 选项，一个 Vuex 的插件就是一个简单的方法，接收 store 作为唯一参数。插件作用通常是用来监听每次 mutation 的变化，来做一些事情。</p>
<p>在 store 的构造函数的最后，我们通过如下代码调用插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> devtoolPlugin <span class="keyword">from</span> <span class="string">'./plugins/devtool'</span></div><div class="line"></div><div class="line"><span class="comment">// apply plugins</span></div><div class="line">plugins.concat(devtoolPlugin).forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> plugin(<span class="keyword">this</span>))</div></pre></td></tr></table></figure>
<p>我们通常实例化 store 的时候，还会调用 logger 插件，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  ...</div><div class="line">  plugins: debug ? [createLogger()] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在上述 2 个例子中，我们分别调用了 devtoolPlugin 和 createLogger() 2 个插件，它们是 Vuex 内置插件，我们接下来分别看一下他们的实现。</p>
<h4 id="devtoolPlugin"><a href="#devtoolPlugin" class="headerlink" title="devtoolPlugin"></a>devtoolPlugin</h4><p>devtoolPlugin 主要功能是利用 Vue 的开发者工具和 Vuex 做配合，通过开发者工具的面板展示 Vuex 的状态。它的源码在 src/plugins/devtool.js 中，来看一下这个插件到底做了哪些事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> devtoolHook =</div><div class="line">  <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp;</div><div class="line">  <span class="built_in">window</span>.__VUE_DEVTOOLS_GLOBAL_HOOK__</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">devtoolPlugin</span> (<span class="params">store</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!devtoolHook) <span class="keyword">return</span></div><div class="line"></div><div class="line">  store._devtoolHook = devtoolHook</div><div class="line"></div><div class="line">  devtoolHook.emit(<span class="string">'vuex:init'</span>, store)</div><div class="line"></div><div class="line">  devtoolHook.on(<span class="string">'vuex:travel-to-state'</span>, targetState =&gt; &#123;</div><div class="line">    store.replaceState(targetState)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  store.subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</div><div class="line">    devtoolHook.emit(<span class="string">'vuex:mutation'</span>, mutation, state)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们直接从对外暴露的 devtoolPlugin 函数看起，函数首先判断了devtoolHook 的值，如果我们浏览器装了 Vue 开发者工具，那么在 window 上就会有一个 <code>__VUE_DEVTOOLS_GLOBAL_HOOK__</code> 的引用， 那么这个 devtoolHook 就指向这个引用。</p>
<p>接下来通过 <code>devtoolHook.emit(&#39;vuex:init&#39;, store)</code> 派发一个 Vuex 初始化的事件，这样开发者工具就能拿到当前这个 store 实例。</p>
<p>接下来通过 <code>devtoolHook.on(&#39;vuex:travel-to-state&#39;, targetState =&gt; { store.replaceState(targetState) })</code>监听 Vuex 的 traval-to-state 的事件，把当前的状态树替换成目标状态树，这个功能也是利用 Vue 开发者工具替换 Vuex 的状态。</p>
<p>最后通过 <code>store.subscribe((mutation, state) =&gt; { devtoolHook.emit(&#39;vuex:mutation&#39;, mutation, state) })</code> 方法订阅 store 的 state 的变化，当 store 的 mutation 提交了 state 的变化， 会触发回调函数——通过 devtoolHook 派发一个 Vuex mutation 的事件，mutation 和 rootState 作为参数，这样开发者工具就可以观测到 Vuex state 的实时变化，在面板上展示最新的状态树。</p>
<h4 id="loggerPlugin"><a href="#loggerPlugin" class="headerlink" title="loggerPlugin"></a>loggerPlugin</h4><p>通常在开发环境中，我们希望实时把 mutation 的动作以及 store 的 state 的变化实时输出，那么我们可以用 loggerPlugin 帮我们做这个事情。它的源码在 src/plugins/logger.js 中，来看一下这个插件到底做了哪些事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Credits: borrowed code from fcomb/redux-logger</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; deepCopy &#125; <span class="keyword">from</span> <span class="string">'../util'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createLogger</span> (<span class="params">&#123;</span></span></div><div class="line">  collapsed = true,</div><div class="line">  transformer = state =&gt; state,</div><div class="line">  mutationTransformer = mut =&gt; mut</div><div class="line">&#125; = &#123;&#125;) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">store</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> prevState = deepCopy(store.state)</div><div class="line"></div><div class="line">    store.subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> === <span class="string">'undefined'</span>) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">const</span> nextState = deepCopy(state)</div><div class="line">      <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">      <span class="keyword">const</span> formattedTime = <span class="string">` @ <span class="subst">$&#123;pad(time.getHours(), <span class="number">2</span>)&#125;</span>:<span class="subst">$&#123;pad(time.getMinutes(), <span class="number">2</span>)&#125;</span>:<span class="subst">$&#123;pad(time.getSeconds(), <span class="number">2</span>)&#125;</span>.<span class="subst">$&#123;pad(time.getMilliseconds(), <span class="number">3</span>)&#125;</span>`</span></div><div class="line">      <span class="keyword">const</span> formattedMutation = mutationTransformer(mutation)</div><div class="line">      <span class="keyword">const</span> message = <span class="string">`mutation <span class="subst">$&#123;mutation.type&#125;</span><span class="subst">$&#123;formattedTime&#125;</span>`</span></div><div class="line">      <span class="keyword">const</span> startMessage = collapsed</div><div class="line">        ? <span class="built_in">console</span>.groupCollapsed</div><div class="line">        : <span class="built_in">console</span>.group</div><div class="line"></div><div class="line">      <span class="comment">// render</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        startMessage.call(<span class="built_in">console</span>, message)</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="built_in">console</span>.log(message)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'%c prev state'</span>, <span class="string">'color: #9E9E9E; font-weight: bold'</span>, transformer(prevState))</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'%c mutation'</span>, <span class="string">'color: #03A9F4; font-weight: bold'</span>, formattedMutation)</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'%c next state'</span>, <span class="string">'color: #4CAF50; font-weight: bold'</span>, transformer(nextState))</div><div class="line"></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="built_in">console</span>.groupEnd()</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'—— log end ——'</span>)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      prevState = nextState</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span> (<span class="params">str, times</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Array</span>(times + <span class="number">1</span>)).join(str)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pad</span> (<span class="params">num, maxLength</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> repeat(<span class="string">'0'</span>, maxLength - num.toString().length) + num</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插件对外暴露的是 createLogger 方法，它实际上接受 3 个参数，它们都有默认值，通常我们用默认值就可以。createLogger 的返回的是一个函数，当我执行 logger 插件的时候，实际上执行的是这个函数，下面来看一下这个函数做了哪些事情。</p>
<p>函数首先执行了 <code>let prevState = deepCopy(store.state)</code> 深拷贝当前 store 的 rootState。这里为什么要深拷贝，因为如果是单纯的引用，那么 store.state 的任何变化都会影响这个引用，这样就无法记录上一个状态了。我们来了解一下 deepCopy 的实现，在 src/util.js 里定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span> (<span class="params">list, f</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> list.filter(f)[<span class="number">0</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span> (<span class="params">obj, cache = []</span>) </span>&#123;</div><div class="line">  <span class="comment">// just return if obj is immutable value</span></div><div class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> obj</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// if obj is hit, it is in circular structure</span></div><div class="line">  <span class="keyword">const</span> hit = find(cache, c =&gt; c.original === obj)</div><div class="line">  <span class="keyword">if</span> (hit) &#123;</div><div class="line">    <span class="keyword">return</span> hit.copy</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> copy = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</div><div class="line">  <span class="comment">// put the copy into cache at first</span></div><div class="line">  <span class="comment">// because we want to refer it in recursive deepCopy</span></div><div class="line">  cache.push(&#123;</div><div class="line">    <span class="attr">original</span>: obj,</div><div class="line">    copy</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">    copy[key] = deepCopy(obj[key], cache)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> copy</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>deepCopy 并不陌生，很多开源库如 loadash、jQuery 都有类似的实现，原理也不难理解，主要是构造一个新的对象，遍历原对象或者数组，递归调用 deepCopy。不过这里的实现有一个有意思的地方，在每次执行 deepCopy 的时候，会用 cache 数组缓存当前嵌套的对象，以及执行 deepCopy 返回的 copy。如果在 deepCopy 的过程中通过 <code>find(cache, c =&gt; c.original === obj)</code> 发现有循环引用的时候，直接返回 cache 中对应的 copy，这样就避免了无限循环的情况。</p>
<p>回到 loggerPlugin 函数，通过 deepCopy 拷贝了当前 state 的副本并用 prevState 变量保存，接下来调用 store.subscribe 方法订阅 store 的 state 的变。 在回调函数中，也是先通过 deepCopy 方法拿到当前的 state 的副本，并用 nextState 变量保存。接下来获取当前格式化时间已经格式化的 mutation 变化的字符串，然后利用 console.group 以及 console.log 分组输出 prevState、mutation以及 nextState，这里可以通过我们 createLogger 的参数 collapsed、transformer 以及 mutationTransformer 来控制我们最终 log 的显示效果。在函数的最后，我们把 nextState 赋值给 prevState，便于下一次 mutation。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vuex 2.0 的源码分析到这就告一段落了，最后我再分享一下看源码的小心得：对于一个库或者框架源码的研究前，首先了解他们的使用场景、官网文档等；然后一定要用他，至少也要写几个小 demo，达到熟练掌握的程度；最后再从入口、API、使用方法等等多个维度去了解他内部的实现细节。如果这个库过于庞大，那就先按模块和功能拆分，一点点地消化。</p>
<p>最后还有一个问题，有些同学会问，源码那么枯燥，我们分析学习它的有什么好处呢？首先，学习源码有助于我们更深入掌握和应用这个库或者框架；其次，我们还可以学习到源码中很多编程技巧，可以迁移到我们平时的开发工作中；最后，对于一些高级开发工程师而言，我们可以学习到它的设计思想，对将来有一天我们也去设计一个库或者框架是非常有帮助的，这也是提升自身能力水平的非常好的途径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们用 Vue.js 开发一个中到大型的单页应用时，经常会遇到如下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何让多个 Vue 组件共享状态&lt;/li&gt;
&lt;li&gt;Vue 组件间如何通讯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，在项目不是很复杂的时候，我们会利用全局事件总线 （global event bus）解决，但是随着复杂度的提升，这些代码将变的难以维护。因此，我们需要一种更加好用的解决方案，于是，Vuex 诞生了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular高仿某招聘网站后感想</title>
    <link href="http://yoursite.com/2017/03/10/%E6%A1%86%E6%9E%B6/angular/%E9%AB%98%E4%BB%BF%E6%8B%89%E9%92%A9%E6%84%9F%E6%83%B3/"/>
    <id>http://yoursite.com/2017/03/10/框架/angular/高仿拉钩感想/</id>
    <published>2017-03-09T17:24:22.000Z</published>
    <updated>2017-03-12T03:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天闲来无趣，就自己摸索着，高仿了一把某招聘网站手机端，先说一下，我并不会把这个项目进行剖析，我只会进行记录一般的问题，具体的你可以去我的github上面进行fork，然后自己研究</p>
<a id="more"></a>
<p>————————————————————————割——————————————————————————–</p>
<h4 id="用到的技术栈以及工具："><a href="#用到的技术栈以及工具：" class="headerlink" title="用到的技术栈以及工具："></a>用到的技术栈以及工具：</h4><ol>
<li>angular1.0</li>
<li>gulp</li>
<li>browser-sync</li>
<li>vs-code</li>
<li>包管理工具我这里用了两个，一个bower，另一个是npm</li>
</ol>
<h4 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h4><ul>
<li>职位展示</li>
<li>职位收藏</li>
<li>查看职位以及公司详细信息</li>
<li>查看历史记录</li>
<li>在线搜索职位进行条件筛查</li>
<li>查看投递简历记录</li>
<li>面试邀请</li>
<li>登录信息本地缓存（这里用到的是cookie–&gt;angular-cookie）</li>
<li>登陆注册  个人中心</li>
</ul>
<p>话不多说，直接把我的目录亮出来吧</p>
<p><img src="/images/lagou/tree.png" alt="img"></p>
<p>在开始这个之前我先贴出我的目录结构再解释一下</p>
<p><img src="/images/lagou/tree1.png" alt="img"></p>
<p>在script文件夹中，</p>
<ul>
<li>config 主要是配置我们的路由模块以及一些配置性的东西</li>
<li>controller 主要是我们的视图的控制器</li>
<li>directive 主要是我们的指令</li>
<li>filter 是我们的自定义的过滤器</li>
<li>service 主要是我们自定义服务</li>
<li>app.js 是我们的主文件</li>
</ul>
<p>在我们的views文件夹中，主要是我们的视图，template中全部是我们的指令的视图模板</p>
<p>在这个项目中我用到的最多的是directive（指令）,我在使用的时候感觉挺美妙的，有点vue里面模板引擎的感觉，具体的比较可以自己看看vue</p>
<p>项目中用到的路由是第三方的ui-router，这个确实比我们的ng-router还用，如果不知道怎么用，可以看我的另一篇文章，虽然东西不多，但是日常使用还是OK的  <a href="http://xuhongbo.com/2016/12/14/%E6%A1%86%E6%9E%B6/angular/ui-router/" target="_blank" rel="external">传送门</a></p>
<p>好了话不多说了，直接说下核心的一些东西吧</p>
<h4 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h4><p>第一个是我刚刚说过的指令，详细的介绍我另一篇文章  <a href="http://xuhongbo.com/2017/02/18/%E6%A1%86%E6%9E%B6/angular/angular%20Directives/" target="_blank" rel="external">传送门</a>  也有介绍，但是这个我再补充一下实际应用中的问题</p>
<p>首先贴一个示例上来吧</p>
<p>search.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-bar ta-c"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"name='';search();"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"搜索职位/公司/城市"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"search();"</span>  <span class="attr">class</span>=<span class="string">"ta-l"</span>&gt;</span></div><div class="line">    搜索</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">//这里用到了appTab指令，下面我就把这个指令贴出来，好好的说一下这个指令到底怎么回事</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">app-tab</span> <span class="attr">list</span>=<span class="string">"tabList"</span> <span class="attr">tab-click</span>=<span class="string">"tClick(id,name)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-list"</span> <span class="attr">filter-obj</span>=<span class="string">"filterObj"</span> <span class="attr">app-position-list</span> <span class="attr">data</span>=<span class="string">"positionList"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">app-foot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">app-sheet</span> <span class="attr">select</span>=<span class="string">"sClick(id,name)"</span>  <span class="attr">list</span>=<span class="string">"sheet.list"</span> <span class="attr">visible</span>=<span class="string">"visible"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>tab.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">angular.module(<span class="string">"app"</span>).directive(<span class="string">"appTab"</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">"A"</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">"views/template/tab.html"</span>,</div><div class="line">      <span class="comment">//这里的scope主要是向外部提供接口，把我们的视图与我们的控制器联系起来</span></div><div class="line">        scope: &#123;</div><div class="line">          <span class="comment">//这里的list会在我们引用这个指令时以attr的形式写入我们的指令标签中，然后在那里与我们的数据模型中的数据绑定在一起</span></div><div class="line">            list: <span class="string">"="</span>,</div><div class="line">            <span class="attr">tabClick</span>: <span class="string">"&amp;"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">            $scope.click = <span class="function"><span class="keyword">function</span> (<span class="params">tab</span>) </span>&#123;</div><div class="line">                $scope.selectId = tab.id;</div><div class="line">                $scope.tabClick(tab);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>tab.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-click</span>=<span class="string">"click(item)"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in list"</span> <span class="attr">class</span>=<span class="string">"d-ib ta-c &#123;&#123;selectId===item.id?'active':''&#125;&#125;"</span> <span class="attr">ng-bind</span>=<span class="string">"item.name"</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>searchCtrl.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">angular.module(<span class="string">"app"</span>)</div><div class="line">    .controller(<span class="string">"searchCtrl"</span>, [<span class="string">"dict"</span>, <span class="string">"$http"</span>, <span class="string">"$scope"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dict, $http, $scope</span>) </span>&#123;</div><div class="line">        $scope.name = <span class="string">""</span>;</div><div class="line">        $scope.search = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $http.get(<span class="string">"/data/positionList.json?name="</span> + $scope.name).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                $scope.positionList = data.data;</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">        $scope.search();</div><div class="line">        $scope.sheet = &#123;&#125;;</div><div class="line">        $scope.tabList = [&#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">"city"</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">"城市"</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">"salary"</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">"薪水"</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">"scale"</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">"公司规模"</span></div><div class="line">        &#125;];</div><div class="line">        <span class="keyword">var</span> tabId = <span class="string">""</span>;</div><div class="line">        $scope.filterObj=&#123;&#125;;</div><div class="line">        $scope.tClick = <span class="function"><span class="keyword">function</span> (<span class="params">id, name</span>) </span>&#123;</div><div class="line">            tabId = id;</div><div class="line">            $scope.sheet.list = dict[id].data;</div><div class="line">            $scope.visible = <span class="literal">true</span>;</div><div class="line">        &#125;;</div><div class="line">        $scope.sClick = <span class="function"><span class="keyword">function</span> (<span class="params">id, name</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (id) &#123;</div><div class="line">                angular.forEach($scope.tabList, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (item.id === tabId) &#123;</div><div class="line">                        item.name = name;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                $scope.filterObj[tabId+<span class="string">"Id"</span>]=id;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">delete</span> $scope.filterObj[tabId+<span class="string">"Id"</span>];</div><div class="line">                angular.forEach($scope.tabList, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (item.id === tabId) &#123;</div><div class="line">                        <span class="keyword">switch</span> (item.id) &#123;</div><div class="line">                            <span class="keyword">case</span> <span class="string">"city"</span>:</div><div class="line">                                item.name = <span class="string">"城市"</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="string">"salary"</span>:</div><div class="line">                                item.name = <span class="string">"薪水"</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="string">"scale"</span>:</div><div class="line">                                item.name = <span class="string">"公司规模"</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">default</span>:</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure>
<p>下面我贴出一张我在图例上的说明，相信，你很快就能看明白怎么回事，你从哪儿看都可以，这里有两个分支，红色的是从控制器分发数据到指令，绿色的是从我们的指令中触发我们的控制器中的函数，这样子就算是把我们的指令说完了，因为我相信没有比实例来的更实在的了</p>
<p>在这里，我还是说一下，文件结构吧</p>
<p>tab.html是tab.js中定义的appTab指令视图模板</p>
<p>我们在search.html用到了这个指令，然后searchCtrl是我们的search的控制器</p>
<p><img src="/images/lagou/directive接口.png" alt="img"></p>
<p>上面我们也说了实际应用中的指令怎么去用下面我们就说一下service怎么用</p>
<h4 id="service以及angular-cookie的使用"><a href="#service以及angular-cookie的使用" class="headerlink" title="service以及angular-cookie的使用"></a>service以及angular-cookie的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">angular.module(<span class="string">"app"</span>).service(<span class="string">"cache"</span>, [<span class="string">"$cookies"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$cookies</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span> (<span class="params">key, val</span>) </span>&#123;</div><div class="line">        $cookies.put(key, val);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $cookies.get(key);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">        $cookies.remove(key);</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>这一步就ok了，我们就可以在后面直接用service中的cookie来缓存我们的登陆信息了</p>
<p>自定义服务不仅能在控制器中使用，我们也可以在指令中进行调用，和我们的angular内置服务用法一致</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">指令</div><div class="line"><span class="string">"user strict"</span>;</div><div class="line"></div><div class="line">angular.module(<span class="string">"app"</span>).directive(<span class="string">"appHead"</span>, [<span class="string">"cache"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">restrict</span>: <span class="string">"AE"</span>,</div><div class="line">		<span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">templateUrl</span>: <span class="string">"views/template/header.html"</span>,</div><div class="line">		<span class="attr">link</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			$scope.name=cache.get(<span class="string">"name"</span>)||<span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">控制器</div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">angular.module(<span class="string">"app"</span>)</div><div class="line">    .controller(<span class="string">"positionCtrl"</span>, [</div><div class="line">        <span class="string">"$q"</span>,</div><div class="line">        <span class="string">"$http"</span>,</div><div class="line">        <span class="string">"$state"</span>,</div><div class="line">        <span class="string">"$scope"</span>,</div><div class="line">        <span class="string">"cache"</span>,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">$q, $http, $state, $scope, cache</span>) </span>&#123;</div><div class="line">            $scope.isLogin = <span class="literal">false</span>;</div><div class="line">            $scope.isLogin = cache.get(<span class="string">"name"</span>);</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> def = $q.defer();</div><div class="line">                $http.get(<span class="string">"data/position.json?id="</span> + $state.params.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</div><div class="line">                    $scope.position = resp.data;</div><div class="line">                    def.resolve(resp.data);</div><div class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                    def.reject(err);</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> def.promise;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getCompany</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">                $http.get(<span class="string">"data/company.json?id="</span> + id).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</div><div class="line">                    $scope.company = resp.data;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            getPosition().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">                getCompany(obj.companyId);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            $scope.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!$scope.isLogin) $state.go(<span class="string">"login"</span>);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    ]);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天闲来无趣，就自己摸索着，高仿了一把某招聘网站手机端，先说一下，我并不会把这个项目进行剖析，我只会进行记录一般的问题，具体的你可以去我的github上面进行fork，然后自己研究&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MongoDB的安装以及自启动详细教程</title>
    <link href="http://yoursite.com/2017/03/07/nodejs/mongodb/MongoDB/"/>
    <id>http://yoursite.com/2017/03/07/nodejs/mongodb/MongoDB/</id>
    <published>2017-03-06T17:57:20.000Z</published>
    <updated>2017-03-07T02:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下，我写这篇文章的背景，一直以来我也是这么实践的，那就是懒，嗯，对，就是懒，之前我自己配过这个mongodb，最近电脑重装了，然后我有个步骤忘记了，然后去网上查询资料，想改成自启动，可是我发现网上的教程没有一篇能把它说清楚的，所以我就把这个教程写了下来，供大家参考</p>
<p>———————————————————华丽的分割线—————————————————————-</p>
<p>MongoDB是一个基于分布式文件存储的数据库。由<a href="http://baike.baidu.com/view/824.htm" target="_blank" rel="external">C++</a>语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB[][ ]是一个介于<a href="http://baike.baidu.com/view/68348.htm" target="_blank" rel="external">关系数据库</a>和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似<a href="http://baike.baidu.com/view/136475.htm" target="_blank" rel="external">json</a>的<a href="http://baike.baidu.com/view/3463259.htm" target="_blank" rel="external">bson</a>格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立<a href="http://baike.baidu.com/view/262241.htm" target="_blank" rel="external">索引</a>。</p>
<a id="more"></a>
<p>首先我们要去下载我们的mongodb的zip包，不知道你们要下载什么，反正我是下载的zip，因为这个比较灵活，只需要解压就OK了，（记住哈，是zip格式）    <a href="https://www.mongodb.com/" target="_blank" rel="external">传送门</a></p>
<p><img src="/images/MongoDB/mdb16.png" alt="img"></p>
<p><img src="/images/MongoDB/mdb17.png" alt="img"></p>
<p>然后把他解压到我们电脑的某一个盘符的根目录譬如我这样 把它放在D盘根目录</p>
<p><img src="/images/MongoDB/mdb15.png" alt="img"></p>
<p>当我们把这些准备好以后，我们只需要在我们mongodb的目录下，建立一个data的目录（先不要管那个mongo.config）</p>
<p><img src="/images/MongoDB/mdb1.png" alt="img"></p>
<p>后面我们只需要在data中建立一个文件夹叫db还有一个文件夹叫log</p>
<p><img src="/images/MongoDB/mdb2.png" alt="img"></p>
<p>还有下面我们要在我们的log文件夹中建立一个mongodb.log文件，文件里不用填任何的东西</p>
<p><img src="/images/MongoDB/mdb3.png" alt="img"></p>
<p>下面我们只需要把我们的mongodb加入我们的path目录中，我们就可以在系统的任何地方启动我们的mongodb了</p>
<p><img src="/images/MongoDB/mdb4.png" alt="img"></p>
<p>然后我们就可以启动我们的数据库了，第一次启动的时候，我们要指定我们的数据库存储地址，上面我们建的的data里面的db</p>
<p>我们只需要执行一个命令就可以了，其实在你执行了上面一步之后，并不需要跳转到bin目录下，也依然可以执行我们的mongod命令，后面的<code>--dbpath D:\mongodb\data\db</code>千万不能忘，这是指定我们的数据存储地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">D:/mongodb/bin&gt;mongod --dbpath D:\mongodb\data\db</div><div class="line">D:\                                  </div><div class="line">λ cd mongodb\bin\                                                    </div><div class="line">D:\mongodb\bin                       </div><div class="line">λ mongod --dbpath D:\mongodb\data\db</div></pre></td></tr></table></figure>
<p><img src="/images/MongoDB/mdb13.png" alt="img"></p>
<p>就这样子，我们就在本地安装好了我们的mongodb</p>
<h3 id="但是，但是，但是。。。"><a href="#但是，但是，但是。。。" class="headerlink" title="但是，但是，但是。。。"></a>但是，但是，但是。。。</h3><p>如果真的这样子的话，我们每次都需要在我们需要的时候，都需要开启我们的cmd然后输入我们的mongod然后一直开着我们的cmd窗口才行，这样子很不方便好吗，如果真的这样子就完事了，我就不写这篇文章了。既然你是一名开发者，就肯定知道系统服务这个东西，我们也可以把我们的mongodb服务加入到我们的系统服务中，然后在开机的时候，自动开启我们的mongodb，这样子就很方便了。</p>
<p>—————————————————分割线———————————————–</p>
<p>下面我就带着你，把我们的mongodb加到我们的系统服务中</p>
<p>首先呢，我们需要在我们的mongodb根目录下，建立一个<code>mongo.config</code></p>
<p><img src="/images/MongoDB/mdb5.png" alt="img"></p>
<p>然后在文件中写入我们的mongodb.log的目录，以及我们的db的目录，如下（根据自己的实际情况来填写下面的路径）</p>
<p><img src="/images/MongoDB/mdb6.png" alt="img"></p>
<p>再然后我们在我们的cmd中输入下面的命令，可是你要根据自己的实际目录来改变自己的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config D:\mongodb\mongo.config --install --serviceName &quot;MongoDB&quot;</div></pre></td></tr></table></figure>
<p><img src="/images/MongoDB/mdb8.png" alt="img"></p>
<p>如果在我们的mongodb.log中看到以下信息，嗯，你就成功了</p>
<p><img src="/images/MongoDB/mdb14.png" alt="img"></p>
<p>下面我们在cmd或者<code>win+R</code>输入以下命令<code>services.msc</code>，来打开我们的服务列表</p>
<p><img src="/images/MongoDB/mdb9.png" alt="img"></p>
<p>然后我们就可以看到这些信息，在这里我们就可以看到我们的mongodb服务了</p>
<p><img src="/images/MongoDB/mdb10.png" alt="img"></p>
<p>然后我们右键进入属性，把启动项改为自动</p>
<p><img src="/images/MongoDB/mdb11.png" alt="img"></p>
<p>然后在回到上一级，把我们的服务启动了，就算正式完成了，噢耶</p>
<p><img src="/images/MongoDB/mdb12.png" alt="img"></p>
<p>至此我们的mongodb就算是真的安装以及可以自启动了，再也不用去看着黑黑的dos了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说一下，我写这篇文章的背景，一直以来我也是这么实践的，那就是懒，嗯，对，就是懒，之前我自己配过这个mongodb，最近电脑重装了，然后我有个步骤忘记了，然后去网上查询资料，想改成自启动，可是我发现网上的教程没有一篇能把它说清楚的，所以我就把这个教程写了下来，供大家参考&lt;/p&gt;
&lt;p&gt;———————————————————华丽的分割线—————————————————————-&lt;/p&gt;
&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库。由&lt;a href=&quot;http://baike.baidu.com/view/824.htm&quot;&gt;C++&lt;/a&gt;语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;MongoDB[][ ]是一个介于&lt;a href=&quot;http://baike.baidu.com/view/68348.htm&quot;&gt;关系数据库&lt;/a&gt;和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似&lt;a href=&quot;http://baike.baidu.com/view/136475.htm&quot;&gt;json&lt;/a&gt;的&lt;a href=&quot;http://baike.baidu.com/view/3463259.htm&quot;&gt;bson&lt;/a&gt;格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立&lt;a href=&quot;http://baike.baidu.com/view/262241.htm&quot;&gt;索引&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript API 合集</title>
    <link href="http://yoursite.com/2017/03/05/JavaScript/JavaScript%20API/"/>
    <id>http://yoursite.com/2017/03/05/JavaScript/JavaScript API/</id>
    <published>2017-03-05T14:57:30.000Z</published>
    <updated>2017-03-06T13:07:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在掘金上看到了这篇文章，感觉挺不错的，然后收集下来，以供以后进行查阅，再次感谢大神总结的API文档</p>
<a id="more"></a>
<p><strong>一、节点</strong></p>
<p><strong>1.1 节点属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Node.nodeName   //返回节点名称，只读</div><div class="line">Node.nodeType   //返回节点类型的常数值，只读</div><div class="line">Node.nodeValue  //返回Text或Comment节点的文本值，只读</div><div class="line">Node.textContent  //返回当前节点和它的所有后代节点的文本内容，可读写</div><div class="line">Node.baseURI    //返回当前网页的绝对路径</div><div class="line"></div><div class="line">Node.ownerDocument  //返回当前节点所在的顶层文档对象，即document</div><div class="line">Node.nextSibling  //返回紧跟在当前节点后面的第一个兄弟节点</div><div class="line">Node.previousSibling  //返回当前节点前面的、距离最近的一个兄弟节点</div><div class="line">Node.parentNode   //返回当前节点的父节点</div><div class="line">Node.parentElement  //返回当前节点的父Element节点</div><div class="line">Node.childNodes   //返回当前节点的所有子节点</div><div class="line">Node.firstChild  //返回当前节点的第一个子节点</div><div class="line">Node.lastChild   //返回当前节点的最后一个子节点</div><div class="line"></div><div class="line">//parentNode接口</div><div class="line">Node.children  //返回指定节点的所有Element子节点</div><div class="line">Node.firstElementChild  //返回当前节点的第一个Element子节点</div><div class="line">Node.lastElementChild   //返回当前节点的最后一个Element子节点</div><div class="line">Node.childElementCount  //返回当前节点所有Element子节点的数目。</div></pre></td></tr></table></figure>
<p><strong>1.2 操作</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Node.appendChild(node)   //向节点添加最后一个子节点</div><div class="line">Node.hasChildNodes()   //返回布尔值，表示当前节点是否有子节点</div><div class="line">Node.cloneNode(true);  // 默认为false(克隆节点), true(克隆节点及其属性，以及后代)</div><div class="line">Node.insertBefore(newNode,oldNode)  // 在指定子节点之前插入新的子节点</div><div class="line">Node.removeChild(node)   //删除节点，在要删除节点的父节点上操作</div><div class="line">Node.replaceChild(newChild,oldChild)  //替换节点</div><div class="line">Node.contains(node)  //返回一个布尔值，表示参数节点是否为当前节点的后代节点。</div><div class="line">Node.compareDocumentPosition(node)   //返回一个7个比特位的二进制值，表示参数节点和当前节点的关系</div><div class="line">Node.isEqualNode(noe)  //返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。</div><div class="line">Node.normalize()   //用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。</div><div class="line"></div><div class="line">//ChildNode接口</div><div class="line">Node.remove()  //用于删除当前节点</div><div class="line">Node.before()  //</div><div class="line">Node.after()</div><div class="line">Node.replaceWith()</div></pre></td></tr></table></figure>
<p><strong>1.3 Document节点</strong></p>
<p><strong>1.3.1 Document节点的属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">document.doctype   //</div><div class="line">document.documentElement  //返回当前文档的根节点</div><div class="line">document.defaultView   //返回document对象所在的window对象</div><div class="line">document.body   //返回当前文档的&lt;body&gt;节点</div><div class="line">document.head   //返回当前文档的&lt;head&gt;节点</div><div class="line">document.activeElement  //返回当前文档中获得焦点的那个元素。</div><div class="line"></div><div class="line">//节点集合属性</div><div class="line">document.links  //返回当前文档的所有a元素</div><div class="line">document.forms  //返回页面中所有表单元素</div><div class="line">document.images  //返回页面中所有图片元素</div><div class="line">document.embeds  //返回网页中所有嵌入对象</div><div class="line">document.scripts  //返回当前文档的所有脚本</div><div class="line">document.styleSheets  //返回当前网页的所有样式表</div><div class="line"></div><div class="line">//文档信息属性</div><div class="line">document.documentURI  //表示当前文档的网址</div><div class="line">document.URL  //返回当前文档的网址</div><div class="line">document.domain  //返回当前文档的域名</div><div class="line">document.lastModified  //返回当前文档最后修改的时间戳</div><div class="line">document.location  //返回location对象，提供当前文档的URL信息</div><div class="line">document.referrer  //返回当前文档的访问来源</div><div class="line">document.title    //返回当前文档的标题</div><div class="line">document.characterSet属性返回渲染当前文档的字符集，比如UTF-8、ISO-8859-1。</div><div class="line">document.readyState  //返回当前文档的状态</div><div class="line">document.designMode  //控制当前文档是否可编辑，可读写</div><div class="line">document.compatMode  //返回浏览器处理文档的模式</div><div class="line">document.cookie   //用来操作Cookie</div></pre></td></tr></table></figure>
<p><strong>1.3.2 Document节点的方法</strong></p>
<p><strong>（1）读写方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.open()   //用于新建并打开一个文档</div><div class="line">document.close()   //不安比open方法所新建的文档</div><div class="line">document.write()   //用于向当前文档写入内容</div><div class="line">document.writeIn()  //用于向当前文档写入内容，尾部添加换行符。</div></pre></td></tr></table></figure>
<p><strong>（2）查找节点</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">document.querySelector(selectors)   //接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。</div><div class="line">document.querySelectorAll(selectors)  //接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。</div><div class="line">document.getElementsByTagName(tagName)  //返回所有指定HTML标签的元素</div><div class="line">document.getElementsByClassName(className)   //返回包括了所有class名字符合指定条件的元素</div><div class="line">document.getElementsByName(name)   //用于选择拥有name属性的HTML元素（比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）</div><div class="line">document.getElementById(id)   //返回匹配指定id属性的元素节点。</div><div class="line">document.elementFromPoint(x,y)  //返回位于页面指定位置最上层的Element子节点。</div></pre></td></tr></table></figure>
<p><strong>（3）生成节点</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.createElement(tagName)   //用来生成HTML元素节点。</div><div class="line">document.createTextNode(text)   //用来生成文本节点</div><div class="line">document.createAttribute(name)  //生成一个新的属性对象节点，并返回它。</div><div class="line">document.createDocumentFragment()  //生成一个DocumentFragment对象</div></pre></td></tr></table></figure>
<p><strong>（4）事件方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.createEvent(type)   //生成一个事件对象，该对象能被element.dispatchEvent()方法使用</div><div class="line">document.addEventListener(type,listener,capture)  //注册事件</div><div class="line">document.removeEventListener(type,listener,capture)  //注销事件</div><div class="line">document.dispatchEvent(event)  //触发事件</div></pre></td></tr></table></figure>
<p><strong>（5）其他</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">document.hasFocus()   //返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</div><div class="line">document.adoptNode(externalNode)  //将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。</div><div class="line">document.importNode(externalNode, deep)   //从外部文档拷贝指定节点，插入当前文档。</div></pre></td></tr></table></figure>
<p><strong>1.4 Element节点</strong></p>
<p><strong>1.4.1 Element节点的属性</strong></p>
<p><strong>（1）特性属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Element.attributes  //返回当前元素节点的所有属性节点</div><div class="line">Element.id  //返回指定元素的id属性，可读写</div><div class="line">Element.tagName  //返回指定元素的大写标签名</div><div class="line">Element.innerHTML   //返回该元素包含的HTML代码，可读写</div><div class="line">Element.outerHTML  //返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写</div><div class="line">Element.className  //返回当前元素的class属性，可读写</div><div class="line">Element.classList  //返回当前元素节点的所有class集合</div><div class="line">Element.dataset   //返回元素节点中所有的data-*属性。</div></pre></td></tr></table></figure>
<p><strong>（2）尺寸属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Element.clientHeight   //返回元素节点可见部分的高度</div><div class="line">Element.clientWidth   //返回元素节点可见部分的宽度</div><div class="line">Element.clientLeft   //返回元素节点左边框的宽度</div><div class="line">Element.clientTop   //返回元素节点顶部边框的宽度</div><div class="line">Element.scrollHeight  //返回元素节点的总高度</div><div class="line">Element.scrollWidth  //返回元素节点的总宽度</div><div class="line">Element.scrollLeft   //返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置</div><div class="line">Element.scrollTop   //返回元素节点的垂直滚动向下滚动的像素数值</div><div class="line">Element.offsetHeight   //返回元素的垂直高度(包含border,padding)</div><div class="line">Element.offsetWidth    //返回元素的水平宽度(包含border,padding)</div><div class="line">Element.offsetLeft    //返回当前元素左上角相对于Element.offsetParent节点的垂直偏移</div><div class="line">Element.offsetTop   //返回水平位移</div><div class="line">Element.style  //返回元素节点的行内样式</div></pre></td></tr></table></figure>
<p><strong>（3）节点相关属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Element.children   //包括当前元素节点的所有子元素</div><div class="line">Element.childElementCount   //返回当前元素节点包含的子HTML元素节点的个数</div><div class="line">Element.firstElementChild  //返回当前节点的第一个Element子节点  </div><div class="line">Element.lastElementChild   //返回当前节点的最后一个Element子节点  </div><div class="line">Element.nextElementSibling  //返回当前元素节点的下一个兄弟HTML元素节点</div><div class="line">Element.previousElementSibling  //返回当前元素节点的前一个兄弟HTML节点</div><div class="line">Element.offsetParent   //返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。</div></pre></td></tr></table></figure>
<p><strong>1.4.2 Element节点的方法</strong></p>
<p><strong>（1）位置方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">getBoundingClientRect()  </div><div class="line">// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、height 元素自身宽高</div><div class="line">// top 元素上外边界距窗口最上面的距离</div><div class="line">// right 元素右外边界距窗口最上面的距离</div><div class="line">// bottom 元素下外边界距窗口最上面的距离</div><div class="line">// left 元素左外边界距窗口最上面的距离</div><div class="line">// width 元素自身宽(包含border,padding) </div><div class="line">// height 元素自身高(包含border,padding) </div><div class="line"></div><div class="line">getClientRects()   //返回当前元素在页面上形参的所有矩形。</div><div class="line"></div><div class="line">// 元素在页面上的偏移量  </div><div class="line">var rect = el.getBoundingClientRect()  </div><div class="line">return &#123;   </div><div class="line">  top: rect.top + document.body.scrollTop,   </div><div class="line">  left: rect.left + document.body.scrollLeft  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（2）属性方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Element.getAttribute()：读取指定属性  </div><div class="line">Element.setAttribute()：设置指定属性  </div><div class="line">Element.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性  </div><div class="line">Element.removeAttribute()：移除指定属性</div></pre></td></tr></table></figure>
<p><strong>（3）查找方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Element.querySelector()  </div><div class="line">Element.querySelectorAll()  </div><div class="line">Element.getElementsByTagName()  </div><div class="line">Element.getElementsByClassName()</div></pre></td></tr></table></figure>
<p><strong>（4）事件方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Element.addEventListener()：添加事件的回调函数  </div><div class="line">Element.removeEventListener()：移除事件监听函数  </div><div class="line">Element.dispatchEvent()：触发事件</div><div class="line"></div><div class="line">//ie8</div><div class="line">Element.attachEvent(oneventName,listener)</div><div class="line">Element.detachEvent(oneventName,listener)</div><div class="line"></div><div class="line">// event对象  </div><div class="line">var event = window.event||event;    </div><div class="line"></div><div class="line">// 事件的目标节点  </div><div class="line">var target = event.target || event.srcElement;</div><div class="line"></div><div class="line">// 事件代理  </div><div class="line">ul.addEventListener(&apos;click&apos;, function(event) &#123;   </div><div class="line">  if (event.target.tagName.toLowerCase() === &apos;li&apos;) &#123;   </div><div class="line">    console.log(event.target.innerHTML)   </div><div class="line">  &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>（5）其他</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Element.scrollIntoView()   //滚动当前元素，进入浏览器的可见区域</div><div class="line"></div><div class="line">//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。</div><div class="line">Element.insertAdjacentHTML(where, htmlString); </div><div class="line">Element.insertAdjacentHTML(&apos;beforeBegin&apos;, htmlString); // 在该元素前插入  </div><div class="line">Element.insertAdjacentHTML(&apos;afterBegin&apos;, htmlString); // 在该元素第一个子元素前插入 </div><div class="line">Element.insertAdjacentHTML(&apos;beforeEnd&apos;, htmlString); // 在该元素最后一个子元素后面插入 </div><div class="line">Element.insertAdjacentHTML(&apos;afterEnd&apos;, htmlString); // 在该元素后插入</div><div class="line"></div><div class="line">Element.remove()  //用于将当前元素节点从DOM中移除</div><div class="line">Element.focus()   //用于将当前页面的焦点，转移到指定元素上</div></pre></td></tr></table></figure>
<p><strong>二、CSS操作</strong></p>
<p><strong>（1）类名操作</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//ie8以下</div><div class="line">Element.className  //获取元素节点的类名</div><div class="line">Element.className += &apos; &apos; + newClassName  //新增一个类名</div><div class="line"></div><div class="line">//判断是否有某个类名</div><div class="line">function hasClass(element,className)&#123;</div><div class="line">  return new RegExp(className,&apos;gi&apos;).test(element.className);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//移除class</div><div class="line">function removeClass(element,className)&#123;</div><div class="line">  element.className = element.className.replace(new RegExp(&apos;(^|\\b)&apos; + className.split(&apos; &apos;).join(&apos;|&apos;) + &apos;(\\b|$)&apos;, &apos;gi&apos;),&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//ie10 </div><div class="line">element.classList.add(className)  //新增</div><div class="line">element.classList.remove(className)  //删除</div><div class="line">element.classList.contains(className)  //是否包含</div><div class="line">element.classList.toggle(className)  //toggle class</div></pre></td></tr></table></figure>
<p><strong>（2）style操作</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(&apos;style&apos;,&apos;&apos;)</div><div class="line"></div><div class="line">element.style.backgroundColor = &apos;red&apos;</div><div class="line"></div><div class="line">element.style.cssText //用来读写或删除整个style属性</div><div class="line"></div><div class="line">element.style.setProperty(propertyName,value)  //设置css属性</div><div class="line">element.style.getPropertyValue(property)  //获取css属性</div><div class="line">element.style.removeProperty(property)  //删除css属性</div><div class="line">操作非内联样式</div><div class="line">//ie8</div><div class="line">element.currentStyle[attrName]</div><div class="line">//ie9+</div><div class="line">window.getComputedStyle(el,null)[attrName] </div><div class="line">window.getComputedStyle(el,null).getPropertyValue(attrName)</div><div class="line">//伪类</div><div class="line">window.getComputedStyle(el,&apos;:after&apos;)[attrName]</div></pre></td></tr></table></figure>
<p><strong>三、对象</strong></p>
<p><strong>3.1 Object对象</strong></p>
<p><strong>（1）生成实例对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var o = new Object()</div></pre></td></tr></table></figure>
<p><strong>（2）属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.prototype   //返回原型对象</div></pre></td></tr></table></figure>
<p><strong>（3）方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object.keys(o)   //遍历对象的可枚举属性</div><div class="line">Object.getOwnPropertyName(o)   //遍历对象不可枚举的属性</div></pre></td></tr></table></figure>
<p>对象实例的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">valueOf()：返回当前对象对应的值。  </div><div class="line">toString()：返回当前对象对应的字符串形式。  </div><div class="line">toLocaleString()：返回当前对象对应的本地字符串形式。  </div><div class="line">hasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。 </div><div class="line">isPrototypeOf()：判断当前对象是否为另一个对象的原型。</div><div class="line">propertyIsEnumerable()：判断某个属性是否可枚举。</div></pre></td></tr></table></figure>
<p><strong>3.2 Array对象</strong></p>
<p><strong>（1）生成实例对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a = new Array()</div></pre></td></tr></table></figure>
<p><strong>（2）属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.length  //长度</div></pre></td></tr></table></figure>
<p><strong>（3）Array.isArray()</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.isArray(a)   //用来判断一个值是否为数组</div></pre></td></tr></table></figure>
<p><strong>（4）Array实例的方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">a.valueof()   //返回数组本身</div><div class="line">a.toString()  //返回数组的字符串形式</div><div class="line">a.push(value,vlaue....)   //用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。</div><div class="line">pop()   //用于删除数组的最后一个元素，并返回该元素</div><div class="line">join()  //以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。</div><div class="line">concat()  //用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。</div><div class="line">shift()  //用于删除数组的第一个元素，并返回该元素。</div><div class="line">unshift(value)  //用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。</div><div class="line">reverse()   //用于颠倒数组中元素的顺序，返回改变后的数组</div><div class="line">slice(start_index, upto_index);   //用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。</div><div class="line">splice(index, count_to_remove, addElement1, addElement2, ...);   //用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</div><div class="line">sort()   //对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</div><div class="line">map()   //对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</div><div class="line">map(elem,index,arr)   //map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。</div><div class="line">forEach()   //遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。</div><div class="line">filter()   //参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</div><div class="line">some()    //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。</div><div class="line">every()   //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。所有数组成员的返回值都是true，才返回true，否则false。</div><div class="line">reduce()   //依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员到最后一个成员）</div><div class="line">reduceRight()  //依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）</div><div class="line">indexOf(s)   //返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置</div><div class="line">lastIndexOf()  //返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</div></pre></td></tr></table></figure>
<p><strong>3.3 Number对象</strong></p>
<p><strong>（1）生成对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var n = new Number()</div></pre></td></tr></table></figure>
<p><strong>（2）Number对象的属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Number.POSITIVE_INFINITY：正的无限，指向Infinity。  </div><div class="line">Number.NEGATIVE_INFINITY：负的无限，指向-Infinity。  </div><div class="line">Number.NaN：表示非数值，指向NaN。  </div><div class="line">Number.MAX_VALUE：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。  </div><div class="line">Number.MIN_VALUE：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。  </div><div class="line">Number.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即9007199254740991。  </div><div class="line">Number.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即-9007199254740991。</div></pre></td></tr></table></figure>
<p><strong>（4）Number对象实例的方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">toString()   //用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</div><div class="line">toFixed()   //用于将一个数转为指定位数的小数，返回这个小数对应的字符串。</div><div class="line">toExponential()  //用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。</div><div class="line">toPrecision()  //用于将一个数转为指定位数的有效数字。</div></pre></td></tr></table></figure>
<p><strong>3.4 String 对象</strong></p>
<p><strong>（1）生成实例对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var s = new String()</div></pre></td></tr></table></figure>
<p><strong>（2）String对象的属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.length   //返回字符串的长度</div></pre></td></tr></table></figure>
<p><strong>（3）方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">s.chatAt(index)   //返回指定位置的字符</div><div class="line">s.fromCharCode()    //该方法的参数是一系列Unicode码点，返回对应的字符串。</div><div class="line">s.charCodeAt(index)    //返回给定位置字符的Unicode码点（十进制表示）</div><div class="line">s.concat(s2)  //用于连接两个字符串</div><div class="line">s.slice(start,end)   //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</div><div class="line">s.substring(start,end)  //用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。</div><div class="line">s.substr(start,length)   //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</div><div class="line">s.indexOf(s)   //返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置 </div><div class="line">s.lastIndexOf()  //返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。</div><div class="line">s.trim()  //用于去除字符串两端的空格，返回一个新字符串</div><div class="line">s.toLowerCase()  //用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。</div><div class="line">s.toUpperCase()  //全部转为大写</div><div class="line">s.localeCompare(s2)  //用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</div><div class="line">s.match(regexp)   //用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。</div><div class="line">s.search()  //返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。</div><div class="line">s.replace(oldValue,newValue)  //用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。</div><div class="line">s.split()  //按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。</div></pre></td></tr></table></figure>
<p><strong>3.5 Math对象</strong></p>
<p><strong>（1）属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Math.E：常数e。  </div><div class="line">Math.LN2：2的自然对数。  </div><div class="line">Math.LN10：10的自然对数。  </div><div class="line">Math.LOG2E：以2为底的e的对数。  </div><div class="line">Math.LOG10E：以10为底的e的对数。  </div><div class="line">Math.PI：常数Pi。  </div><div class="line">Math.SQRT1_2：0.5的平方根。  </div><div class="line">Math.SQRT2：2的平方根。</div></pre></td></tr></table></figure>
<p><strong>（2）数学方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Math.abs()：返回参数的绝对值  </div><div class="line">Math.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。 </div><div class="line">Math.floor()：向下取整  </div><div class="line">Math.max(n,n1,...)：可接受多个参数，返回最大值  </div><div class="line">Math.min(n,n1,..)：可接受多个参数，返回最小值  </div><div class="line">Math.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。 </div><div class="line">Math.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回NaN。  </div><div class="line">Math.log()：返回以e为底的自然对数值。</div><div class="line">Math.exp()：返回e的指数，也就是常数e的参数次方。</div><div class="line">Math.round()：四舍五入  </div><div class="line">Math.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</div></pre></td></tr></table></figure>
<p><strong>（3）三角函数方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Math.sin()：返回参数的正弦  </div><div class="line">Math.cos()：返回参数的余弦  </div><div class="line">Math.tan()：返回参数的正切  </div><div class="line">Math.asin()：返回参数的反正弦（弧度值）  </div><div class="line">Math.acos()：返回参数的反余弦（弧度值）  </div><div class="line">Math.atan()：返回参数的反正切（弧度值）</div></pre></td></tr></table></figure>
<p><strong>3.6 JSON对象</strong></p>
<p><strong>（1）方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JSON.stringify()   </div><div class="line">//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。</div><div class="line">//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。</div><div class="line">//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</div><div class="line"></div><div class="line">JSON.parse()   //用于将JSON字符串转化成对象。</div></pre></td></tr></table></figure>
<p><strong>3.7 console对象</strong></p>
<p><strong>（1）方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">console.log(text,text2,...)   //用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。</div><div class="line">console.info()   //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</div><div class="line">console.debug()  //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</div><div class="line">console.warn()  //输出信息时，在最前面加一个黄色三角，表示警告；</div><div class="line">console.error()  //输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈</div><div class="line">console.table()  //可以将复合类型的数据转为表格显示。</div><div class="line">console.count()  //用于计数，输出它被调用了多少次。</div><div class="line">console.dir()    //用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</div><div class="line">console.dirxml()  //用于以目录树的形式，显示DOM节点。</div><div class="line">console.assert()  //接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</div><div class="line"></div><div class="line">//这两个方法用于计时，可以算出一个操作所花费的准确时间。</div><div class="line">console.time()</div><div class="line">console.timeEnd()</div><div class="line">//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。</div><div class="line"></div><div class="line">console.profile()  //用来新建一个性能测试器（profile），它的参数是性能测试器的名字。</div><div class="line">console.profileEnd()  //用来结束正在运行的性能测试器。</div><div class="line"></div><div class="line">console.group()</div><div class="line">console.groupend()</div><div class="line">//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</div><div class="line">console.groupCollapsed()  //用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</div><div class="line"></div><div class="line">console.trace()  //显示当前执行的代码在堆栈中的调用路径。</div><div class="line">console.clear()  //用于清除当前控制台的所有输出，将光标回置到第一行。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在掘金上看到了这篇文章，感觉挺不错的，然后收集下来，以供以后进行查阅，再次感谢大神总结的API文档&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular directive</title>
    <link href="http://yoursite.com/2017/02/18/%E6%A1%86%E6%9E%B6/angular/angular%20Directives/"/>
    <id>http://yoursite.com/2017/02/18/框架/angular/angular Directives/</id>
    <published>2017-02-17T18:14:35.000Z</published>
    <updated>2017-03-12T01:42:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然间之前一个同事问我angular自定义指令是什么鬼，我也突然间蒙了，但是我也知道怎么用，就是表述不清楚了，所以这两天查了查google angular的API，本着不误人子弟的原则，我写下了这篇文章，希望也能帮到你</p>
<p>什么是指令呢？我们先看官方的说法</p>
<h5 id="What-are-Directives"><a href="#What-are-Directives" class="headerlink" title="What are Directives?"></a>What are Directives?</h5><p>At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS’s <strong>HTML compiler</strong> (<a href="https://docs.angularjs.org/api/ng/service/$compile" target="_blank" rel="external"><code>$compile</code></a>) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.</p>
<p>AngularJS comes with a set of these directives built-in, like <code>ngBind</code>, <code>ngModel</code>, and <code>ngClass</code>. Much like you create controllers and services, you can create your own directives for AngularJS to use. When AngularJS <a href="https://docs.angularjs.org/guide/bootstrap" target="_blank" rel="external">bootstraps</a> your application, the <a href="https://docs.angularjs.org/guide/compiler" target="_blank" rel="external">HTML compiler</a> traverses the DOM matching directives against the DOM elements.</p>
<p>在高的层面上讲，指令是DOM元素中的标记(例如一个属性，一个节点名，注释或者CSS类)，它告诉angularjs编译器去给这个元素附加一个指令的行为或者转换DOM元素和它的子元素。</p>
<p>Angularjs拥有一些内建的指令，像ngBind、ngModel和ngClass。非常类似于你创建自己的controller和service，你可以创建你自己的指令个angularjs使用，当angular初始化启动你的应用程序，html编译器将遍历你的DOM元素并且去匹配指令。</p>
<a id="more"></a>
<p>实例解析expander</p>
<p>实例解析accordion</p>
<p>指令的运行原理 compile和link</p>
<p><img src="/images/ng-link.png" alt="img"></p>
<h3 id="指令定义的基础"><a href="#指令定义的基础" class="headerlink" title="指令定义的基础"></a>指令定义的基础</h3><p>在Angular中，定义指令需要调用<code>directive</code>方法，该方法接收两个参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myapp'</span>, []);</div><div class="line">app.directive(name, fn);</div></pre></td></tr></table></figure>
<p>在定义的模块上使用<code>directive</code>方法创建一个指令，name为指令的名称，fn是一个函数，它将返回一个对象，在这个对象中，定义了这个指令的全部行为</p>
<h4 id="restrict匹配模式"><a href="#restrict匹配模式" class="headerlink" title="restrict匹配模式"></a>restrict匹配模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;ts-hello&gt;&lt;/ts-hello&gt;</div><div class="line">  &lt;div ts-hello&gt;&lt;/div&gt;</div><div class="line">  &lt;div class="ts-hello"&gt;&lt;/div&gt;</div><div class="line">  &lt;div data-ts-hello&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> app = angular.module(<span class="string">'myapp'</span>, []);</div><div class="line">  app.directive(<span class="string">'tsHello'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'EAC'</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'&lt;h3&gt;Hello, Angular!&lt;/h3&gt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/ng-restrict.png" alt="img"></p>
<hr>
<h3 id="设置指令对象的基础属性"><a href="#设置指令对象的基础属性" class="headerlink" title="设置指令对象的基础属性"></a>设置指令对象的基础属性</h3><p>####templateUrl:它的属性值是一个URL地址，该地址指向一个模板页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line"></div><div class="line"><span class="comment">//注射器加载完所有模块时，此方法执行一次</span></div><div class="line">myModule.run(<span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>)</span>&#123;</div><div class="line">  <span class="comment">//把内容缓存起来</span></div><div class="line">	$templateCache.put(<span class="string">"hello.html"</span>,<span class="string">"&lt;div&gt;Hello everyone!!!!!!&lt;/div&gt;"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myModule.directive(<span class="string">"hello"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'AECM'</span>,</div><div class="line">      <span class="comment">//把缓存取出来</span></div><div class="line">        template: $templateCache.get(<span class="string">"hello.html"</span>),</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>####replace开启的话，就会把我们模板里面的内容替换掉</p>
<p>它的属性值是布尔类型，当该属性值为true时，表示用模板中的内容替换指令标记，否则则不替换，直接显示指令标记，默认为false</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hello</span>&gt;</span></div><div class="line">          //当我们的页面启动后就会把这段内容替换掉</div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是指令内部的内容。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"replace.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.directive(<span class="string">"hello"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">restrict</span>:<span class="string">"AE"</span>,</div><div class="line">    	<span class="attr">template</span>:<span class="string">"&lt;div&gt;Hello everyone!&lt;/div&gt;"</span>,</div><div class="line">    	<span class="attr">replace</span>:<span class="literal">true</span></div><div class="line">    &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>###Angular指令对象的重要属性</p>
<h4 id="ng-transclude"><a href="#ng-transclude" class="headerlink" title="ng-transclude"></a>ng-transclude</h4><p>只有这个指令可以使用多个指令之间的多层嵌套，所以很重要</p>
<p>属性的值是布尔值，默认为false，表示不开启，如果设置为true，则开启该属性，当开启后，则可以在模板中通过<code>ng-transclude</code>方式替换指令元素中的内容</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hello</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是指令内部的内容。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"transclude.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.directive(<span class="string">"hello"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">restrict</span>:<span class="string">"AE"</span>,</div><div class="line">    	<span class="attr">transclude</span>:<span class="literal">true</span>,</div><div class="line">    	<span class="comment">// ng-transclude告诉angular被替换的内容填充到哪里去</span></div><div class="line">    	template:<span class="string">"&lt;div&gt;Hello everyone!&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;"</span></div><div class="line">    &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><p>取属性的方式添加监听事件，以及实现指令与多个控制器之间进行交互</p>
<p>指令对象中的<code>link</code>属性的值是一个函数，在该函数中可以操控DOM元素对象，包括绑定元素的各类事件，定义事件触发时执行的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">link: function(scope, element, attrs) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>link</code>函数包含3个主要的参数：</p>
<ul>
<li><code>scope</code>参数表示指令所在的作用域</li>
<li><code>element</code>参数表示指令中的元素，改元素可以通过Angular内部封装的jqLite框架进行调用</li>
<li><code>attrs</code>参数表示指令元素的属性集合通过这个参数可以获取元素中的各类属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">loader</span> <span class="attr">howToLoad</span>=<span class="string">"loadData()"</span>&gt;</span>滑动加载<span class="tag">&lt;/<span class="name">loader</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl2"</span>&gt;</span></div><div class="line">          //定义属性这样让我们的directive去调用</div><div class="line">			<span class="tag">&lt;<span class="name">loader</span> <span class="attr">howToLoad</span>=<span class="string">"loadData2()"</span>&gt;</span>滑动加载<span class="tag">&lt;/<span class="name">loader</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Directive&amp;Controller.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.loadData=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"加载数据中..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;]);</div><div class="line">myModule.controller(<span class="string">'MyCtrl2'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">    $scope.loadData2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"加载数据中...22222"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;]);</div><div class="line">myModule.directive(<span class="string">"loader"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">restrict</span>:<span class="string">"AE"</span>,</div><div class="line">    	<span class="attr">link</span>:<span class="function"><span class="keyword">function</span>(<span class="params">scope,element,attrs</span>)</span>&#123;</div><div class="line">          <span class="comment">//这里和jquery一样，给这个loader directive元素添加一个mouseenter事件，然后去调用上面的函数</span></div><div class="line">    		element.bind(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    			<span class="comment">//scope.loadData();</span></div><div class="line">              <span class="comment">//强制刷新以及调用上面的函数</span></div><div class="line">    			<span class="comment">// scope.$apply("loadData()");</span></div><div class="line">    			<span class="comment">// 注意这里的坑，howToLoad会被转换成小写的howtoload</span></div><div class="line">                <span class="comment">//给我们的页面上的指令加了属性，然后通过不同的属性来调用不同函数，这样子也实现了指令</span></div><div class="line">                <span class="comment">//复用，指令就是为了复用，就可以在不同的控制器中去复用指令，以及实现数据交互</span></div><div class="line">    			scope.$apply(attrs.howtoload);</div><div class="line">    		&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>link实现多个指令之间的通信</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-3.0.0/css/bootstrap.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Directive&amp;Directive.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">superman</span> <span class="attr">strength</span>&gt;</span>动感超人---力量<span class="tag">&lt;/<span class="name">superman</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">superman</span> <span class="attr">strength</span> <span class="attr">speed</span>&gt;</span>动感超人2---力量+敏捷<span class="tag">&lt;/<span class="name">superman</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">superman</span> <span class="attr">strength</span> <span class="attr">speed</span> <span class="attr">light</span>&gt;</span>动感超人3---力量+敏捷+发光<span class="tag">&lt;/<span class="name">superman</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.directive(<span class="string">"superman"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">//创建独立作用域，下面一个例子会讲解独立scope</span></div><div class="line">        scope: &#123;&#125;,</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'AE'</span>,</div><div class="line">      <span class="comment">//指令内部的controller，作用是我们的指令暴露出public方法供外部使用</span></div><div class="line">        controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">            $scope.abilities = [];</div><div class="line">            <span class="keyword">this</span>.addStrength = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                $scope.abilities.push(<span class="string">"strength"</span>);</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">this</span>.addSpeed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                $scope.abilities.push(<span class="string">"speed"</span>);</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">this</span>.addLight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                $scope.abilities.push(<span class="string">"light"</span>);</div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">      <span class="comment">//link是指令内部的一些方法</span></div><div class="line">        link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">          <span class="comment">//给我们的元素增加classname</span></div><div class="line">            element.addClass(<span class="string">'btn btn-primary'</span>);</div><div class="line">          <span class="comment">//绑定事件</span></div><div class="line">            element.bind(<span class="string">"mouseenter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(scope.abilities);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">myModule.directive(<span class="string">"strength"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">//require是说strength指令依赖于superman这个指令</span></div><div class="line">        <span class="built_in">require</span>: <span class="string">'^superman'</span>,</div><div class="line">      <span class="comment">//当有了依赖之后，我们就可以注入第四个参数了，这样子我们就可以访问到supermanCtrl里面暴露出来的公用方法了</span></div><div class="line">        link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, supermanCtrl</span>) </span>&#123;</div><div class="line">            supermanCtrl.addStrength();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">myModule.directive(<span class="string">"speed"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">require</span>: <span class="string">'^superman'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, supermanCtrl</span>) </span>&#123;</div><div class="line">            supermanCtrl.addSpeed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">myModule.directive(<span class="string">"light"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">require</span>: <span class="string">'^superman'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, supermanCtrl</span>) </span>&#123;</div><div class="line">            supermanCtrl.addLight();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>####独立scope</p>
<p>在Angular指令对象中，<code>scope</code>属性使用频率很高，它的值包含两种类型，一种是布尔值，另一类是JSON对象</p>
<p>#####scope属性是布尔值</p>
<p>使用<code>scope</code>属性自定义指令时，默认是布尔类型，初始值为false。在这种情况下，指令中的作用域就是指令元素所在的作用域。我们将指令中的作用域称为子作用域，把指令元素所在作用域称为父作用域，当<code>scope</code>为<code>false</code>时，子作用域和父作用域完全相同，一方变化，则另一方也会自动发生变化</p>
<p>当<code>scope</code>为<code>true</code>时，则表示子作用域是独立创建的，父作用域中内容的改变会影响子作用域，但子作用域的内容发生变化，并不会修改父作用域中的内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;script type="text/ng-template" id="tpl"&gt;</div><div class="line">  &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</div><div class="line">  &lt;button ng-transclude&gt;&lt;/button&gt;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div&gt;</div><div class="line">  &lt;input type="text" ng-model="message" placeholder="请输入提示内容"&gt;</div><div class="line">  &lt;ts-message&gt;固定&lt;/ts-message&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  var app = angular.module('myapp', []);</div><div class="line">  app.directive('tsMessage', function () &#123;</div><div class="line">    return &#123;</div><div class="line">      restrict: 'EAC',</div><div class="line">      templateUrl: 'tpl',</div><div class="line">      transclude: true,</div><div class="line">      scope: true,</div><div class="line">      link: function (scope, element, attrs) &#123;</div><div class="line">        element.bind('click', function () &#123;</div><div class="line">          scope.$apply(function () &#123;</div><div class="line">            scope.message = '这是单击后的值';</div><div class="line">          &#125;)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>第二个例子</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line">  父亲: &#123;&#123;name&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  app.controller(<span class="string">'myCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.name = <span class="string">'leifeng'</span>;</div><div class="line">  &#125;]);</div><div class="line">  app.directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">      <span class="attr">scope</span>: <span class="literal">true</span>,    <span class="comment">//父作用域发生改变，子作用域会变化，子作用域的变化不会影响父作用域</span></div><div class="line">      template: <span class="string">'&lt;div&gt;儿子: &#123;&#123;name&#125;&#125;&lt;input ng-model="name"&gt;&lt;/div&gt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>#####scope属性是对象</p>
<p>除了将scope属性设置为布尔值之外，还可以设置成一个JSON对象，如果是对象，那么父作用域与子作用域是完全独立的，不存在任何关联</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.directive(&apos;myDirective&apos;, function () &#123;</div><div class="line">  return &#123;</div><div class="line">    resrict: &apos;EA&apos;,</div><div class="line">    scope: &#123;&#125;,  //父作用域与子作用域相互不影响，改变任意一方都不会改变另一方</div><div class="line">    template: //....</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这时，子作用域中如果需要添加属性，则可以通过<code>link</code>函数，在<code>scope</code>上添加，如果子作用域需要与调用父作用域的属性和方法，则需要在这个JSON对象中添加绑定策略</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-3.0.0/css/bootstrap.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"IsolateScope.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.directive(<span class="string">"hello"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'AE'</span>,</div><div class="line">       <span class="comment">// scope:&#123;&#125;,// 如果不加这个参数的话，我们页面中所有的指令都会同时发生改变互相影响，这显然是不是我们想要的</span></div><div class="line">        template: <span class="string">'&lt;div&gt;&lt;input type="text" ng-model="userName"/&gt;&#123;&#123;userName&#125;&#125;&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="scope绑定策略"><a href="#scope绑定策略" class="headerlink" title="scope绑定策略"></a>scope绑定策略</h5><p>在JSON对象中添加的有3种绑定策略，分别是<code>@</code>、<code>=</code>和<code>&amp;</code></p>
<p><img src="/images/ng-scope.png" alt="img"></p>
<p>@绑定</p>
<p>如果父作用域的属性内容修改了，子作用域对应的属性内容也会随之修改，而如果子作用域属性内容修改了，是不会影响父作用域对应的属性内容的。</p>
<p>案例一</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line">  父亲: &#123;&#123;name&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-directive</span> <span class="attr">name</span>=<span class="string">"&#123;&#123;name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  app.controller(<span class="string">'myCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;]);</div><div class="line">  app.directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">      <span class="attr">scope</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'@'</span>  <span class="comment">//指令作用域中变量与父作用域中一致，直接使用@绑定</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'&lt;div&gt;儿子: &#123;&#123;name&#125;&#125;&lt;input ng-model="name"&gt;&lt;/div&gt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>案例二</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-3.0.0/css/bootstrap.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl"</span>&gt;</span></div><div class="line">          //需要注意的是@绑定传递的是字符串，而不是对象</div><div class="line">			<span class="tag">&lt;<span class="name">drink</span> <span class="attr">flavor</span>=<span class="string">"&#123;&#123;ctrlFlavor&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">drink</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ScopeAt.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  <span class="comment">//控制器上面加个一个属性</span></div><div class="line">	$scope.ctrlFlavor=<span class="string">"百威"</span>;</div><div class="line">&#125;])</div><div class="line">myModule.directive(<span class="string">"drink"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">restrict</span>:<span class="string">'AE'</span>,</div><div class="line">        <span class="attr">scope</span>:&#123;</div><div class="line">          <span class="comment">//而这种方式angular则会帮我们自动绑定数据</span></div><div class="line">        	flavor:<span class="string">'@'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>:<span class="string">"&lt;div&gt;&#123;&#123;flavor&#125;&#125;&lt;/div&gt;"</span></div><div class="line">        <span class="comment">// ,</span></div><div class="line">      <span class="comment">//下面这种方式指定我们的flavor的数据是我们的控制器中的数据</span></div><div class="line">        <span class="comment">// link:function(scope,element,attrs)&#123;</span></div><div class="line">        <span class="comment">// 	scope.flavor=attrs.flavor;</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ScopeEqual绑定 进行双向数据绑定，也就是我们控制器与指令之间进行双向的数据绑定</p>
<p><code>=绑定</code>的功能是创建一个父作用域与子作用域可以同时共享的属性，即父作用域修改了该属性，子作用域也随之改变，反之亦然。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-3.0.0/css/bootstrap.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl"</span>&gt;</span></div><div class="line">			Ctrl:</div><div class="line">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">          //这儿是我们控制器中的ctrlFlavor</div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"ctrlFlavor"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">			Directive:</div><div class="line">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">          //这儿展示我们指令中的flavor</div><div class="line">			<span class="tag">&lt;<span class="name">drink</span> <span class="attr">flavor</span>=<span class="string">"ctrlFlavor"</span>&gt;</span><span class="tag">&lt;/<span class="name">drink</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ScopeEqual.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, []);</div><div class="line">myModule.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.ctrlFlavor=<span class="string">"百威"</span>;</div><div class="line">&#125;])</div><div class="line">myModule.directive(<span class="string">"drink"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">restrict</span>:<span class="string">'AE'</span>,</div><div class="line">        <span class="attr">scope</span>:&#123;</div><div class="line">          <span class="comment">//用=绑定就可以只要改变我们指令中的flavor就可以改变我们的控制器中的ctrlFlavor，反之我们改变控制器中的也可以改变指令中的</span></div><div class="line">        	flavor:<span class="string">'='</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>:<span class="string">'&lt;input type="text" ng-model="flavor"/&gt;'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&amp;scope  实现控制器与指令之间的交互，比<code>link</code>要方便,传递一个来自父scope的函数，稍后调用</p>
<p><code>&amp;绑定</code>的功能可以在独立的子作用域中直接调用父作用域的方法，在调用时可以向函数传递参数。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-3.0.0/css/bootstrap.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl"</span>&gt;</span></div><div class="line">          //这里我们传递的参数是对象，跟上面说的@scope不同</div><div class="line">			<span class="tag">&lt;<span class="name">greeting</span> <span class="attr">greet</span>=<span class="string">"sayHello(name)"</span>&gt;</span><span class="tag">&lt;/<span class="name">greeting</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">greeting</span> <span class="attr">greet</span>=<span class="string">"sayHello(name)"</span>&gt;</span><span class="tag">&lt;/<span class="name">greeting</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">greeting</span> <span class="attr">greet</span>=<span class="string">"sayHello(name)"</span>&gt;</span><span class="tag">&lt;/<span class="name">greeting</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ScopeAnd.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"MyModule"</span>, [] ;</div><div class="line">myModule.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  <span class="comment">//暴露出一个方法就可以被我们的指令进行调用</span></div><div class="line">	$scope.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		alert(<span class="string">"Hello "</span>+name);</div><div class="line">	&#125;</div><div class="line">&#125;])</div><div class="line">myModule.directive(<span class="string">"greeting"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">restrict</span>:<span class="string">'AE'</span>,</div><div class="line">        <span class="attr">scope</span>:&#123;</div><div class="line">        	<span class="attr">greet</span>:<span class="string">'&amp;'</span></div><div class="line">        &#125;,</div><div class="line">      <span class="comment">//在下面我们添加一个方法进行调用我们上面的控制器暴露出来的sayHello方法</span></div><div class="line">      <span class="comment">//传递参数的形式是对象的形式</span></div><div class="line">        template:<span class="string">'&lt;input type="text" ng-model="userName" /&gt;&lt;br/&gt;'</span>+</div><div class="line">        		 <span class="string">'&lt;button class="btn btn-default" ng-click="greet(&#123;name:userName&#125;)"&gt;Greeting&lt;/button&gt;&lt;br/&gt;'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Angular指令对象的require和controller属性"><a href="#Angular指令对象的require和controller属性" class="headerlink" title="Angular指令对象的require和controller属性"></a>Angular指令对象的require和controller属性</h3><p><code>require</code>和<code>controller</code>两个属性常用于多个自定义指令元素嵌套时，即当一个子元素指令需要与父元素指令通信时，就需要使用这两个属性</p>
<h4 id="require和controller属性的概念"><a href="#require和controller属性的概念" class="headerlink" title="require和controller属性的概念"></a>require和controller属性的概念</h4><p><code>require</code>属性在创建子元素指令时添加，它的属性值用于描述与父元素指令通信时的方式，如<code>^</code>符号表示向外层寻找指定名称的指令，<code>?</code>符号表示即使没有找到，也不会出现异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require: &quot;^?myDirective&quot;</div></pre></td></tr></table></figure>
<p><code>controller</code>属性值是一个构造函数，在创建父元素指令时添加，并可以在函数中创建多个属性或方法。在添加后，这些属性和方法都会被实例的对象所继承，而这个实例对象则是子元素指令中<code>link</code>函数的第4个参数</p>
<p>也就是说，当在子元素指令中添加了<code>require</code>属性，并通过属性值指定父元素指令的名称，那么就可以通过子元素指令中<code>link</code>函数的第4个参数来访问父元素指令中<code>controller</code>属性添加的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">controller: function () &#123;</div><div class="line">  this.a = function (childDirective) &#123;</div><div class="line">    // 方法a的函数体</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>controller</code>的属性值对应一个构造函数</li>
<li><code>this</code>代表父元素指令本身</li>
<li><code>a</code>表示构造函数中的一个任意的方法</li>
<li><code>childDirective</code>形参表示子元素指令中的<code>scope</code>对象</li>
</ul>
<p>html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--父元素指令--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ts-parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;ptip&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--子元素指令--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ts-child</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;ctip&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ts-child</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"click()"</span>&gt;</span>换位<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ts-parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>javascript:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">  app.directive(<span class="string">'tsParent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $compile, $http</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.addChild = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</div><div class="line">          $scope.ptip = <span class="string">'今天天气不错!'</span>;</div><div class="line">          $scope.click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $scope.tmp = $scope.ptip;</div><div class="line">            $scope.ptip = c.ctip;</div><div class="line">            c.ctip = $scope.tmp;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  app.directive(<span class="string">'tsChild'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">      <span class="comment">// 与父元素指令tsParent进行通信</span></div><div class="line">      <span class="built_in">require</span>: <span class="string">'^?tsParent'</span>,</div><div class="line">      <span class="comment">// 第4个参数表示父元素指令本身，可以调用定义在其上的方法</span></div><div class="line">      link: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, ctrl</span>) </span>&#123;</div><div class="line">        scope.ctip = <span class="string">'气温正好18摄氏度'</span>;</div><div class="line">        ctrl.addChild(scope);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>angular内置指令在我用的1.3.11中共计63个</p>
<p><img src="/images/ng-zhiling.png" alt="img"></p>
<h5 id="form指令"><a href="#form指令" class="headerlink" title="form指令"></a>form指令</h5><p><img src="/images/ng-form.png" alt="img"></p>
<p>FormBasic</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">'TestFormModule'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"FormBasic.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"myForm"</span> <span class="attr">ng-submit</span>=<span class="string">"save()"</span> <span class="attr">ng-controller</span>=<span class="string">"TestFormModule"</span>&gt;</span></div><div class="line">          //required属性就是我们的angular帮我们自动校验</div><div class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"user.userName"</span> <span class="attr">required</span>/&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">ng-model</span>=<span class="string">"user.password"</span> <span class="attr">required</span>/&gt;</span></div><div class="line">          //ng-disabled把它绑定到myForm.$invalid上就可以判断我们的按钮是否可用的状态</div><div class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">ng-disabled</span>=<span class="string">"myForm.$invalid"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> appModule = angular.module(<span class="string">'TestFormModule'</span>, []);</div><div class="line">appModule.controller(<span class="string">"TestFormModule"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.user=&#123;</div><div class="line">		<span class="attr">userName</span>:<span class="string">'damoqiongqiu'</span>,</div><div class="line">		<span class="attr">password</span>:<span class="string">''</span></div><div class="line">	&#125;;</div><div class="line">	$scope.save=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="string">"保存数据!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>formadv1 下面是复杂一点的表单</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"FormAdv1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Controller"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">class</span>=<span class="string">"css-form"</span> <span class="attr">novalidate</span>&gt;</span></div><div class="line">				Name:</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"user.name"</span> <span class="attr">name</span>=<span class="string">"uName"</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">				E-mail:</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">ng-model</span>=<span class="string">"user.email"</span> <span class="attr">name</span>=<span class="string">"uEmail"</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">              //校验我们的Email是否合法form.uEmail.$dirty &amp;&amp; form.uEmail.$invalid</div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"form.uEmail.$dirty &amp;&amp; form.uEmail.$invalid"</span>&gt;</span></div><div class="line">					Invalid:</div><div class="line">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"form.uEmail.$error.required"</span>&gt;</span>Tell us your email.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"form.uEmail.$error.email"</span>&gt;</span>This is not a valid email.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				Gender:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"user.gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> /&gt;</span></div><div class="line">				male</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"user.gender"</span> <span class="attr">value</span>=<span class="string">"female"</span> /&gt;</span></div><div class="line">				female<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"user.agree"</span> <span class="attr">name</span>=<span class="string">"userAgree"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">				I agree:</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-show</span>=<span class="string">"user.agree"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"user.agreeSign"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"!user.agree || !user.agreeSign"</span>&gt;</span></div><div class="line">					Please agree and sign.</div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"reset()"</span> <span class="attr">ng-disabled</span>=<span class="string">"isUnchanged(user)"</span>&gt;</span></div><div class="line">					RESET</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"update(user)"</span> <span class="attr">ng-disabled</span>=<span class="string">"form.$invalid || isUnchanged(user)"</span>&gt;</span></div><div class="line">					SAVE</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Controller</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">	$scope.master = &#123;&#125;;</div><div class="line"></div><div class="line">	$scope.update = <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">		$scope.master = angular.copy(user);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	$scope.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$scope.user = angular.copy($scope.master);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	$scope.isUnchanged = <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> angular.equals(user, $scope.master);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	$scope.reset();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面说一个比较酷的功能</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"form-example2"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"FormCustom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			div[contentEditable] &#123;</div><div class="line">				cursor: pointer;</div><div class="line">				background-color: #D0D0D0;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          //开启contentEditable可以让我们的div有input的功能</div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">contentEditable</span>=<span class="string">"true"</span> <span class="attr">ng-model</span>=<span class="string">"content"</span> <span class="attr">title</span>=<span class="string">"Click to edit"</span>&gt;</span>Some<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">pre</span>&gt;</span>model = &#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'form-example2'</span>, []).directive(<span class="string">'contenteditable'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">require</span> : <span class="string">'ngModel'</span>,</div><div class="line">		<span class="attr">link</span> : <span class="function"><span class="keyword">function</span>(<span class="params">scope, elm, attrs, ctrl</span>) </span>&#123;</div><div class="line">			<span class="comment">// view -&gt; model</span></div><div class="line">			elm.bind(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					ctrl.$setViewValue(elm.text());</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			<span class="comment">// model -&gt; view</span></div><div class="line">			ctrl.$render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				elm.html(ctrl.$viewValue);</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			<span class="comment">// load init value from DOM</span></div><div class="line">			ctrl.$setViewValue(elm.html());</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><img src="/images/expander.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">'expanderModule'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"ExpanderSimple.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ExpanderSimple.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">'SomeController'</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">expander</span> <span class="attr">class</span>=<span class="string">'expander'</span> <span class="attr">expander-title</span>=<span class="string">'title'</span>&gt;</span></div><div class="line">				&#123;&#123;text&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">expander</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expanderModule=angular.module(<span class="string">'expanderModule'</span>, []);</div><div class="line">expanderModule.directive(<span class="string">'expander'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">//这里我们的匹配模式定义的是也可以用元素也可以用属性</span></div><div class="line">		restrict : <span class="string">'EA'</span>,</div><div class="line">      <span class="comment">// 替换</span></div><div class="line">		replace : <span class="literal">true</span>,</div><div class="line">      <span class="comment">//内部的内容是可以变换的</span></div><div class="line">		transclude : <span class="literal">true</span>,</div><div class="line">		<span class="attr">scope</span> : &#123;</div><div class="line">          <span class="comment">//用=号进行scope双向数据绑定</span></div><div class="line">			title : <span class="string">'=expanderTitle'</span></div><div class="line">		&#125;,</div><div class="line">      <span class="comment">//ng-click="toggle()这里的click只能调用我们内部的toggle</span></div><div class="line">		template : <span class="string">'&lt;div&gt;'</span></div><div class="line">				 + <span class="string">'&lt;div class="title" ng-click="toggle()"&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span></div><div class="line">				 + <span class="string">'&lt;div class="body" ng-show="showMe" ng-transclude&gt;&lt;/div&gt;'</span></div><div class="line">				 + <span class="string">'&lt;/div&gt;'</span>,</div><div class="line">		<span class="attr">link</span> : <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">			scope.showMe = <span class="literal">false</span>;</div><div class="line">          <span class="comment">//这里我们定义的toggle只能在指令内部进行调用</span></div><div class="line">			scope.toggle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				scope.showMe = !scope.showMe;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">expanderModule.controller(<span class="string">'SomeController'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.title = <span class="string">'点击展开'</span>;</div><div class="line">	$scope.text = <span class="string">'这里是内部的内容。'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.expander</span> &#123;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">	<span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.expander</span>&gt;<span class="selector-class">.title</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: black;</div><div class="line">	<span class="attribute">color</span>: white;</div><div class="line">	<span class="attribute">padding</span>: .<span class="number">1em</span> .<span class="number">3em</span>;</div><div class="line">	<span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.expander</span>&gt;<span class="selector-class">.body</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: .<span class="number">1em</span> .<span class="number">3em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来一个</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"expanderModule"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"Accordion.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Accordion.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">'SomeController'</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">accordion</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">expander</span> <span class="attr">class</span>=<span class="string">'expander'</span> <span class="attr">ng-repeat</span>=<span class="string">'expander in expanders'</span> <span class="attr">expander-title</span>=<span class="string">'expander.title'</span>&gt;</span></div><div class="line">				&#123;&#123;expander.text&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">expander</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">accordion</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expModule=angular.module(<span class="string">'expanderModule'</span>,[])</div><div class="line">expModule.directive(<span class="string">'accordion'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">restrict</span> : <span class="string">'EA'</span>,</div><div class="line">		<span class="attr">replace</span> : <span class="literal">true</span>,</div><div class="line">		<span class="attr">transclude</span> : <span class="literal">true</span>,</div><div class="line">		<span class="attr">template</span> : <span class="string">'&lt;div ng-transclude&gt;&lt;/div&gt;'</span>,</div><div class="line">      <span class="comment">//对外暴露方法</span></div><div class="line">		controller : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> expanders = [];</div><div class="line">			<span class="keyword">this</span>.gotOpened = <span class="function"><span class="keyword">function</span>(<span class="params">selectedExpander</span>) </span>&#123;</div><div class="line">				angular.forEach(expanders, <span class="function"><span class="keyword">function</span>(<span class="params">expander</span>) </span>&#123;</div><div class="line">					<span class="keyword">if</span> (selectedExpander != expander) &#123;</div><div class="line">						expander.showMe = <span class="literal">false</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.addExpander = <span class="function"><span class="keyword">function</span>(<span class="params">expander</span>) </span>&#123;</div><div class="line">				expanders.push(expander);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expModule.directive(<span class="string">'expander'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">restrict</span> : <span class="string">'EA'</span>,</div><div class="line">		<span class="attr">replace</span> : <span class="literal">true</span>,</div><div class="line">		<span class="attr">transclude</span> : <span class="literal">true</span>,</div><div class="line">      <span class="comment">//依赖于accordion指令</span></div><div class="line">		<span class="built_in">require</span> : <span class="string">'^?accordion'</span>,</div><div class="line">		<span class="attr">scope</span> : &#123;</div><div class="line">			<span class="attr">title</span> : <span class="string">'=expanderTitle'</span></div><div class="line">		&#125;,</div><div class="line">		<span class="attr">template</span> : <span class="string">'&lt;div&gt;'</span></div><div class="line">				  + <span class="string">'&lt;div class="title" ng-click="toggle()"&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span></div><div class="line">				  + <span class="string">'&lt;div class="body" ng-show="showMe" ng-transclude&gt;&lt;/div&gt;'</span></div><div class="line">				  + <span class="string">'&lt;/div&gt;'</span>,</div><div class="line">		<span class="attr">link</span> : <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, accordionController</span>) </span>&#123;</div><div class="line">			scope.showMe = <span class="literal">false</span>;</div><div class="line">			accordionController.addExpander(scope);</div><div class="line">			scope.toggle = <span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				scope.showMe = !scope.showMe;</div><div class="line">				accordionController.gotOpened(scope);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expModule.controller(<span class="string">"SomeController"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">	$scope.expanders = [&#123;</div><div class="line">		<span class="attr">title</span> : <span class="string">'Click me to expand'</span>,</div><div class="line">		<span class="attr">text</span> : <span class="string">'Hi there folks, I am the content that was hidden but is now shown.'</span></div><div class="line">	&#125;, &#123;</div><div class="line">		<span class="attr">title</span> : <span class="string">'Click this'</span>,</div><div class="line">		<span class="attr">text</span> : <span class="string">'I am even better text than you have seen previously'</span></div><div class="line">	&#125;, &#123;</div><div class="line">		<span class="attr">title</span> : <span class="string">'Test'</span>,</div><div class="line">		<span class="attr">text</span> : <span class="string">'test'</span></div><div class="line">	&#125;];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.expander</span> &#123;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">	<span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.expander</span>&gt;<span class="selector-class">.title</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: black;</div><div class="line">	<span class="attribute">color</span>: white;</div><div class="line">	<span class="attribute">padding</span>: .<span class="number">1em</span> .<span class="number">3em</span>;</div><div class="line">	<span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.expander</span>&gt;<span class="selector-class">.body</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: .<span class="number">1em</span> .<span class="number">3em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到没，其实编写自定义指令还是比较困难的，所以我们可以去引入一些第三方的指令库</p>
<p><img src="/images/angular-ui.png" alt="img"></p>
<p>这样子，就可以极大地方便实现我们想要的功能了</p>
<p>再来个难一点的自定义指令</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"MyModule"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"framework/bootstrap-3.0.0/css/bootstrap.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"common.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/angular-1.3.0.14/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"framework/ui-bootstrap-tpls-0.11.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Accordion-ngui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"AccordionDemoCtrl"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-md"</span> <span class="attr">ng-click</span>=<span class="string">"status.open = !status.open"</span>&gt;</span>Toggle last panel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-md"</span> <span class="attr">ng-click</span>=<span class="string">"status.isFirstDisabled = ! status.isFirstDisabled"</span>&gt;</span>Enable / Disable first panel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"oneAtATime"</span>&gt;</span>Open only one at a time</div><div class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">accordion</span> <span class="attr">close-others</span>=<span class="string">"oneAtATime"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">accordion-group</span> <span class="attr">heading</span>=<span class="string">"Static Header, initially expanded"</span> <span class="attr">is-open</span>=<span class="string">"status.isFirstOpen"</span> <span class="attr">is-disabled</span>=<span class="string">"status.isFirstDisabled"</span>&gt;</span></div><div class="line">                            This content is straight in the template.</div><div class="line">                        <span class="tag">&lt;/<span class="name">accordion-group</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">accordion-group</span> <span class="attr">heading</span>=<span class="string">"&#123;&#123;group.title&#125;&#125;"</span> <span class="attr">ng-repeat</span>=<span class="string">"group in groups"</span>&gt;</span></div><div class="line">                            &#123;&#123;group.content&#125;&#125;</div><div class="line">                        <span class="tag">&lt;/<span class="name">accordion-group</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">accordion-group</span> <span class="attr">heading</span>=<span class="string">"Dynamic Body Content"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>The body of the accordion group grows to fit the contents<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-md"</span> <span class="attr">ng-click</span>=<span class="string">"addItem()"</span>&gt;</span>Add Item<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">accordion-group</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">accordion-group</span> <span class="attr">is-open</span>=<span class="string">"status.open"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">accordion-heading</span>&gt;</span></div><div class="line">                                I can have markup, too! <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"pull-right glyphicon"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;'glyphicon-chevron-down': status.open, 'glyphicon-chevron-right': !status.open&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">accordion-heading</span>&gt;</span></div><div class="line">                            This is just some content to illustrate fancy headings.</div><div class="line">                        <span class="tag">&lt;/<span class="name">accordion-group</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">accordion</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">'MyModule'</span>, [<span class="string">'ui.bootstrap'</span>]);</div><div class="line">myModule.controller(<span class="string">'AccordionDemoCtrl'</span>, [<span class="string">'$scope'</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line"></div><div class="line">        $scope.oneAtATime = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        $scope.groups = [&#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'Dynamic Group Header - 1'</span>,</div><div class="line">            <span class="attr">content</span>: <span class="string">'Dynamic Group Body - 1'</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'Dynamic Group Header - 2'</span>,</div><div class="line">            <span class="attr">content</span>: <span class="string">'Dynamic Group Body - 2'</span></div><div class="line">        &#125;];</div><div class="line"></div><div class="line">        $scope.items = [<span class="string">'Item 1'</span>, <span class="string">'Item 2'</span>, <span class="string">'Item 3'</span>];</div><div class="line"></div><div class="line">        $scope.addItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> newItemNo = $scope.items.length + <span class="number">1</span>;</div><div class="line">            $scope.items.push(<span class="string">'Item '</span> + newItemNo);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        $scope.status = &#123;</div><div class="line">            <span class="attr">isFirstOpen</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">isFirstDisabled</span>: <span class="literal">false</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然间之前一个同事问我angular自定义指令是什么鬼，我也突然间蒙了，但是我也知道怎么用，就是表述不清楚了，所以这两天查了查google angular的API，本着不误人子弟的原则，我写下了这篇文章，希望也能帮到你&lt;/p&gt;
&lt;p&gt;什么是指令呢？我们先看官方的说法&lt;/p&gt;
&lt;h5 id=&quot;What-are-Directives&quot;&gt;&lt;a href=&quot;#What-are-Directives&quot; class=&quot;headerlink&quot; title=&quot;What are Directives?&quot;&gt;&lt;/a&gt;What are Directives?&lt;/h5&gt;&lt;p&gt;At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS’s &lt;strong&gt;HTML compiler&lt;/strong&gt; (&lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.&lt;/p&gt;
&lt;p&gt;AngularJS comes with a set of these directives built-in, like &lt;code&gt;ngBind&lt;/code&gt;, &lt;code&gt;ngModel&lt;/code&gt;, and &lt;code&gt;ngClass&lt;/code&gt;. Much like you create controllers and services, you can create your own directives for AngularJS to use. When AngularJS &lt;a href=&quot;https://docs.angularjs.org/guide/bootstrap&quot;&gt;bootstraps&lt;/a&gt; your application, the &lt;a href=&quot;https://docs.angularjs.org/guide/compiler&quot;&gt;HTML compiler&lt;/a&gt; traverses the DOM matching directives against the DOM elements.&lt;/p&gt;
&lt;p&gt;在高的层面上讲，指令是DOM元素中的标记(例如一个属性，一个节点名，注释或者CSS类)，它告诉angularjs编译器去给这个元素附加一个指令的行为或者转换DOM元素和它的子元素。&lt;/p&gt;
&lt;p&gt;Angularjs拥有一些内建的指令，像ngBind、ngModel和ngClass。非常类似于你创建自己的controller和service，你可以创建你自己的指令个angularjs使用，当angular初始化启动你的应用程序，html编译器将遍历你的DOM元素并且去匹配指令。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AMD之require.js</title>
    <link href="http://yoursite.com/2017/01/26/%E8%A7%84%E8%8C%83/AMD%E4%B9%8Brequirejs/"/>
    <id>http://yoursite.com/2017/01/26/规范/AMD之requirejs/</id>
    <published>2017-01-25T18:09:23.000Z</published>
    <updated>2017-03-15T09:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下，这篇文章是之前我一个好友给我的文档，并非原创 如有侵权请联系 xuhongbo@outlook.com</p>
<p>还有就是如果问我为什么不分享CMD的，我感觉sea.js的中文社区很活跃，还有就是玉伯的sea.js中的issue中的解释也都很清晰 <a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">#547</a>其他的issue自己去找，都可以找得到的</p>
<a id="more"></a>
<h3 id="一：为什么使用require-js？"><a href="#一：为什么使用require-js？" class="headerlink" title="一：为什么使用require.js？"></a>一：为什么使用require.js？</h3><p>最早的时候，所有javascript代码都写在一个文件里，只要加载一个文件就够了，后来，代码越来越多，一个文件不够，必须分成多个文件，依次加载。<br><code>&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</code><br>这段代码依次加载多个js文件。<br>这样的写法有很大缺点，首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序。<br>require.js解决两大问题：<br>(1) 实现js文件的异步加载，避免网页失去响应。<br>(2) 管理模块之间的依赖性，便于代码的编写和维护。</p>
<h3 id="二：require-js加载？"><a href="#二：require-js加载？" class="headerlink" title="二：require.js加载？"></a>二：require.js加载？</h3><p>使用require.js的第一步，先去官网下载最新版本。<br>下载后，假定把它放在js子目录下，就可以加载了。<br><code>&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</code><br>加载这个文件，可能造成网页失去响应。解决办法有两个，一个是把脚本放在网页底部加载，另一个写成下面这样：<br><code>&lt;script src=&quot;js/require.js&quot; defer async=&quot;true&quot; &gt;&lt;/script&gt;</code><br>async属性表明这个文件需要异步加载，避免网页失去响应。但IE不支持这个属性，只支持defer，所以把defer也写上。<br>加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js,也放在js目录下面。那么，只需要写成下面这样就行了：<br><code>&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</code><br>data-main属性的作用是，指定网页程序的主模块。就是js下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写为main。</p>
<h3 id="三、主模块写法："><a href="#三、主模块写法：" class="headerlink" title="三、主模块写法："></a>三、主模块写法：</h3><p>主模块依赖与其他的模块，这时就要使用AMD规范定义的require()函数。<br>//main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'moduleA'</span>,<span class="string">'moduleB'</span>,<span class="string">'moduleC'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">moduleA,moduleB,moduleC</span>)</span>&#123;</div><div class="line">    <span class="comment">//code</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>require()函数接收两个参数，第一个参数是一个数组，表示依赖的模块，第二个参数是一个回调函数，当前面指定的模块都加载成功后，他会被调用，<br>加载的模块会以参数的形式传入该函数，从而在回调中可以使用这些模块。<br>require()异步加载moduleA,moduleB,moduleC,浏览器不会失去响应，他指定的回调函数，只有当前面的模块都加载成功后，才会运行，解决了依赖性的问题。<br>假定主模块依赖jquery,underscore和backbone这三个模块，main.js就可以这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'underscore'</span>,<span class="string">'backbone'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,_,Backbone</span>)</span>&#123;</div><div class="line">    <span class="comment">//code</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>require.js会先加载jquery,underscore和backbone,然后再运行回调函数，主模块的代码就写在回调函数中。</p>
<h3 id="四、模块的加载："><a href="#四、模块的加载：" class="headerlink" title="四、模块的加载："></a>四、模块的加载：</h3><p>默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。<br>使用require.config()方法，我们可以对模块的加载行为进行定义，require.config()就写在主模块（main.js）的头部，参数是一个对象，这个对象的paths属性指定各个模块的加载路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span>:&#123;</div><div class="line">        <span class="string">"jQuery"</span>:jquery.min<span class="string">""</span>,</div><div class="line">        <span class="string">"underscore"</span>:<span class="string">"underscore.min"</span>,</div><div class="line">        <span class="string">"backbone"</span>:<span class="string">"backbone.min"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录，如果这些模块在其他目录，比如js/lib目录，则有两种写法，一种是逐一指定路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span>:&#123;</div><div class="line">    <span class="string">"jquery"</span>:<span class="string">"lib/jquery.min"</span>,</div><div class="line">    <span class="string">"underscore"</span>: <span class="string">"lib/underscore.min"</span>,</div><div class="line">　　 <span class="string">"backbone"</span>: <span class="string">"lib/backbone.min"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>另一种是直接改变基目录（baseUrl）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>:<span class="string">"js/lib"</span>,</div><div class="line">    <span class="attr">paths</span>:&#123;</div><div class="line">        <span class="string">"jQuery"</span>:jquery.min<span class="string">""</span>,</div><div class="line">        <span class="string">"underscore"</span>:<span class="string">"underscore.min"</span>,</div><div class="line">        <span class="string">"backbone"</span>:<span class="string">"backbone.min"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果某个模块在另一个主机上，也可以直接指定他的网址，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span>:&#123;</div><div class="line">        <span class="string">"jquery"</span>:<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="五、AMD模块写法："><a href="#五、AMD模块写法：" class="headerlink" title="五、AMD模块写法："></a>五、AMD模块写法：</h3><p>require.js加载的模块，采用AMD规范，具体来说，就是模块必须采用特定的define()函数来定义，如果一个模块不依赖其他模块，那么可以直接定义在define()函数中。<br>假定现在有一个main.js文件，它定义了一个math模块，<br>//math.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> add=<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> x+y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">add</span>:add</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>加载方法如下：<br>//main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'math'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</div><div class="line">    alert(math.add(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　define([<span class="string">'myLib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myLib</span>)</span>&#123;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　myLib.doSomething();</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　<span class="attr">foo</span> : foo</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;);</div></pre></td></tr></table></figure></p>
<p>当require()函数加载上面这个模块的时候，就会先加载myLib.js文件。</p>
<h3 id="六、加载非规范的模块"><a href="#六、加载非规范的模块" class="headerlink" title="六、加载非规范的模块"></a>六、加载非规范的模块</h3><p>举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">	<span class="attr">shim</span>:&#123;</div><div class="line">	    <span class="string">'underscore'</span>:&#123;</div><div class="line">	        <span class="attr">exports</span>:<span class="string">'_'</span></div><div class="line">	    &#125;,</div><div class="line">	    <span class="string">'backbone'</span>:&#123;</div><div class="line">	        <span class="attr">deps</span>:[<span class="string">'underscore'</span>,<span class="string">'jquery'</span>],</div><div class="line">	        <span class="attr">exports</span>:<span class="string">'Backbone'</span></div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require.config()接受一个配置对象，这个对象除了有前面说的paths属性外，还有一个shim属性，专门来配置不兼容的模块，具体来说，每个模块要定义（1）exports值（输出的变量名），<br>表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。<br>比如，jquery可以这样定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shim:&#123;</div><div class="line">    <span class="string">'jquery.scroll'</span>:&#123;</div><div class="line">        <span class="attr">deps</span>:[<span class="string">'jquery'</span>],</div><div class="line">        <span class="attr">exports</span>:<span class="string">'jQuery.fn.scroll'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说一下，这篇文章是之前我一个好友给我的文档，并非原创 如有侵权请联系 xuhongbo@outlook.com&lt;/p&gt;
&lt;p&gt;还有就是如果问我为什么不分享CMD的，我感觉sea.js的中文社区很活跃，还有就是玉伯的sea.js中的issue中的解释也都很清晰 &lt;a href=&quot;https://github.com/seajs/seajs/issues/547&quot;&gt;#547&lt;/a&gt;其他的issue自己去找，都可以找得到的&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在github pages利用hexo快速搭建静态个人主页以及更改域名</title>
    <link href="http://yoursite.com/2017/01/18/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%9C%A8github%20pages%E5%88%A9%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2017/01/18/工具类/在github pages利用hexo快速搭建静态个人主页以及更改域名/</id>
    <published>2017-01-18T06:41:30.000Z</published>
    <updated>2017-03-03T02:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>github pages是一种提供免费托管静态页面的工具，可以免费作为我们的个人主页进行使用<br><a id="more"></a></p>
<p><a href="https://pages.github.com/" target="_blank" rel="external">官方地址</a></p>
<p>既然知道工具是做什么的了，下面我们就开始进行操作吧</p>
<h6 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h6><ol>
<li>首先你要确保的是你有一个github账号 <a href="https://github.com/" target="_blank" rel="external">传送门</a></li>
<li>还要确保你的电脑上有安装有git</li>
<li>最后还要有nodejs</li>
</ol>
<p>###在github上申请github pages空间<br>如果你已经看到这了  我已经默认你具备了上面的三个条件了！<br>如果你看了上面的介绍 你应该已经知道了怎么去申请这个空间了 但是为了避免有的人还是犯迷糊我下面还是讲一下怎么申请这个github pages空间吧，避免第一步就卡死这<br>登陆我们的github</p>
<p>点击这里新建一个仓储</p>
<p><img src="/images/github0.png" alt="img"></p>
<p>然后我们到了这个页面  我们按照我写的这个顺序进行操作</p>
<p><img src="/images/github2.png" alt="img">我们的仓储名格式是xxx.github.io<br>然后选择public<br>然后选择同意 就可以了</p>
<p>然后我们这个仓储就创建好了，图中的地址一定要记好，后面我们就有用了</p>
<p><img src="/images/github4.png" alt="img"></p>
<h3 id="安装hexo以及初始化"><a href="#安装hexo以及初始化" class="headerlink" title="安装hexo以及初始化"></a>安装hexo以及初始化</h3><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>首先你可以自己看看hexo的官网 <a href="https://hexo.io/" target="_blank" rel="external">传送门</a><br>首先在全局安装hexo的脚手架在cmd命令行中输入 <code>$ npm install hexo-cli -g</code> </p>
<p>等我们在全局安装好以后，找到你想放置你博客文件的目录 然后执行<code>hexo init blogName</code> 执行初始化操作</p>
<p><img src="/images/HEXO1.png" alt="img"></p>
<p>然后我们就在本地有了一个blog的文件夹，然后我们输入<code>cd blogName</code> 然后执行<code>hexo server</code>就可以在本地看到你的blog了，但是显然只是本地，你并不满足</p>
<p><img src="/images/HEXO2.png" alt="img"></p>
<p>看到这里  你是不是感觉很简单呀</p>
<p>对 就是这么简单</p>
<p>下面我们要做的就是往我们的git仓库里面进行push了</p>
<p>在hexo这个工具中我们可以直接配置我们的git地址</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">	//格式如下 https://账户:密码@你的仓储地址，也就是上面要你记住的地址</div><div class="line">  repo: https://账户:密码@github.com/xuhongbo/xuhongbo.github.io.git</div></pre></td></tr></table></figure>
<p>在你执行过上面那一步之后  你就离成功只剩一步了</p>
<p>下面我们再安装一个插件<code>npm install hexo-deployer-git --save</code>当然了，这个操作也是在我们的项目根目录中</p>
<p>然后就可以进行发布了<code>hexo generate --deploy</code></p>
<p><img src="/images/HEXO5.png" alt="img"></p>
<p>至此 你已经可以在你的github pages上看到你的个人博客了</p>
<p>如果你没有绑定个人域名的需求，就这样就不用往下面看了</p>
<h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>首先我们要有一个域名，如果没有的话，自己想办法哈，这个我是帮不了你</p>
<p>我在这里说一下怎么配dns和hexo中加入CNAME这两件事</p>
<p>在这里我拿万网作为例子</p>
<p>在dns解析中我们加入以下三条记录</p>
<p>分别是两条github pages ip 和一条你的github pages地址名如<code>xxx.github.io.</code>注意哈，最后的那个点千万别忘了</p>
<p><img src="/images/wanwang.png" alt="img"></p>
<p>对了下面我们最好还是在阿里云里面开了我们的免费的cdn加速会比较好</p>
<p><img src="/images/cdn.png" alt="img"></p>
<p>然后下面添加CNAME文件加入source文件夹中，然后在此文件中写入你的域名记住不带前面的http什么鬼的 只要 express.com 这一段然后再执行一次 <code>hexo generate --deploy</code>  </p>
<p><img src="/images/CNAME.png" alt="img"><img src="/images/CNAME2.png" alt="img"></p>
<p>嗯 所有工作已经做完了  你现在出去溜达一会  等个十来分钟  就可以访问了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github pages是一种提供免费托管静态页面的工具，可以免费作为我们的个人主页进行使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS运算符</title>
    <link href="http://yoursite.com/2017/01/08/JavaScript/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2017/01/08/JavaScript/运算符/</id>
    <published>2017-01-08T07:02:02.000Z</published>
    <updated>2017-03-02T14:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>程序中最简单的表达式就是，程序中的常量</li>
<li>变量名也是一种简单的表达式</li>
<li>复杂的表达式是由简单的表达式组成的</li>
<li>函数调用表达式是由函数对象的表达式和0个或多个参数表达式构成</li>
<li>可以使用运算符来将简单的表达式来组合成复杂的表达式<a id="more"></a>
<h2 id="原始表达式"><a href="#原始表达式" class="headerlink" title="原始表达式"></a>原始表达式</h2></li>
</ul>
<p>“原始表达式”，说简单点就是最简单的表达式，并且不再包含其他表达式   </p>
<blockquote>
<p>js中原始表达式有以下：</p>
<ul>
<li>常量</li>
<li>直接量</li>
<li>关键字</li>
<li>变量</li>
</ul>
<p>栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; //直接量          </div><div class="line">&gt; 1.23 // 数字直接量</div><div class="line">&gt; &quot;hello&quot; // 字符串直接量</div><div class="line">&gt; /pattern/ // 正则表达式直接</div><div class="line">&gt; //保留字   </div><div class="line">&gt; true</div><div class="line">&gt; false</div><div class="line">&gt; null // 返回空</div><div class="line">&gt; this // 返回“当前对象”</div><div class="line">&gt; //变量         </div><div class="line">&gt; i // 返回i的值</div><div class="line">&gt; sum // 返回sum的值</div><div class="line">&gt; undefined // undefined是全局变量，和null不同，不是一个关键字</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="对象和数组的初始化表达式"><a href="#对象和数组的初始化表达式" class="headerlink" title="对象和数组的初始化表达式"></a>对象和数组的初始化表达式</h2><p>对象和数组的初始化表达式实际上是一个新创建的对象和数组，并不是原始表达式</p>
<h3 id="数组初始化表达式"><a href="#数组初始化表达式" class="headerlink" title="数组初始化表达式"></a>数组初始化表达式</h3><blockquote>
<p>栗子:</p>
<ul>
<li><code>[] //空数组</code></li>
<li><code>[1+2,3+4] // 2个元素数组 [3,7]</code></li>
<li><code>var matrix = [[1,2],[3,4]]  // 数组可嵌套</code></li>
</ul>
</blockquote>
<p>js对数组初始化表达式进行求值时候，数组表达式中的所有元素表达式也会各自计算一次</p>
<p>数组直接量的元素表达式在逗号之间元素可以省略，空位默认填充undefined。<br><code>var array = [1,,3] // 数组包含3个元素。[1,undefined,3]</code></p>
<p>但是列表结尾处可以留下单个逗号，这时不会创建新的undefined元素</p>
<h3 id="对象初始化表达式"><a href="#对象初始化表达式" class="headerlink" title="对象初始化表达式"></a>对象初始化表达式</h3><p>对象初始化表达式与数组初始化表达式非常接近，将[]替换成{},每个子表达式都包含一个属性名和冒号为前缀</p>
<blockquote>
<p>栗子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; var p = &#123; x:2, y:3 &#125;; // 带2个属性的对象p</div><div class="line">&gt; var q = &#123;&#125;; // 空对象</div><div class="line">&gt; q.x = 2; q.y =3; // q的属性成员与p一致</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>对象直接量也是允许嵌套的</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; var rect = &#123;</div><div class="line">&gt;   upLeft: &#123; x:2, y:3&#125;,</div><div class="line">&gt;   bottomRight: &#123; x:4, y:1&#125;</div><div class="line">&gt; &#125;;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>js求对象初始化表达式时候，对象元素表达式也会各自都计算一次，并且元素表达式不必包含常数值，可以是<br>任意的js表达式。</p>
<p>对象直接量中属性的名字可以是字符串而不是标示符</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; var side = 1;</div><div class="line">&gt; var square = &#123;</div><div class="line">&gt;   &quot;upLeft&quot;: &#123; x: p.x, y: p.y&#125;,</div><div class="line">&gt;   &quot;bottomRight&quot;: &#123;x: p.x+side, y: p.y+side&#125;</div><div class="line">&gt; &#125;;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>函数定义表达式定义一个js函数，表达式的值是这个新定义的函数。如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var square = function (x)&#123;</div><div class="line">  return x * x;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="属性访问表达式"><a href="#属性访问表达式" class="headerlink" title="属性访问表达式"></a>属性访问表达式</h2><p>属性访问表达式得到一个对象属性或一个数组元素的值。主要有<code>.</code>和<code>[]</code>两种形式</p>
<blockquote>
<p>栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; var o = &#123; x:1, y:&#123; z:3 &#125; &#125;;</div><div class="line">&gt; var a = [o, 4, [5,6]];</div><div class="line">&gt; o.x // =&gt;1 表达式o的x属性</div><div class="line">&gt; o.y.z // =&gt;3 表达式o.y的z属性</div><div class="line">&gt; o[&quot;x&quot;] // =&gt;1 表达式o的x属性</div><div class="line">&gt; a[1] // =&gt;4 表达式a的索引为1的元素</div><div class="line">&gt; a[2][&quot;1&quot;] // =&gt;6 表达式a[2] 的索引为1的元素</div><div class="line">&gt; a[0].x // =&gt;1 表达式a[0]的x属性</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>在<code>.</code> 和 <code>[]</code>之前的表达式总会首先计算。如果计算出结果为null 或者 undefined，表达式会抛出类型错误异常。<br>如果运算结果不是对象或者数组，js会将其转换为对象。</p>
<p>如果对象表达式后面跟随句点和标示符，则会查找由这个标示符所指定的属性的值，然后作为整个表达式的值返回。</p>
<p>如果表达式后面跟随一对括号，则会计算方括号里面表达式值并转换为字符串，然后查找对应属性的值</p>
<p>如果以上两种情况，命名属性并不存在，则整个属性访问表达式的值就是undefined</p>
<ul>
<li><code>.</code>写法适合要访问的属性名是合法标示符，并且需要知道要访问属性名字</li>
<li><code>[]</code> 写法适合要访问的属性名不是合法字符，或者访问的属性名是需要运算得出的。对于数组则必须使用这种写法</li>
</ul>
<h2 id="调用表达式"><a href="#调用表达式" class="headerlink" title="调用表达式"></a>调用表达式</h2><p>js调用表达式，是一种调用（执行）函数或方法的语法。如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func(0) // f是一个函数表达式，0是一个参数表达式</div><div class="line">Math.max(x,y,z) // Math.max是一个函数，x,y,z是参数</div><div class="line">a.sort() // a.sort是一个函数。没有参数</div></pre></td></tr></table></figure>
<p>对调用表达式进行求值时候，首先计算函数表达式，然后计算参数表达式，得到一组参数值。</p>
<p>如果函数表达式不是一个可以调用的对象，会抛出类型错误异常</p>
<p>如果函数表达式使用return语句返回一个值，那么这个值就是整个调用表达式的值，否则表达式的值就是undefined</p>
<h2 id="对象创建表达式"><a href="#对象创建表达式" class="headerlink" title="对象创建表达式"></a>对象创建表达式</h2><p>对象创建表达式，顾名思义，就是创建一个对象，并且调用一个函数，初始化新对象的属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new Object()</div><div class="line">new Point(2,6)</div></pre></td></tr></table></figure>
<p>如果一个对象创建表达式不需要传入任何参数给构造函数，那么空括号可以省略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new Object</div><div class="line">new Date</div></pre></td></tr></table></figure>
<h2 id="运算符概述"><a href="#运算符概述" class="headerlink" title="运算符概述"></a>运算符概述</h2><p>大多数运算符都是由标点符号表示的，如”+”,”=”。而另外一些运算符则是由关键字表示的，比如delete和instanceof。</p>
<p>优先级从高到低，虚线分割开的运算符不同优先级。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>操作</th>
<th>结合性</th>
<th>操作数个数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>++</td>
<td>前/后增量</td>
<td>R</td>
<td>1</td>
<td>lval =&gt; num</td>
</tr>
<tr>
<td>–</td>
<td>前/后减量</td>
<td>R</td>
<td>1</td>
<td>lval =&gt; num</td>
</tr>
<tr>
<td>-</td>
<td>求反</td>
<td>R</td>
<td>1</td>
<td>num =&gt; num</td>
</tr>
<tr>
<td>+</td>
<td>转换为数字</td>
<td>R</td>
<td>1</td>
<td>num =&gt; num</td>
</tr>
<tr>
<td>~</td>
<td>按位求反</td>
<td>R</td>
<td>1</td>
<td>int =&gt; int</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>R</td>
<td>1</td>
<td>bool =&gt; bool</td>
</tr>
<tr>
<td>delete</td>
<td>删除属性</td>
<td>R</td>
<td>1</td>
<td>lval =&gt; bool</td>
</tr>
<tr>
<td>typeof</td>
<td>检测操作数类型</td>
<td>R</td>
<td>1</td>
<td>any =&gt; str</td>
</tr>
<tr>
<td>void</td>
<td>返回undefined</td>
<td>R</td>
<td>1</td>
<td>any =&gt; undef</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>*,/,%</td>
<td>乘、除、取余</td>
<td>L</td>
<td>2</td>
<td>num,num =&gt; num</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>+、-</td>
<td>加、减</td>
<td>L</td>
<td>2</td>
<td>num,num =&gt; num</td>
</tr>
<tr>
<td>+</td>
<td>字符串连接</td>
<td>L</td>
<td>2</td>
<td>str,str =&gt; str</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移位</td>
<td>L</td>
<td>2</td>
<td>int,int =&gt; int</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>无符号右移位</td>
<td>L</td>
<td>2</td>
<td>int,int =&gt; int</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>有符号右移位</td>
<td>L</td>
<td>2</td>
<td>int,int =&gt; int</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>&lt;,&lt;=,&gt;,&gt;=</td>
<td>比较数字顺序</td>
<td>L</td>
<td>2</td>
<td>num,num =&gt; bool</td>
</tr>
<tr>
<td>&lt;,&lt;=,&gt;,&gt;=</td>
<td>比较在字母表顺序</td>
<td>L</td>
<td>2</td>
<td>str,str =&gt; bool</td>
</tr>
<tr>
<td>instanceof</td>
<td>测试对象类</td>
<td>L</td>
<td>2</td>
<td>obj,func =&gt; bool</td>
</tr>
<tr>
<td>in</td>
<td>测试属性是否存在</td>
<td>L</td>
<td>2</td>
<td>str,obj =&gt; bool</td>
</tr>
<tr>
<td>——————–</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>==</td>
<td>判断相等</td>
<td>L</td>
<td>2</td>
<td>any,any   =&gt;bool</td>
</tr>
<tr>
<td>!=</td>
<td>判断不等</td>
<td>L</td>
<td>2</td>
<td>any,any =&gt; bool</td>
</tr>
<tr>
<td>===</td>
<td>判断恒等</td>
<td>L</td>
<td>2</td>
<td>any,any =&gt; bool</td>
</tr>
<tr>
<td>!==</td>
<td>判断非恒等</td>
<td>L</td>
<td>2</td>
<td>any,any =&gt; bool</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
<td>L</td>
<td>2</td>
<td>int,int =&gt; int</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
<td>L</td>
<td>2</td>
<td>int,int =&gt; int</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>｜</td>
<td>按位或</td>
<td>L</td>
<td>2</td>
<td>int,int =&gt; int</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>L</td>
<td>2</td>
<td>any,any =&gt; any</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>｜｜</td>
<td>逻辑或</td>
<td>L</td>
<td>2</td>
<td>any,any =&gt; any</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>?:</td>
<td>条件运算符</td>
<td>L</td>
<td>3</td>
<td>bool,any,any =&gt; any</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>=</td>
<td>赋值运算符</td>
<td>R</td>
<td>2</td>
<td>lval,any =&gt; any</td>
</tr>
<tr>
<td>*=,/=,%=,+=,-=,&amp;=</td>
<td>运算且赋值</td>
<td>R</td>
<td>2</td>
<td>lval,any =&gt; any</td>
</tr>
<tr>
<td>^=,｜｜=,&lt;&lt;=,&gt;&gt;=,&gt;&gt;&gt;=</td>
<td>运算且赋值</td>
<td>R</td>
<td>2</td>
<td>lval,any =&gt; any</td>
</tr>
<tr>
<td>—————</td>
<td>—————</td>
<td>—</td>
<td>–</td>
<td>———</td>
</tr>
<tr>
<td>,</td>
<td>忽略第一个操作数，返回第二个操作数</td>
<td>L</td>
<td>2</td>
<td>any,any =&gt; any</td>
</tr>
</tbody>
</table>
<h3 id="左值"><a href="#左值" class="headerlink" title="左值"></a>左值</h3><p>上表中出现的lval指的是左值，意思是表达式只能出现在赋值运算符的左侧</p>
<p>在js中，变量、对象属性、和数组元素都是左值。</p>
<p>ECMAScript允许内置函数返回左值，但自定义函数不能返回左值</p>
<h3 id="操作数类型和结果类型"><a href="#操作数类型和结果类型" class="headerlink" title="操作数类型和结果类型"></a>操作数类型和结果类型</h3><p>js运算符通常会根据需要对操作数进行类型转换</p>
<p><code>*</code>希望操作数为数字，但是表达式<code>&quot;3&quot;*&quot;5&quot;</code>却是合法的，因为js会把操作数转换为数字</p>
<p>有些操作符对操作数类型有一定程度依赖，比如<code>＋</code>运算符。可以对数字进行加法运算，也可以对字符串进行连接。</p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>上表中运算符按照优先级从高到低排序，每个虚线内的一组运算符具有相同优先级。</p>
<p>优先级高的运算符执行总是先于优先级低的运算符<br>举个栗子：<code>m = x + y*z;</code><br><code>*</code>运算符比<code>＋</code>运算符优先级高，优先计算<code>y*z</code>，获得结果再与x相加。<code>=</code>赋值运算符优先级最低，右侧表达式<br>计算出结果后赋值给m</p>
<p>很多时候为了代码逻辑清晰，加上一些括号来重写优先级，来避免一些优先级引起的bug或者执行顺序与设计不符<br><code>m = (x + y) * z</code></p>
<h3 id="运算符的结合性"><a href="#运算符的结合性" class="headerlink" title="运算符的结合性"></a>运算符的结合性</h3><p>上表中说明了运算符的结合性。</p>
<ul>
<li>L 指从左到右结合,执行时按照从左到右的顺序进行</li>
<li>R 指从右到左结合,执行时按照从右到左的顺序进行</li>
</ul>
<p>举个栗子：<code>-</code>运算符从左到右结合，因此<code>w = x - y - z</code> 等价于 <code>w = ((x - y) - z)</code></p>
<h3 id="运算顺序"><a href="#运算顺序" class="headerlink" title="运算顺序"></a>运算顺序</h3><p>运算符的优先级和结合性规定了在复杂表达式中的运算顺序，但是没有规定子表达式的计算过程中的运算顺序</p>
<p>js中，总是严格按照从左到右计算子表达式。例如<code>w=x+y*z</code>，首先计算w,然后计算x,y,z的值，然后y的值和z的值相承<br>之后，再加上x的值，最后将其结果赋值给w。给表达式加括号会改变乘法加法和赋值运算的顺序，但是子表达式的计算<br>顺序仍然是从左至右的顺序</p>
<p>只有一种情况例外，当任何一个表达式具有副作用而影响其他表达式时候，求值顺序才会有所不同。<br>例如，表达式中x的一个变量自增1，这个变量在z中使用，那么实际上是先计算了x的值再计算z的值，这一点一定要注意</p>
<p>下面这个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = 1;</div><div class="line">b = (a++) + a;</div></pre></td></tr></table></figure>
<p>如果按照前面那种不考虑副作用时的顺序是 1) 计算b, 2)计算a++为c, 3）计算a，4）计算c＋a, 5）将c+a结果赋值给b</p>
<p>按照<code>++</code>的影响，1) 计算b, 2)a++结果仍然为1,c=1,随即a立即自增1, 3）计算a，a已经是2，4）计算c＋a＝3,5）将c+a结果赋值给b，所以b＝3</p>
<p><strong>切记，a增1的操作是在表达式计算中就已经执行了，不是在整个表达式计算完成之后执行的</strong></p>
<h2 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h2><p>基本算数运算符包括<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></p>
<h3 id="“-”运算符"><a href="#“-”运算符" class="headerlink" title="“+”运算符"></a>“+”运算符</h3><ul>
<li>对2个数字进行加法操作</li>
<li>字符串连接操作</li>
</ul>
<p><strong>针对不同操作数，＋运算符行为表现有些不同</strong></p>
<ul>
<li>一个操作数是对象，对象会遵循对象到原始值的转换规则转换为原始值<ul>
<li>日期对象：toString()执行转换</li>
<li>其他对象通过valueOf()转换，如果valueOf()不可用，会通过toString()方法转换</li>
</ul>
</li>
<li>在进行对象到原始值的转换后，如果其中一个操作数是字符串，另一个操作数也会转换成字符串，然后连接</li>
<li>否则，两个操作数都转换成数字或者NaN，然后进行加法操作</li>
</ul>
<p>下面是一些栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1 + 2 // =&gt;3</div><div class="line">&quot;1&quot; + 2 // =&gt; &quot;12&quot;</div><div class="line">&quot;12&quot; + &quot;3&quot; // =&gt; &quot;123&quot;</div><div class="line">1 + &#123;&#125; // &quot;1[object object]&quot;，对象转换为字符串</div><div class="line">true + true // 2 ，bool转换为数字做加法</div><div class="line"></div><div class="line">2 + null // =&gt;2,null转换为0</div><div class="line">2 + undefined // =&gt; NaN, undefined转换为NaN后做加法</div></pre></td></tr></table></figure>
<p><strong>最后，还需要考虑，加法的结合性对运算顺序的影响</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 + 2 + &quot;hello&quot; // &quot;3hello&quot;</div><div class="line">1 + (2 + &quot;hello&quot;) // &quot;12hello&quot;</div></pre></td></tr></table></figure>
<h3 id="一元算术运算符"><a href="#一元算术运算符" class="headerlink" title="一元算术运算符"></a>一元算术运算符</h3><p>一元运算符作用于一个单独操作数，产生一个新值</p>
<p>js中一元运算符优先级很高，并且都是右结合</p>
<p><code>+</code>/<code>-</code>，既是一元运算符，也是二元运算符</p>
<ul>
<li><p>一元加法(<code>+</code>)</p>
<blockquote>
<p>操作数转换为数字（或者NaN），并且返回这个转换后的数字。如果已经是数字，直接返回</p>
</blockquote>
</li>
<li><p>一元减法(<code>-</code>)</p>
<blockquote>
<p>操作数转换为数字（或者NaN），并且返回这个转换后的数字，然后改变运算结果符号</p>
</blockquote>
</li>
<li><p>递增(<code>++</code>)</p>
<blockquote>
<p>前增量 <code>++a</code>，先进行增量运算并且返回运算结果<br>后增量 <code>a++</code>，先进行增量计算，返回未做增量运算的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; var i=1, j=i++; // i=2,j=1</div><div class="line">&gt; var i=1, j=++i; // i=2,j=2</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>递减(<code>--</code>)</p>
<blockquote>
<p>前减量 <code>--a</code>，先进行减量运算并且返回运算结果<br>后减量 <code>a--</code>，先进行减量计算，返回未做减量运算的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; var i=1, j=i--; // i=0,j=1</div><div class="line">&gt; var i=1, j=--i; // i=0,j=0</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul>
<li><p><code>&amp;</code> 按位与</p>
<blockquote>
<p><code>0x1234 &amp; 0x00ff = 0x0034</code></p>
</blockquote>
</li>
<li><p><code>|</code> 按位或</p>
<blockquote>
<p><code>0x1234 | 0x00ff = 0x12ff</code></p>
</blockquote>
</li>
<li><p><code>^</code> 按位异或</p>
<blockquote>
<p><code>0xff00 ^ 0xf0f0 = 0x0ff0</code></p>
</blockquote>
</li>
<li><p><code>~</code> 按位非</p>
<blockquote>
<p><code>~0x0f = 0xfffffff0</code></p>
</blockquote>
</li>
<li><p><code>&lt;&lt;</code> 左移</p>
<blockquote>
<p><code>7 &lt;&lt; 2 = 28</code>,左移一位相当于第一个操作数乘以2<br>移动位数 0～31</p>
</blockquote>
</li>
<li><p><code>&gt;&gt;</code> 带符号右移</p>
<blockquote>
<p>带符号右移时候填补在左边的位由原来的数的符号决定，以便保持和原操作数一致<br>移动位数 0～31<br><code>7 &gt;&gt; 1 = 3</code><br><code>-7 &gt;&gt; 1 = -4</code></p>
</blockquote>
</li>
<li><p><code>&gt;&gt;&gt;</code> 无符号右移</p>
<blockquote>
<p>无符号右移时候填补在左边的位直接填补0，与原操作数无关<br>移动位数 0～31<br><code>-1 &gt;&gt; 4 = 1</code><br><code>-1 &gt;&gt;&gt; 4 = 0x0fffffff</code></p>
</blockquote>
</li>
</ul>
<h2 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h2><p>主要包括相等和不相等运算符、比较运算符、in、instanceof</p>
<h3 id="相等和不相等运算符"><a href="#相等和不相等运算符" class="headerlink" title="相等和不相等运算符"></a>相等和不相等运算符</h3><p>js定义了4个符号<code>==</code>,<code>===</code>,<code>!=</code>,<code>!==</code></p>
<ul>
<li><code>==</code>：相等</li>
<li><code>===</code>: 恒等</li>
<li><code>!=</code>: 不相等</li>
<li><code>!==</code>: 不恒等</li>
</ul>
<p>严格相等运算符<code>===</code>首先计算其操作数的值，然后比较这两个值，没有类型转换</p>
<ul>
<li>如果两个值类型不相同，则它们不相等</li>
<li>如果两个值都是null或者都是undefined，则它们不相等</li>
<li>如果两个值都是布尔值true或者false，，则它们相等</li>
<li>如果其中一个值是NaN，或者2个值都是NaN，则它们不相等。NaN和其他任何值都是不相等的，包括自身。通过X!==X来判断x是否为NaN，只有x为NaN时候，表达式才为true</li>
<li>如果两个值为数字且数值相等，则他们相等。如果一个值为0，另一个为－0，同样相等</li>
<li>如果两个值为字符串，且所含对应位上16位数完全相等，则他们相当。如果它们长度或内容不同，则它们不相等。</li>
<li>两个字符串可能含义完全一样且显示字符一样，但具有不同编码的16位值。js不会对Unicode进行标准化转换，像这样字符串通过”===”和”==”运算符比较结果也是不相等</li>
<li>如果两个引用值指向同一个对象、数组或者函数，则相等。如果指向不同对象，则它们不相等，尽管两个对象完全一样的属性。</li>
</ul>
<p>相等运算符<code>==</code>和恒等运算符相似，但相等运算符并不严格。如果两个操作数不是同一类型，那么相等的运算符会进行一些类型转换，然后进行比较</p>
<ul>
<li>如果两个操作数的类型相同，则和上文所属的严格相等的比较规则一样。如果严格相等，则比较结果相等，如果不严格相等，则它们不相等</li>
<li>如果两个操作数类型不同，<code>==</code>相等操作符也可能认为他们相等。检测相等会遵守以下规则和类型转换如果一个值是null，另一个是undefined,则他们相等如果一个值是数字，另一个是字符串，先将字符串转换成数字，然后使用转换后的值，进行比较如果其中一个值是true，则将其转换为1再进行比较。如果其中一个值是false，则将其转化为0，在进行比较如果一个值是对象，另一个值是数字或字符串，则会使用之前提到的对象到数字或字符串的转换规则将对象转换为原始值，然后进行比较。其他的类型之间的比较均不相等</li>
</ul>
<p>举个栗子：<code>&quot;1&quot; == true</code><br>这个表达式结果是true，表明不同类型之间的值比较结果相等。布尔值首先转换为数字1，然后字符串1也转换成数字1，因为两个数字相等，所以结果为true</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符有4个</p>
<ul>
<li><code>&lt;</code> 小于</li>
<li><code>&gt;</code> 大于</li>
<li><code>&lt;=</code> 小于等于</li>
<li><code>&gt;=</code> 大于等于</li>
</ul>
<p>比较运算符的操作数可以是任何类型，然后只有字符串和数字才能真正的执行比较操作，不是这两种类型的都将进行类型转换。<br>类型转换规则：</p>
<ul>
<li>如果操作数为对象，这个对象将按照对象到原始值的转换（具体可以看上篇）</li>
<li>在对象转换到原始值后，如果两个操作数都是字符串，那么将按照字母表顺序进行比较（字母表指的unicode 16位字符的索引顺序）</li>
<li>对象转换为原始值后，如果一个操作数不是字符串，那么两个操作数转换为数字之后进行比较。<ul>
<li>0和－0是相等的</li>
<li>Infinity比其他任何数字都大（除了自身）</li>
<li>－Infinity比其他数字都小(除了自身)</li>
<li>如果一个操作数转换成数字之后是NaN，那么比较操作符总是返回false</li>
</ul>
</li>
</ul>
<p>在上面规则中，字符串比较需要注意：   </p>
<ul>
<li>字符串比较是区分大小写的，所有的大写ascii字符都是小于小写的ascii字符</li>
<li>对于数字和字符串比较，只有两个操作数都是字符串时，才会进行字符串比较</li>
</ul>
<h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a><code>in</code>运算符</h3><p><code>in</code>运算符的左边总是希望是一个字符串，右边操作数总是希望是一个对象，如果右边对象拥有左操作值的属性名，会返回true</p>
<p>对象，会倾向查找属性名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var point = &#123; x:1, y:1&#125;;</div><div class="line">&quot;x&quot; in point // ＝&gt; true, 对象拥有名为“x”的属性</div><div class="line">&quot;z&quot; in point // =&gt; false, 对象不存在名为&quot;z&quot;的属性</div><div class="line">&quot;toString&quot; in point // =&gt; true，对象继承了默认的toString()方法</div></pre></td></tr></table></figure>
<p>数组，会倾向查找索引</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var data = [1,2,3]</div><div class="line">&quot;0&quot; in data // true，数组包含索引0的元素</div><div class="line">1 in data // true，数组包含索引1的元素</div><div class="line">3 in data // false 数组不包含索引3的元素</div></pre></td></tr></table></figure>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a><code>instanceof</code> 运算符</h3><p><code>instanceof</code>运算符希望左操作数是一个对象，右操作数标识对象的类，如果左侧的对象是右侧类的实例，则返回true，否则返回false</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var d = new Date();</div><div class="line">d instanceof Date;  // true，d是由Date()创建的</div><div class="line">d instanceof Object; //  true,所有对象都是Object实例</div><div class="line">d instanceof Number; // false, d不是Number的实例</div></pre></td></tr></table></figure>
<h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><p>逻辑运算符是进行布尔运算使用的，主要有</p>
<ul>
<li><code>&amp;&amp;</code> 逻辑与</li>
<li><code>||</code> 逻辑或</li>
<li><code>!</code> 逻辑非</li>
</ul>
<h3 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与(&amp;&amp;)"></a>逻辑与(&amp;&amp;)</h3><p>当操作数都是布尔值时，<code>&amp;&amp;</code>对两个值进行布尔与操作，第一个与第二个操作数都是true时，才返回true，其中一个是false，就会返回false</p>
<p>当操作数不都是布尔值时，<code>&amp;&amp;</code>不一定会返回布尔值。</p>
<ul>
<li>逻辑与运算符，首先计算左侧的值，如果计算结果是假植，则整个表达式都是假植，因此会简单的返回左侧操作数的值</li>
<li>如果左侧值是真值，那么整个表达式结果依赖于右侧的值，因此，<code>&amp;&amp;</code>运算符符会计算右侧操作数的值，并且将其返回作为整个表达式的计算结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var o =&#123; x:1 &#125;;</div><div class="line">var p = null;</div><div class="line">o &amp;&amp; o.x; // =&gt;1 ，o对象是真值，返回o.x</div><div class="line">p &amp;&amp; p.x; // =&gt; null ，p是假值，将其返回，不会计算p.x</div></pre></td></tr></table></figure>
<p>上面那种行为，被称为 <strong>短路</strong>,这一特性非常有用，可以选择性执行代码。 例如：<br><code>if ( a == b ) stop();</code> 等价于 <code>( a == b ) &amp;&amp; stop();</code></p>
<h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或(||)"></a>逻辑或(||)</h3><p>当操作数都是布尔值时，<code>||</code>对两个操作数作布尔或运算，两个操作数有一个为真，返回true，两个操作数都是假，才会返回false</p>
<p>当操作数不都是布尔值，<code>||</code>不一定返回布尔值</p>
<ul>
<li>逻辑或运算符，首先计算左侧的值，如果计算结果是真值，则整个表达式都是真值，因此会返回这个真值</li>
<li>否则再计算第二个操作数的值，再返回这个表达式的计算结果</li>
</ul>
<p><code>||</code>同样是非常有用，比如从一组备选表达式中选出第一个真值表达式。这种做法经常在函数体内，给参数提供默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var max = max_width || preference.max_width || 500;</div></pre></td></tr></table></figure>
<h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非(!)"></a>逻辑非(!)</h3><p><code>!</code> 运算符是一元运算符，放在一个单独的操作数前，对操作数布尔值进行求反</p>
<p><code>!</code>运算符首先将操作数转换为布尔值，再进行求反，最终只会返回true或者false</p>
<p>作为一元运算符，优先级非常高，并且和操作数密切绑定。<br>德摩根公式:    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!(p &amp;&amp; q) === !p || !q</div><div class="line">!(p || q) === !p &amp;&amp; !q</div></pre></td></tr></table></figure>
<h2 id="赋值表达式"><a href="#赋值表达式" class="headerlink" title="赋值表达式"></a>赋值表达式</h2><p>js 使用<code>=</code>运算符给变量或者属性进行赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">i = 0;</div><div class="line">0.x = 1;</div></pre></td></tr></table></figure>
<p>除了常规的赋值运算符，还有一些带赋值操作的运算符<code>+=</code>,<code>-=</code>,<code>*=</code>,<code>&amp;=</code>等等<br>只有<code>+=</code>可以用于数字或字符串连接，其他都偏向于数值操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = 10;</div><div class="line">b = &apos;1&apos;;</div><div class="line">a += 10; // =&gt; 10 + 10 =20</div><div class="line">b += 10; // =&gt; &apos;1&apos;+10 = &quot;110&quot;</div><div class="line">a -= 10; // =&gt; 20 - 10 = 10</div><div class="line">b -= 10; // =&gt; 110 - 10 = 10</div></pre></td></tr></table></figure>
<h2 id="表达式计算"><a href="#表达式计算" class="headerlink" title="表达式计算"></a>表达式计算</h2><p>js可以通过<code>eval()</code>来动态判断源代码中的字符串，并且执行</p>
<p><code>eval()</code>只有一个参数，如果传入的参数不是字符串，直接返回这个参数。如果参数是字符串，则会把字符串当成代码进行编译。<br>如果编译失败，则返回一个语法错误异常。如果编译成功，则会执行这段代码，并且返回字符串最后一个表达式或者语句的值。<br>如果最后一个表达式或语句没有值，则最终返回undefined</p>
<p><code>eval()</code>使用来调用它的变量作用域环境，也就是说查找变量会和局部作用域代码完全一样。</p>
<p>如果将<code>eval()</code>重命名为其他方式来调用，则使用全局对象作为上下文作用域，并且无法读、写、定义局部变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var geval = eval; // geval 是调用全局eval</div><div class="line">var x = &quot;global&quot;;</div><div class="line">var y = &quot;global&quot;;</div><div class="line">function f()&#123;</div><div class="line">  var x = &quot;local&quot;;  // 定义局部变量 x，局部作用域x ＝ “local”</div><div class="line">  eval(&quot;x+=&apos;changed&apos;;&quot;); //  直接eval更改局部变量x的值</div><div class="line">  return x; // 返回更改后的x值</div><div class="line">&#125;</div><div class="line">function g()&#123;</div><div class="line">  var y = &quot;local&quot;;  // 定义局部变量 y，局部作用域y ＝ “local”</div><div class="line">  geval(&quot;y+=&apos;changed&apos;;&quot;); // 间接调用改变全局变量的值</div><div class="line">  return y; // 返回为更改的局部变量</div><div class="line">&#125;</div><div class="line">console.log(f(),x); // 更改来局部变量，输出&quot;localchanged global&quot;</div><div class="line">console.log(g(),y); // 更改全局变量，输出“local globalchanged”</div></pre></td></tr></table></figure>
<h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><h3 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h3><p>条件运算符是唯一一个三元运算符<br><code>(---1---) ? (---2---) : (---3---)</code></p>
<p>第一个操作数当成布尔值，如果是真值，那么计算第二个操作数，并返回结果。否则如果第一个操作数是假植，那么计算第三个数，返回计算结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x &gt; 0 ? x : -x // 求x的绝对值</div></pre></td></tr></table></figure>
<h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><h3 id="delete运算符"><a href="#delete运算符" class="headerlink" title="delete运算符"></a>delete运算符</h3><p>delete运算符，用来删除对象属性或者数组元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var o = &#123; x:1, y:2&#125;;</div><div class="line">delete o.x; // 删除一个属性</div><div class="line">&quot;x&quot; in o; // false，o对象中不存在属性x</div><div class="line"></div><div class="line">var a = [1,23,4];</div><div class="line">delete a[2]; //删除第三个元素</div><div class="line">2 in a ; // false, 索引2的元素在数组中已经不存在</div></pre></td></tr></table></figure>
<p>delete删除成功会返回true。然后不是所有属性都可删除的</p>
<ul>
<li>一些内置核心和客户端属性是不能删除的</li>
<li>使用var语句生声明的变量不能删除</li>
<li>通过function定义的函数和函数参数不能删除。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var 0 = &#123; x:1, y:2&#125;;</div><div class="line">delete o.x; // true, 删除对象属性成功</div><div class="line">typeof o.x; // undefined ， 属性不存在</div><div class="line">delete o.x; // true, 删除不存在的属性，返回true</div><div class="line">delete o; // false ，不能删除var声明变量</div><div class="line"></div><div class="line">delete 1; // true, 参数不是一个左值，返回true</div><div class="line">this.x = 1; // 定义全局对象的一个属性</div><div class="line">delete x; // 试图删除全局变量的属性，非严格模式下，返回true</div><div class="line">x; // 运行时错误，没有定义x</div></pre></td></tr></table></figure>
<h3 id="void-运算符"><a href="#void-运算符" class="headerlink" title="void 运算符"></a>void 运算符</h3><p>void 是一元运算符，操作数照常计算，但是忽略计算结果并且返回undefined</p>
<p>这个操作符经常用作客户端URL－<code>javascript:URL</code>,通过使用void则让浏览器不必显示这个表达式计算结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;javascript:void window.open();&quot;&gt;打开一个新窗口&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>逗号运算符，首先计算左操作数，然后计算右操作数，最后返回右操作数的值。</p>
<p>总会计算左侧的表达式，但计算结果忽略掉，也就是说，只有左侧表达式有副作用时，，才会使用逗号表达式让代码更通顺。</p>
<p>经常在for循环中使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(var i=0,j=10;i&lt;j;i++,j--)&#123;</div><div class="line">  console.log(i+j);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文／zhaolion（简书作者）<br>原文链接：<a href="http://www.jianshu.com/p/ff845f40f036" target="_blank" rel="external">http://www.jianshu.com/p/ff845f40f036</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;程序中最简单的表达式就是，程序中的常量&lt;/li&gt;
&lt;li&gt;变量名也是一种简单的表达式&lt;/li&gt;
&lt;li&gt;复杂的表达式是由简单的表达式组成的&lt;/li&gt;
&lt;li&gt;函数调用表达式是由函数对象的表达式和0个或多个参数表达式构成&lt;/li&gt;
&lt;li&gt;可以使用运算符来将简单的表达式来组合成复杂的表达式
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular-ui-router</title>
    <link href="http://yoursite.com/2016/12/14/%E6%A1%86%E6%9E%B6/angular/ui-router/"/>
    <id>http://yoursite.com/2016/12/14/框架/angular/ui-router/</id>
    <published>2016-12-14T05:57:30.000Z</published>
    <updated>2017-03-15T09:16:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么用-Route"><a href="#为什么用-Route" class="headerlink" title="为什么用 Route"></a>为什么用 Route</h2><ul>
<li>AJAX 请求不会留下 History 记录</li>
<li>用户无法直接通过 URL 进入应用中的指定页面(保存书签、链接分享给朋友)</li>
<li><p>AJAX 对 SEO 是个灾难</p>
<a id="more"></a>
<h2 id="前端路由的基本原理"><a href="#前端路由的基本原理" class="headerlink" title="前端路由的基本原理"></a>前端路由的基本原理</h2></li>
<li><p>哈希 #</p>
</li>
<li><p>HTML5 中新的 history API</p>
</li>
<li><p>路由的核心是给应用定义 “状态”</p>
</li>
<li><p>使用路由机制会影响到应用的整体编码方式(需预先定义好状态)</p>
</li>
<li><p>考虑兼容性问题与 “优雅降级”</p>
<p>​</p>
<p>​</p>
</li>
</ul>
<p>1.多视图用@，嵌套用parent.child这种子路由</p>
<blockquote>
<p>要切换的视图(main)用ui-view,始终不会变成其他内容的不需要路由</p>
</blockquote>
<p>2.要切换的路由ui-sref用子路由</p>
<p>1.文件结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">D:.douban</div><div class="line">|</div><div class="line">│  index.html                       </div><div class="line">│                                   </div><div class="line">├─css                               </div><div class="line">│      bootstrap.css                </div><div class="line">│      index.css                    </div><div class="line">│                                   </div><div class="line">├─js                                </div><div class="line">│      angular-1.3.0.js             </div><div class="line">│      angular-animate.js           </div><div class="line">│      angular-ui-router.js         </div><div class="line">│      app.js                       </div><div class="line">│      ui-bootstrap-tpls-0.11.0.js  </div><div class="line">│                                   </div><div class="line">└─src                               </div><div class="line">        addUser.html                </div><div class="line">        bottomBar.html              </div><div class="line">        home.html                   </div><div class="line">        index.html                  </div><div class="line">        userInfo.html</div></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/angular-1.3.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/angular-animate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/angular-ui-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.active</span> &#123; <span class="attribute">color</span>: red; <span class="attribute">font-weight</span>: bold; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"helloworld"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'helloworld'</span>, [<span class="string">'ui.router'</span>]);</div><div class="line"><span class="comment">// 路由机制</span></div><div class="line"><span class="comment">//这一行声明了把$stateProvider和$urlRouterProvider路由引擎作为函数参数传入，这样我们就可易为这个应用程序配置路由了</span></div><div class="line">myApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider, $urlRouterProvider</span>) </span>&#123;</div><div class="line">  <span class="comment">//下面一行的意思是：如果没有路由引擎能匹配当前的导航状态，那它就会默认将路径路由至PageTab.html，这个页面就是状态名称被声明的地方。只要理解了这个，那么它就像switch case语句中的default选项</span></div><div class="line">  $urlRouterProvider.otherwise(<span class="string">'/index'</span>);</div><div class="line">  $stateProvider</div><div class="line">    .state(<span class="string">'index'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/index'</span>,</div><div class="line"><span class="comment">// view 用在该状态下有多个 ui-view 的情况，可以对不同的 ui-view 使用特定的 template, controller, resolve data</span></div><div class="line"><span class="comment">// 绝对 view 使用 '@' 符号来区别，比如 'foo@bar' 表明名为 'foo' 的 ui-view 使用了 'bar' 状态的模板(template)，相对 view 则无</span></div><div class="line">      views: &#123;</div><div class="line">        <span class="comment">//无名view</span></div><div class="line">        <span class="string">''</span>: &#123;</div><div class="line">         <span class="comment">//配置templateUrl属性，来加载指定位置的模板，这是设置模板的常用方法</span></div><div class="line">          templateUrl: <span class="string">'src/index.html'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//main在index模块中</span></div><div class="line">        <span class="string">'main@index'</span>: &#123;</div><div class="line">          <span class="attr">templateUrl</span>: <span class="string">'src/home.html'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'tabBar@index'</span>: &#123;</div><div class="line">          <span class="attr">templateUrl</span>: <span class="string">'src/bottomBar.html'</span></div><div class="line">          <span class="comment">//在下面也可以直接加参数</span></div><div class="line">          <span class="comment">//controller:'路由到的页面的控制器名称'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="comment">//index.userInfo表示路由结构  index/userInfo</span></div><div class="line">    .state(<span class="string">'index.userInfo'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/userInfo'</span>,</div><div class="line">      <span class="attr">views</span>: &#123;</div><div class="line">        <span class="comment">//替换之前占位的home.html 替换成userInfo.html</span></div><div class="line">        <span class="string">'main@index'</span>: &#123;</div><div class="line">          <span class="attr">templateUrl</span>: <span class="string">'src/userInfo.html'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="comment">//index.userInfo.addUser表示路由结构  index/userInfo/addUser</span></div><div class="line">    .state(<span class="string">'index.userInfo.addUser'</span>, &#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'/addUser'</span>,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'src/addUser.html'</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>src目录</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"tabBar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>home.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron text-center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        首页的形式一般比较<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>灵活<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，而且可能随时发生变化。</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>bottomBar.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"index"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"index.userInfo"</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<p>userInfo.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">             //导航</div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"index.userInfo.addUser"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>adduser<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    </div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span>&gt;</span></div><div class="line">      //视图</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ui-sref-传参"><a href="#ui-sref-传参" class="headerlink" title="ui-sref 传参"></a>ui-sref 传参</h3><h5 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"phones"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"thumbnail phone-list-item"</span> <span class="attr">ng-repeat</span>=<span class="string">"phone in phone_list"</span>&gt;</span></div><div class="line">           //要传的参数</div><div class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"detail(&#123;id:phone.id&#125;)"</span> <span class="attr">class</span>=<span class="string">"thumb"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123; phone.imageUrl &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"&#123;&#123; phone.id &#125;&#125;"</span> /&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"detail(&#123;id:phone.id&#125;)"</span>&gt;</span>&#123;&#123; phone.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; phone.snippet &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'detail'</span>,&#123;</div><div class="line">	<span class="attr">url</span>:<span class="string">'/detail/:id'</span>,<span class="comment">//后面是这种形式的参数http://127.0.0.1:3333/#/detail/motorola-xoom  把参数写在路径里</span></div><div class="line">	templateUrl:<span class="string">'app/detail/detail.html'</span>,</div><div class="line">	<span class="attr">contorller</span>: <span class="string">'detailListController'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.controller(<span class="string">'detailListController'</span>, [</div><div class="line">		<span class="string">'$scope'</span>,</div><div class="line">		<span class="string">'$http'</span>,</div><div class="line">		<span class="string">'$stateParams'</span>,<span class="comment">//承载上一级传过来的参数</span></div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http,$stateParams</span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log($stateParams)</div><div class="line">		&#125;</div><div class="line">	])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么用-Route&quot;&gt;&lt;a href=&quot;#为什么用-Route&quot; class=&quot;headerlink&quot; title=&quot;为什么用 Route&quot;&gt;&lt;/a&gt;为什么用 Route&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;AJAX 请求不会留下 History 记录&lt;/li&gt;
&lt;li&gt;用户无法直接通过 URL 进入应用中的指定页面(保存书签、链接分享给朋友)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AJAX 对 SEO 是个灾难&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解J avaScript 系列（结局篇）</title>
    <link href="http://yoursite.com/2016/11/12/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/51%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3J%20avaScript%20%E7%B3%BB%E5%88%97%EF%BC%88%E7%BB%93%E5%B1%80%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/11/12/JavaScript/深入理解javascript/51深入理解J avaScript 系列（结局篇）/</id>
    <published>2016-11-12T04:02:02.000Z</published>
    <updated>2017-03-02T14:12:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月忙得实在是不可开交，终于把《深入理解 JavaScript 系列》的最后两篇“补全”了，所谓的全是不准确的，因为很多内容都没有写呢，比如高性能、Ajax 安全、DOM 详解、JavaScript 架构等等。但因为经历所限，加上大叔希望接下来写点其它东西，所以此篇文字就暂且当前完结篇的总结吧，以后有时间的话，可以继续加上一些未涉及的专题内容。<br><a id="more"></a></p>
<h2 id="网络文章来源"><a href="#网络文章来源" class="headerlink" title="网络文章来源"></a>网络文章来源</h2><p>本系列文章参考了大量的互联网网站，在此向各位网站拥有者、博主、提到的以及未提到的作者们说一声：多谢感谢了。</p>
<p>本系列文章主要参考了如下站点：</p>
<p>五大原则：<a href="http://freshbrewedcode.com/derekgreer" target="_blank" rel="external">http://freshbrewedcode.com/derekgreer</a></p>
<p>ECMAScript262 系列：<a href="http://dmitrysoshnikov.com/" target="_blank" rel="external">http://dmitrysoshnikov.com/</a></p>
<p>DOM 系列文章：<a href="http://net.tutsplus.com/" target="_blank" rel="external">http://net.tutsplus.com</a></p>
<p>设计模式系列文章参考如下三个网站：</p>
<p><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external">http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/</a></p>
<p><a href="http://shichuan.github.com/javascript-patterns/" target="_blank" rel="external">http://shichuan.github.com/javascript-patterns/</a></p>
<p><a href="https://github.com/tcorral/Design-Patterns-in-Javascript/" target="_blank" rel="external">https://github.com/tcorral/Design-Patterns-in-Javascript/</a></p>
<p>其它文章，总结自自己的收藏、心得，结合了互联网上的各位大牛的博客总结整理而成，因为参考地址太多，无法一一列出，如果忘记了各位各种的版权声明，请及时告知，以便及时处理，多谢！</p>
<h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h2><p>这里列出的书籍是大叔曾经读过的，也是在整理博文的时候经常参考的书籍，推荐给大家阅读。</p>
<h3 id="初级读物"><a href="#初级读物" class="headerlink" title="初级读物"></a>初级读物</h3><p>《JavaScript 高级程序设计》：一本非常完整的经典入门书籍，被誉为 JavaScript 圣经之一，详解的非常详细，最新版第三版已经发布了，建议购买。</p>
<h3 id="中级读物"><a href="#中级读物" class="headerlink" title="中级读物"></a>中级读物</h3><p>《JavaScript 权威指南》：另外一本 JavaScript 圣经，讲解的也非常详细，属于中级读物，建议购买。</p>
<p>《JavaScript.The.Good.Parts》：Yahoo 大牛，JavaScript 精神领袖 Douglas Crockford 的大作，虽然才 100 多页，但是字字珠玑啊！强烈建议阅读。</p>
<p>《高性能 JavaScript》：《JavaScript 高级程序设计》作者 Nicholas C. Zakas 的又一大作。</p>
<p>《Eloquent JavaScript》：这本书才 200 多页，非常短小，但是改变了我写作的习惯，本书通过几个非常经典的例子（艾米丽姨妈的猫、悲惨的隐士、模拟生态圈、推箱子游戏等等）来介绍 JavaScript 方方面面的知识和应用方法，非常值得一读，同时这本书的中文版也是大叔翻译的，点击屏幕右上角可以订购，希望大家多多支持。</p>
<h3 id="高级读物"><a href="#高级读物" class="headerlink" title="高级读物"></a>高级读物</h3><p>《JavaScript Patterns 》：书中介绍到了各种经典的模式，如构造函数、单例、工厂等等，值得学习。</p>
<p>《Pro.JavaScript.Design.Patterns》：Apress 出版社讲解 JavaScript 设计模式的书，非常不错。</p>
<p>《Developing JavaScript Web Applications》：构建富应用的好书，针对 MVC 模式有较为深入的讲解，同时也对一些流程的库进行了讲解。</p>
<p>《Developing Large Web Applications》：将这本书归结在这里，貌似有点不妥，因为这里不仅有 JavaScript 方面的介绍，还有 CSS、HTML 方面的介绍，但是介绍的内容却都非常不错，真正考虑到了一个大型的 Web 程序下，如何进行 JavaScript 架构设计，值得一读。</p>
<h3 id="其它参考书籍"><a href="#其它参考书籍" class="headerlink" title="其它参考书籍"></a>其它参考书籍</h3><p>《大话设计模式》：博文里关于设计模式的文章，有些总结性的文字来自于此。</p>
<p>《设计模式——可复用面向对象软件的基础》：博文里关于设计模式的文章，有些介绍性和总结性的文章来自于此。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在写此系列文章期间，大叔也学到了很多很多内容。同时为了不误人子弟，大叔参考了很多很多文章，同时也阅读了那么多书籍，但博客里的文章，可能依然有很多错误，希望各位如果发现错误的话，请及时告知，以便及时修正而不再继续误导其它人。</p>
<p>同时，大家在阅读过程中，有任何问题都可以在相应的文章里留言，大叔将在不耽误工作的情况下尽力回复。</p>
<h2 id="同步与推荐"><a href="#同步与推荐" class="headerlink" title="同步与推荐"></a>同步与推荐</h2><p>深入理解 JavaScript 系列文章，包括了原创，翻译，转载等各类型的文章，如果对你有用，请推荐支持一把，给大叔写作的动力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几个月忙得实在是不可开交，终于把《深入理解 JavaScript 系列》的最后两篇“补全”了，所谓的全是不准确的，因为很多内容都没有写呢，比如高性能、Ajax 安全、DOM 详解、JavaScript 架构等等。但因为经历所限，加上大叔希望接下来写点其它东西，所以此篇文字就暂且当前完结篇的总结吧，以后有时间的话，可以继续加上一些未涉及的专题内容。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈模块化开发以及实现</title>
    <link href="http://yoursite.com/2016/10/20/%E8%A7%84%E8%8C%83/Common&amp;AMD&amp;CMD/"/>
    <id>http://yoursite.com/2016/10/20/规范/Common&amp;AMD&amp;CMD/</id>
    <published>2016-10-20T15:02:33.000Z</published>
    <updated>2017-03-15T08:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：个人认为想要最快的去学习某个新的技术最直接的是要知道它能解决什么事情，如果不知道他要做什么，我感觉源码让你看烂也不行，下面我将在下面的几个方面讲述一下前端模块化的必要性，这里<a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">#547 </a>玉伯也就是sea.js作者说的特别清楚 ，以及实现的方式，</p>
<p><strong>记住AMD&amp;CMD解决的是文件之间相互依赖的情况下script标签顺序问题而导致依赖关系发生错误，还有就是js文件的加载会阻塞页面渲染，使用AMD&amp;CMD我们就可以等到相关的js依赖加载完毕后，再去执行我们后面的代码（requirejs是执行后面的回调函数，seajs是依赖就近）</strong></p>
<a id="more"></a>
<h3 id="JavaScript语言的不足"><a href="#JavaScript语言的不足" class="headerlink" title="JavaScript语言的不足"></a>JavaScript语言的不足</h3><p>对于JavaScript文件：</p>
<ul>
<li>文件按<code>&lt;script&gt;</code>顺序加载，JavaScript本身缺少对文件依赖关系的管理。更重要的是：js文件的加载会阻塞页面渲染。</li>
<li>在单页面Web应用中，只有一个页面，但许多script不需要在页面初始化的时候一次性加载，只需要在加载了某个子页面时加载——这在Python叫模块动态加载、很自然；而原生JavaScript中是没有任何机制可以实现的。—— 这是一个性能问题。</li>
</ul>
<p>对于全局命名空间：</p>
<ul>
<li>JavaScript所有文件中的代码都在同一个全局命名空间中，也就是说任何文件定义的全变量和全局函数都在全局命名空间。——这根python之类的语言又大不一样。这条特性有利于文件间共享数据，但全局空间太容易失控而引入Bug。</li>
</ul>
<p>对于代码的模块化：</p>
<ul>
<li>即使不出现上述问题，模块化本身也是一个需求。模块化可以实现高内聚、低耦合的良好系统，但JavaScript没有提供模块化工具——我们至少需要“定义模块”和“引用模块”的功能。</li>
</ul>
<h3 id="注意到没：JavaScript的第三方库，都是单JS文件！！！"><a href="#注意到没：JavaScript的第三方库，都是单JS文件！！！" class="headerlink" title="注意到没：JavaScript的第三方库，都是单JS文件！！！"></a>注意到没：JavaScript的第三方库，都是单JS文件！！！</h3><p>不论多大、不论多少行内！@#￥%……&amp;*（）——</p>
<h3 id="所以我们的js中诞生了模块化这个概念………"><a href="#所以我们的js中诞生了模块化这个概念………" class="headerlink" title="所以我们的js中诞生了模块化这个概念………"></a>所以我们的js中诞生了模块化这个概念………</h3><p><strong>CommonJS 加载模块是同步的  <a href="https://github.com/seajs/seajs/issues/269" target="_blank" rel="external">#269</a> ，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD  CMD 解决方案。</strong> </p>
<p>下面再说一下AMD与CMD的区别</p>
<p>CMD和AMD的区别有以下几点：</p>
<p>1.对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。</p>
<p>2.CMD推崇依赖就近，AMD推崇依赖前置。</p>
<p>虽然 AMD也支持CMD写法，但依赖前置是官方文档的默认模块定义写法。</p>
<p>3.AMD的api默认是一个当多个用，CMD严格的区分推崇职责单一。例如：AMD里require分全局的和局部的。CMD里面没有全局的 require,提供 seajs.use()来实现模块系统的加载启动。CMD里每个API都简单纯粹。</p>
<p>##着重讲解一下AMD</p>
<h3 id="AMD-异步模块加载"><a href="#AMD-异步模块加载" class="headerlink" title="AMD 异步模块加载"></a>AMD 异步模块加载</h3><p>AMD的核心思想是，<strong>按需加载JS模块</strong>。</p>
<p>基于 AMD（Asynchronous Module Definition）的 JavaScript 设计已经在目前较为流行的前端框架中大行其道，jQuery、Dojo、MooTools、EmbedJS 等纷纷在其最新版本中加入了对 AMD 的支持。</p>
<p>RequireJS呢、是AMD规范最好的实现者之一。</p>
<h2 id="RequireJS概述"><a href="#RequireJS概述" class="headerlink" title="RequireJS概述"></a>RequireJS概述</h2><p>RequireJS 是一个JavaScript模块加载器。它聚焦于JavaScript的模块管理和文件管理、不但解决了上诉所有JavaScript的遗留问题，而且提供了某些额外的便利（稍后分解）。</p>
<h3 id="Why-RequireJS？"><a href="#Why-RequireJS？" class="headerlink" title="Why RequireJS？"></a>Why RequireJS？</h3><p>所以，知道了RequireJS是干什么的，也差不多知道为什么我们要使用RequireJS了。不过还是总结一下用RequireJS的好处吧。</p>
<ul>
<li>异步“加载”。我们知道，通常网站都会把script脚本的放在html的最后，这样就可以避免浏览器执行js带来的页面阻塞。使用RequireJS，<strong>会在相关的js加载后执行回调函数，这个过程是异步的</strong>，所以它不会阻塞页面。</li>
<li>按需加载。通过RequireJS，你可以在需要加载js逻辑的时候再加载对应 的js模块，这样避免了在初始化网页的时候发生大量的请求和数据传输，或许对于一些人来说，某些模块可能他根本就不需要，那就显得没有必要。</li>
<li>更加方便的模块依赖管理。相信你曾经一定遇到过因为script标签顺序问题而导致依赖关系发生错误，这个函数未定义，那个变量undefine之类的。<strong>通过RequireJS的机制，你能确保在所有的依赖模块都加载以后再执行相关的文件，所以可以起到依赖管理的作用</strong>。</li>
<li>更加高效的版本管理。想一想，如果你还是用的script脚本引入的方式来引入一个jQuery2.x的文件，然后你有100个页面都是这么引用的，那当你想换成jQuery3.x，那你就不得不去改这100个页面。但是如果你的requireJS有在config中做jQuery的path映射，那你只需要改一处地方即可。</li>
<li>当然还有一些诸如cdn加载不到js文件，可以请求本地文件等其它的优点，这里就不一一列举了。</li>
</ul>
<h3 id="RequireJS模块"><a href="#RequireJS模块" class="headerlink" title="RequireJS模块"></a>RequireJS模块</h3><p>既然是一个模块加载器，RequireJS肯定会定义一种requireJS风格的模块，以及配套的API。</p>
<h3 id="模块化脚本"><a href="#模块化脚本" class="headerlink" title="模块化脚本"></a>模块化脚本</h3><p>将一个js脚本文件中的所有代码，都定义在一个requireJS模块中，那么这个脚本就是“模块化脚本”。<br>由此可以看书，约定的思维是：一个js文件对应一个requireJS模块</p>
<p>RequireJS由James Burke创建，他也是AMD规范的创始人。</p>
<h2 id="RequireJS的使用"><a href="#RequireJS的使用" class="headerlink" title="RequireJS的使用"></a>RequireJS的使用</h2><p>RequireJS会让你以不同于往常的方式去写JavaScript。你将不再使用script标签在HTML中引入JS文件，以及不用通过script标签顺序去管理依赖关系。<br>当然也不会有阻塞（blocking）的情况发生</p>
<h3 id="RequireJS引入三个全局变量"><a href="#RequireJS引入三个全局变量" class="headerlink" title="RequireJS引入三个全局变量"></a>RequireJS引入三个全局变量</h3><p>require会定义三个变量：define,require,requirejs</p>
<ul>
<li>define 用来定义一个模块</li>
<li>require 加载依赖模块，并执行加载完后的回调函数<br>其中，require即使函数，也是一个对象。它上面挂了一些我们常用的方法如require.config()</li>
<li>require === requirejs</li>
</ul>
<h3 id="1、引入RequireJS"><a href="#1、引入RequireJS" class="headerlink" title="1、引入RequireJS"></a>1、引入RequireJS</h3><p>使用requirejs很简单，只需要在head中通过script标签引入它 —— 实际上除了require.js，其它文件模块都不再使用script标签引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script data-main=&quot;script/main&quot; src=&quot;require.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="data-main指定主模块"><a href="#data-main指定主模块" class="headerlink" title="data-main指定主模块"></a>data-main指定主模块</h4><p>细心的同学会发现script标签上了多了一个自定义属性：data-main=”script/main”，等号右边的main指的main.js。当然可以使用任意的名称。这个main指主模块或入口模块，好比c或java的主函数main。<br>通常在主模块中，进行RequireJS全局配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">        jquery: &apos;jquery-1.7.2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="副作用：data-main同时指定了默认的js路径"><a href="#副作用：data-main同时指定了默认的js路径" class="headerlink" title="副作用：data-main同时指定了默认的js路径"></a>副作用：data-main同时指定了默认的js路径</h4><p>上述main.js位于script/，所以之后本地文件的查找、使用相对路径的化、就会相对于这个路径去查找。</p>
<h3 id="2、require-config：全局配置"><a href="#2、require-config：全局配置" class="headerlink" title="2、require.config：全局配置"></a>2、require.config：全局配置</h3><p>require方法本身也是一个对象，它带有一个config方法，用来配置require.js运行参数。</p>
<p>应用中所有的js模块都应该在这里配置相关的信息。这些信息包含了每个模块的位置啥的，解决了到哪里去找到模块的问题。这块配置是全局的。</p>
<p>config方法接受一个对象作为参数。一般配置项都在页面data-main所指的js中 —— 这儿是js代码的总入口。<br>常用的配置有baseUrl，paths等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">    baseUrl: &quot;javascript&quot;,</div><div class="line">    paths: &#123;jquery: [&apos;http//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js&apos;,&apos;lib/jquery.min&apos;],</div><div class="line">            bootstrap: &apos;lib/bootstrap&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="baseUrl-配置本地路径的基准路径"><a href="#baseUrl-配置本地路径的基准路径" class="headerlink" title="baseUrl 配置本地路径的基准路径"></a>baseUrl 配置本地路径的基准路径</h4><p>baseUrl参数指定本地模块位置的基准目录，即本地模块的路径是相对于哪个目录的。该属性通常由require.js加载时的data-main属性指定，此时可以省略baseUrl</p>
<h4 id="paths-配置每个模块的位置"><a href="#paths-配置每个模块的位置" class="headerlink" title="paths 配置每个模块的位置"></a>paths 配置每个模块的位置</h4><p>paths参数指定各个模块的位置。这个位置可以是同一个服务器上的相对位置，也可以是外部网址。<br>可以为每个模块定义多个位置，如果第一个位置加载失败，则加载第二个位置，上面的示例就表示如果CDN加载失败，则加载服务器上的备用脚本。</p>
<p>需要注意的2点：</p>
<ul>
<li>关于后缀名 — <strong>指定本地文件路径时，可以省略文件最后的js后缀名。</strong></li>
<li>关于baseUrl — 本地模块的路径是相对于baseUrl去定义的。</li>
</ul>
<h4 id="什么样的模块可以不配置path？"><a href="#什么样的模块可以不配置path？" class="headerlink" title="什么样的模块可以不配置path？"></a>什么样的模块可以不配置path？</h4><p>如果模块moudleA.js跟引用它的文件是同一路径下的，那么就可以直接用<code>require([&quot;moduleA&quot;], function(ma){})</code>来引用该模块，不需要配置path —— 这种写法我也不建议。</p>
<h4 id="shim-加载非AMD规范的js"><a href="#shim-加载非AMD规范的js" class="headerlink" title="shim 加载非AMD规范的js"></a>shim 加载非AMD规范的js</h4><p>通过require加载的模块一般都需要符合AMD规范，即使用define来申明模块<br>但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能：shim，shim解释起来也比较难理解，shim直接翻译为”垫”，其实也是有这层意思的。<br>非AMD模块输出，将非标准的AMD模块”垫”成可用的模块，例如：在老版本的jquery中，是没有继承AMD规范的，所以不能直接require[“jquery”],<br>这时候就需要shim，那我们可以这样配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">  baseUrl: &quot;javascript&quot;,</div><div class="line">  paths: &#123;</div><div class="line">    jquery: &apos;lib/jquery.1.6&apos;,</div><div class="line">    bootstrap: &apos;lib/bootstrap&apos;</div><div class="line">  &#125;,</div><div class="line">  shim: &#123;</div><div class="line">    &quot;jquery&quot; : &#123;</div><div class="line">      exports : &quot;$&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样配置后，我们就可以在其他模块中引用jquery模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">require([&apos;jquery&apos;], function ($) &#123;</div><div class="line">    //do something....</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="jQuery与RequireJS"><a href="#jQuery与RequireJS" class="headerlink" title="jQuery与RequireJS ???"></a>jQuery与RequireJS ???</h4><p>我们知道jQuery从1.7后开始支持AMD规范，即如果jQuery作为一个AMD模块运行时，它的模块名是“jquery”。注意“jquery”是固定的，不能写“jQuery”或其它。</p>
<p>注：如果文件名“jquery-1.7.2.js”改为“jquery.js”就不必配置paths参数了。</p>
<p>我们知道jQuery最终向外暴露的是全局的jQuery和 $。如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.jQuery = window.$ = jQuery;</div></pre></td></tr></table></figure>
<p>如果将jQuery应用在模块化开发时，其实可以不使用全局的，即可以不暴露出来。需要用到jQuery时使用require函数即可</p>
<h3 id="3、define方法-定义自己的模块"><a href="#3、define方法-定义自己的模块" class="headerlink" title="3、define方法: 定义自己的模块"></a>3、define方法: 定义自己的模块</h3><p>define方法用于定义模块，RequireJS要求每个模块放在一个单独的文件里。<br>按照是否依赖其他模块，可以分成两种情况讨论。</p>
<ul>
<li>第一种情况是定义独立模块，即所定义的模块不依赖其他模块；</li>
<li>第二种情况是定义非独立模块，即所定义的模块依赖于其他模块。</li>
</ul>
<h4 id="定义没有依赖的独立模块"><a href="#定义没有依赖的独立模块" class="headerlink" title="定义没有依赖的独立模块"></a>定义没有依赖的独立模块</h4><p>如果被定义的模块是一个独立模块，不需要依赖任何其他模块，可以直接用define方法生成。</p>
<ul>
<li><p>define的参数可以是一个对象，此时该对象就是输出的模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">  method1: function() &#123;&#125;,</div><div class="line">  method2: function() &#123;&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>define的参数也可以是一个函数，此时该函数的返回值就是输出的模块。—— 显然这种写法更具有通用性，建议统一这样写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// math.js</div><div class="line">define(function ()&#123;</div><div class="line">  var add = function (x,y)&#123;</div><div class="line">    return x+y;</div><div class="line">  &#125;;</div><div class="line">  return &#123;</div><div class="line">    add: add</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="定义有依赖模块的模块"><a href="#定义有依赖模块的模块" class="headerlink" title="定义有依赖模块的模块"></a>定义有依赖模块的模块</h4><p>非独立模块如果被定义的模块需要依赖其他模块，则define方法必须采用下面的格式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([&apos;module1&apos;, &apos;module2&apos;], function(m1, m2) &#123;</div><div class="line"> ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>define方法的第一个参数是一个数组，它的成员是当前模块所依赖的模块。<br>比如，[‘module1’, ‘module2’]表示我们定义的这个新模块依赖于module1模块和module2模块，只有先加载这两个模块，新模块才能正常运行。<br>一般情况下，module1模块和module2模块指的是，当前目录下的module1.js文件和module2.js文件，等同于写成[‘./module1’, ‘./module2’]。</p>
</li>
</ul>
<blockquote>
<p>思考？ 如果新模块同属于module文件下，如何定义引入文件路径？</p>
</blockquote>
<ul>
<li><p>define方法的第二个参数是一个函数，当前面数组的所有成员加载成功后，它将被调用。</p>
<p>​</p>
<p>它的参数与数组的成员一一对应，比如function(m1, m2)就表示，这个函数的第一个参数m1对应module1模块，第二个参数m2对应module2模块。这个函数必须返回一个对象，供其他模块调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define([&apos;module1&apos;, &apos;module2&apos;], function(m1, m2) &#123;</div><div class="line">return &#123;</div><div class="line">  method: function() &#123;</div><div class="line">    m1.methodA();</div><div class="line">    m2.methodB();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="define回调必须返回一个对象？？"><a href="#define回调必须返回一个对象？？" class="headerlink" title="define回调必须返回一个对象？？"></a>define回调必须返回一个对象？？</h4><p>需要注意的是，回调函数必须返回一个对象，这个对象就是你定义的模块。<br>如果依赖的模块很多，参数与模块一一对应的写法非常麻烦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    [       &apos;dep1&apos;, &apos;dep2&apos;, &apos;dep3&apos;, &apos;dep4&apos;, &apos;dep5&apos;, &apos;dep6&apos;, &apos;dep7&apos;, &apos;dep8&apos;],</div><div class="line">    function(dep1,   dep2,   dep3,   dep4,   dep5,   dep6,   dep7,   dep8)&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>对于依赖模块特别多的情况，RequireJS有另一种等价写法： —— 还是竖版的好吧。。。！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">  function (require) &#123;</div><div class="line">    var dep1 = require(&apos;dep1&apos;),</div><div class="line">      dep2 = require(&apos;dep2&apos;),</div><div class="line">      dep3 = require(&apos;dep3&apos;),</div><div class="line">      dep4 = require(&apos;dep4&apos;),</div><div class="line">      ……</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="符合AMD规范的模块"><a href="#符合AMD规范的模块" class="headerlink" title="符合AMD规范的模块"></a>符合AMD规范的模块</h4><p>想象一下，如果你想把jquery、通过RequireJS、当做一个模块的方式引入进来，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">        jquery: &apos;jquery-1.7.2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>那么jquery必须首先就是一个requirejs模块，也就是说 —— jquery必须把所有代码包装在require.define的回调函数里、并且返回$变量，对不对？</p>
<p>所有这样的第三方库，就叫做“符合AMD规范的模块”</p>
<h3 id="4-require方法：在JS文件头部、声明依赖模块"><a href="#4-require方法：在JS文件头部、声明依赖模块" class="headerlink" title="4. require方法：在JS文件头部、声明依赖模块"></a>4. require方法：在JS文件头部、声明依赖模块</h3><p>require方法用于调用模块。它的参数与define方法类似。<br>1.普通加载方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">require([&apos;jquery&apos;,&apos;bootstrap&apos;], function ($) &#123;</div><div class="line">    $(&apos;.carousel&apos;).carousel(&#123;</div><div class="line">        interval: 3000</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面方法表示加载jquery和bootstrap两个模块，当这两个模块都加载成功后，执行一个回调函数。<br>该回调函数就用来完成具体的任务。require方法的第一个参数，是一个表示依赖关系的数组。</p>
<h3 id="有的模块会返回个对象，有的没有返回"><a href="#有的模块会返回个对象，有的没有返回" class="headerlink" title="有的模块会返回个对象，有的没有返回"></a>有的模块会返回个对象，有的没有返回</h3><p>如上，bootstrap就没有返回值。jquery有返回值，所以在function中声明$代表jquery模块返回的值。<br>注意前后是按顺序一一对应的<br>模块输出变量，如果某个模块不输出变量值，则没有，所以尽量将输出的模块写在前面，防止位置错乱引发误解</p>
<blockquote>
<p>可以看出JavaScript这风格跟我们从前的人生、多么的不同！！同样是在文件头部声明依赖模块，人家横着写。。。而且不干不净。。</p>
</blockquote>
<h2 id="小结：RequireJS的风格"><a href="#小结：RequireJS的风格" class="headerlink" title="小结：RequireJS的风格"></a>小结：RequireJS的风格</h2><ul>
<li>一个文件定义一个模块，用文件路径定义模块名，通过模块名声明模块加载</li>
<li>在文件头部声明依赖模块，人家是横着写的哦</li>
<li>.js常常可以省略<br>比如main-data中指定的js文件，可以省略路径；path中指定的位置、如果是本地文件，可以省略后缀</li>
<li>用别名代替全路径</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：个人认为想要最快的去学习某个新的技术最直接的是要知道它能解决什么事情，如果不知道他要做什么，我感觉源码让你看烂也不行，下面我将在下面的几个方面讲述一下前端模块化的必要性，这里&lt;a href=&quot;https://github.com/seajs/seajs/issues/547&quot;&gt;#547 &lt;/a&gt;玉伯也就是sea.js作者说的特别清楚 ，以及实现的方式，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住AMD&amp;amp;CMD解决的是文件之间相互依赖的情况下script标签顺序问题而导致依赖关系发生错误，还有就是js文件的加载会阻塞页面渲染，使用AMD&amp;amp;CMD我们就可以等到相关的js依赖加载完毕后，再去执行我们后面的代码（requirejs是执行后面的回调函数，seajs是依赖就近）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Zepto源码解读 以及前期知识点准备</title>
    <link href="http://yoursite.com/2016/10/14/%E6%A1%86%E6%9E%B6/zepto/zepto%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2016/10/14/框架/zepto/zepto源码/</id>
    <published>2016-10-14T14:57:30.000Z</published>
    <updated>2017-03-06T13:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你常用zepto，却没有试着深入zepto源码去看看它是如何实现的，你不好奇吗？跟随我，打开zepto的源码来分析一下，看看zepto是用何种方式做成了流行全世界的js库。</p>
<p>本课程内容主要有两个：</p>
<ul>
<li>分析zepto的设计思想，并思考如何才能实现这种设计；</li>
<li>打开zepto源码，看它是如何实现的；</li>
</ul>
<p>扩展内容：</p>
<ul>
<li>作者标注的 zepto core模块的源码注视；</li>
</ul>
<blockquote>
<p>至于为何要解读源码和设计？我想既然来看该教程的朋友，应该都知道它的意义，这里不再唠叨。总之，<strong>拜读经典框架的源码、学习设计思想，就等于站在巨人的肩膀上</strong>。</p>
</blockquote>
<a id="more"></a>
<h2 id="面向的用户"><a href="#面向的用户" class="headerlink" title="面向的用户"></a>面向的用户</h2><ul>
<li>用过zepto，熟悉zepto的常用API（默认你有js基础）</li>
<li>有基础并且想深入学习的『新兵』</li>
</ul>
<h2 id="关于时间"><a href="#关于时间" class="headerlink" title="关于时间"></a>关于时间</h2><p>现说一下，该教程讲义准备的时间是2016年7月份。您看到该教程的时间可能会比这个时间晚很多，但是没关系，该教程讲解的内容应该会一直有效。原因有二：</p>
<ul>
<li>zepto至今早就稳定了，代码不会有很大的变化；</li>
<li>只要ES6没有完全流行开（尚需babel转义），js的语法是不会变的；</li>
</ul>
<p><strong>因此，那些抱怨前端变化快的同学，您该转变一下观念了</strong> ——我一直觉得前端快的只是一小部分，当然这是题外话。</p>
<h2 id="关于文档形式"><a href="#关于文档形式" class="headerlink" title="关于文档形式"></a>关于文档形式</h2><p>仔细考虑以下问题：</p>
<blockquote>
<p>视频教程该用文档还是用ppt？</p>
</blockquote>
<ul>
<li>产品化（文档 - 产品；ppt - 事件）</li>
<li>持续化（文档更易事后查阅）</li>
<li>结构化（使知识更加体系，不零散）</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本教程中，讲解设计的部分大约占一半时间，分析源码占另一半时间。因为我觉得，分析和学习设计，比看源码要更加重要。</p>
<p>而另一半时间看源码肯定是看不完的，但是我们也没有必要看完，大家都挺忙的，咱们就好钢用在刀刃上。了解了关键的代码，剩下的完全可以自己来轻松看完——只要你想看。</p>
<p>我正式读过源码的经典框架有4个，我自己的感觉就是——<strong>解读源码之后，真正留在自己脑子里面的，是这个框架的设计思想</strong>。当跟我看完zepto-core的源码之后，你应该会有这种体会。</p>
<h2 id="诡异的数组"><a href="#诡异的数组" class="headerlink" title="诡异的数组"></a>诡异的数组</h2><p>那么接下来，先通过最简单的一个例子看一眼zepto的设计。先来一个很简单的html页面，``中的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;p id=&quot;p1&quot;&gt;测试&lt;/p&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;span&gt;test&lt;/span&gt;</div><div class="line">    &lt;span&gt;test&lt;/span&gt;</div><div class="line">    &lt;span&gt;test&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/zepto-1.1.6.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>运行页面，然后在chrome的控制台中输入代码做测试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var $p = $(&apos;p&apos;);  // $p 是数组</div><div class="line">var $span = $(&apos;span&apos;);  // $span 是数组</div></pre></td></tr></table></figure>
<p>以上代码中，<code>$p</code>和<code>$span</code>看起来都是数组，这没有问题。但是我们通过API知道，<code>$p.addClass</code>是一个函数，而一般的数组没有<code>addClass</code>这个函数。</p>
<p>如果都是一样的数组，那么<code>$p.addClass</code>是哪里来的呢？显然<code>$p</code>不是一个常规的数组。其实我们还有其他方法可以证明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">var $p = $(&apos;p&apos;);</div><div class="line"></div><div class="line">// 对比1</div><div class="line">arr.__proto__.constructor === Array;  // true</div><div class="line">$p.__proto__.constructor === Array;  // false</div><div class="line"></div><div class="line">// 对比2</div><div class="line">arr instanceof Array;  // true</div><div class="line">$p instanceof Array;  // false</div></pre></td></tr></table></figure>
<p>种种迹象表明，<code>$p</code>是一个看似数组，而非数组的东西。像《聊斋》里的画皮，是否很诡异。。。</p>
<h2 id="先扒一层皮"><a href="#先扒一层皮" class="headerlink" title="先扒一层皮"></a>先扒一层皮</h2><p>如果你对js语法不是很熟练，估计刚才就被这位『画皮』吓蒙了。不过别着急，如果它是画皮，我就是一个称职的老道士。现在先拿一张道符把它点破，然后下一节再教你一招桌妖大法，让你彻底把它打败。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">console.log(arr.__proto__);  // 输入一个对象</div></pre></td></tr></table></figure>
<p>如上代码，<code>arr.__proto__</code>输出了一个对象，对象里面包含了我们常用的操作数组的函数，例如<code>concat</code>,<code>push</code>,<code>map</code>等，<strong>先不要管这个<strong>proto</strong>是什么意思</strong>。就是因为这个<code>__proto__</code>有了这些函数，<code>arr</code>才能使用。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764b28657.png" alt="img"></p>
<p>js语法非常灵活（号称最大的底线就是无底线），对象是可以随便赋值的，那么我就可以将<code>__proto__</code>重新赋值，让数组具有其他函数的功能啊，例如加一个<code>addClass</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">arr.__proto__ = &#123;</div><div class="line">    addClass: function () &#123;</div><div class="line">        console.log(123);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">arr.addClass();   // 123</div></pre></td></tr></table></figure>
<p>注意，经过这一步，<code>arr.concat</code>等其他功能就没有，此时<code>arr</code>就只有<code>addClass</code>这一个函数相依为命了。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764cbc605.png" alt="img"></p>
<p>但是无论如何，此时我们再去拿<code>arr</code>来做第一次的那几个验证，得到的结果就和之前的<code>$p</code>一样了，即<code>arr</code>此时也称了一个不是数组的数组。</p>
<p>而zepto也就是这么干的。</p>
<h2 id="javascript-三座大山"><a href="#javascript-三座大山" class="headerlink" title="javascript 三座大山"></a>javascript 三座大山</h2><p>这个标题其实我自己总结的，目前网络上没有相关的说法。意思就是javascript中比较重要难懂的三点知识。熟练掌握了这三点，你的javascript的基本功才算是过关。否则，你去BAT这种公司去面试前端，估计是过不了关。</p>
<ul>
<li><strong>原型和原型链</strong></li>
<li><strong>上下文环境和作用域</strong></li>
<li><strong>单线程和异步</strong></li>
</ul>
<p>以上这『三座大山』我希望能找机会跟大家单独分享，此处只讲第一个的一部分，即讲到你能看懂后面zepto的设计，就够了。</p>
<h2 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a><code>Array.prototype</code></h2><p>先记住一句话——<strong>每一个函数，都有一个prototype属性</strong>——每一个函数，无论是你自定义的，还是系统内置的。不信可以试试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var fn = function() &#123;&#125;</div><div class="line">console.log( fn.prototype );</div></pre></td></tr></table></figure>
<p>这里打印出来的<code>fn.prototype</code>是一个对象，只有一个<code>constructor</code>属性，指向该函数自身，即<code>fn.prototype.constructor === fn</code>。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764cd4521.png" alt="img"></p>
<p>以上是自定义的函数，数组构造函数<code>Array</code>也是一个函数，只不过是浏览器内置的函数，它也得符合以上那句话。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log( typeof Array );   // &apos;function&apos;</div><div class="line">console.log( Array.prototype );</div></pre></td></tr></table></figure>
<p>这里打印出来的<code>Array.prototype</code>也是一个对象，也有一个<code>constructor</code>属性，指向该函数自身。只不过还内置了其他的属性——废话，内置的对象毛用没有还内置个卵劲啊。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764d259d6.png" alt="img"></p>
<h2 id="proto"><a href="#proto" class="headerlink" title="[].__proto__"></a><code>[].__proto__</code></h2><p>然后，再记住一句话——<strong>所有通过函数new出来的东西，这个东西都有一个<strong>proto</strong>指向这个函数的prototype</strong>，这里我们给他们分别取一个中文名字：</p>
<ul>
<li><code>prototype</code> （显示）原型</li>
<li><code>__proto__</code> 隐式原型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [];  // 等价于 var arr = new Array()</div><div class="line">arr.__proto__ === Array.prototype;  // true</div></pre></td></tr></table></figure>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764d3a167.png" alt="img"></p>
<p>然后，再记住一句话——<strong>当你想要使用一个对象（或者一个数组）的某个功能时：如果该对象本身具有这个功能，则直接使用；如果该对象本身没有这个功能，则去<strong>proto</strong>中找</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    fn1: function () &#123;</div><div class="line">        console.log(&apos;fn1&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.fn1();  // &apos;fn1&apos;</div><div class="line">obj.toString();  // &apos;[object Object]&apos;  （在 obj.__proto__ 中找到）</div></pre></td></tr></table></figure>
<p>数组也一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [];</div><div class="line">arr.push(1);   // 在 arr.__proto__ 中找到了 push  方法</div></pre></td></tr></table></figure>
<p>这就是为何数组会有<code>concat</code>、<code>push</code>等方法，顺藤摸瓜最终摸到了<code>Array.prototype</code>中来了。</p>
<p>因此，下列代码是成立的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].concat === Array.prototype.concat;</div><div class="line">[].push === Array.prototype.push;</div><div class="line">[].map === Array.prototype.map;</div></pre></td></tr></table></figure>
<h2 id="proto-是可修改的"><a href="#proto-是可修改的" class="headerlink" title="__proto__是可修改的"></a><code>__proto__</code>是可修改的</h2><p>上一节我们说过，<code>__proto__</code>就是一个基本的js对象，根据js无底线的语法规则，它是完全可以被修改或者重写的。这里不妨就再多唠叨两句。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764d558af.png" alt="img"></p>
<p>修改<code>__proto__</code>的例子。修改了之后，<code>arr</code>不仅有内置的<code>concat</code>、<code>push</code>等功能，还多了一个<code>addClass</code>功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">arr.__proto__.addClass = function () &#123;</div><div class="line">    console.log(123);</div><div class="line">&#125;</div><div class="line">arr.push(4);</div><div class="line">arr.addClass();   // 123</div></pre></td></tr></table></figure>
<p>完全重写 <code>__proto__</code> 的例子，上一节讲过。还是注意，重写<code>__proto__</code>之后，<code>arr</code>可就失去了<code>concat</code>、<code>push</code>等亲人了，只有一个<code>addClass</code>功能了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">arr.__proto__ = &#123;</div><div class="line">    addClass: function () &#123;</div><div class="line">        console.log(123);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">arr.addClass();   // 123</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一，上文中有三句话要记住并且理解；<br>第二，有了这些基础知识，再去扒zepto的皮就轻而易举了；<br>第三，关于js的原型和原型链的知识，真的还有很多话没有说；</p>
<h2 id="回顾zepto对象"><a href="#回顾zepto对象" class="headerlink" title="回顾zepto对象"></a>回顾zepto对象</h2><p>经过了上一节的知识补充之后，我们再回到先前zepto的那个例子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>test<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>test<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>test<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/zepto-1.1.6.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> $p1 = $(<span class="string">'#p1'</span>);</div><div class="line">    <span class="built_in">console</span>.log($p1);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> $span = $(<span class="string">'span'</span>);</div><div class="line">    <span class="built_in">console</span>.log($span);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面代码中，我们之前就了解到<code>$p</code>或者<code>$span</code>是一个数组，但是又扩展了其他功能（例如 <code>$p.addClass</code>），这里可以肯定的是，<code>$p.__proto__</code>肯定是被修改过的，而不仅仅是<code>Array.prototype</code>，否则不会有<code>addClass</code>功能。</p>
<h2 id="如何做到的"><a href="#如何做到的" class="headerlink" title="如何做到的"></a>如何做到的</h2><p>源码中如何做的，我们接下来会有详细的描述，不过我们这里可以使用自己的代码简单模拟一下。其实非常简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">arr.__proto__ = &#123;</div><div class="line">    addClass: function  () &#123;</div><div class="line">        console.log(&apos;this is addClass&apos;);</div><div class="line">    &#125;,</div><div class="line">    concat: Array.prototype.concat,</div><div class="line">    push: Array.prototype.push</div><div class="line">&#125;;</div><div class="line"></div><div class="line">arr.push(4);</div><div class="line">arr.addClass();</div></pre></td></tr></table></figure>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764d79a55.png" alt="img"></p>
<p><em>PS：其实源码在实现这个设计的时候，并不像上面代码那么简单，只不过原理是一样的。源码具体的实现方式，还得边解读边了解。</em></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>以上自己手写了几行代码，就简单模拟了一个zepto的设计结构，那么是不是和zepto一样呢？我们这里简单验证一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var $p = $(&apos;p&apos;);</div><div class="line"></div><div class="line">// 使用 constructor 验证</div><div class="line">arr.__proto__.constructor === $p.__proto__.constructor; // true</div><div class="line"></div><div class="line">// 使用 instanceof 验证</div><div class="line">console.log( $p instanceof Array );  // false</div><div class="line">console.log(arr instanceof Array );  // false</div></pre></td></tr></table></figure>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>如果你仅仅是想了解一下zepto的原理，以上这些内容基本够用了，至少你在公司拿它做个一小时的技术分享是完全没有问题的。</p>
<p>不过，你如果感觉看到这里就收获颇丰，那么我建议你继续跟着我往下看，你会收获更多更实用价值的东西！</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>将zepto-core的源码下载下来，然后看到最外层的结构是这样的</p>
<p>首先<code>window.Zepto</code>和<code>window.$</code>都赋值了<code>Zepto</code>这个变量，<code>Zepto</code>是个自执行的匿名函数，看源代码的最后几行，匿名函数返回了<code>$</code>变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">return</span> $</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">// If `$` is not yet defined, point it to `Zepto`</span></div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure>
<p>而代码中有如下几行，证明<code>Zepto</code>最终是个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以来测试一下，在运行zepto的页面中来验证</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> <span class="built_in">window</span>.$ ); <span class="comment">// 'function'</span></div></pre></td></tr></table></figure>
<p>总结一下，简单写来，这个结构可以简单模拟成这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $</div><div class="line"></div><div class="line">    <span class="comment">// ...省略N行代码...</span></div><div class="line"></div><div class="line">    $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...省略N行代码...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> $</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure>
<p>而且，在这里我们还可以看到，平常我们<code>$(&#39;p&#39;)</code>使用zepto的时候，最终顺藤摸瓜会执行到<code>$ = function(selector, context){</code>这个函数中（其中的内容可不深究），而<code>p</code>这个选择器也会传递给<code>selector</code>参数。这是我们下一节要讲述的内容。</p>
<h1 id="zepto-init-函数"><a href="#zepto-init-函数" class="headerlink" title="zepto.init 函数"></a>zepto.init 函数</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上一节，我们了解了zepto代码的最笼统的一个结构，而且模拟了一下代码。其实当时还漏了一点，就是代码里面有一个<code>zepto</code>变量不知道哪里定义的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $,</div><div class="line">        zepto = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...省略N行代码...</span></div><div class="line"></div><div class="line">    zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">        <span class="comment">// 函数内容</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...省略N行代码...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> $</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure>
<p>即，我们在创建一个zepto对象例如执行<code>$(&#39;p&#39;)</code>时，会进入<code>zepto.init</code>这个函数，并将参数也响应传递。接下来就进入<code>zepto.init</code>看看这个函数。</p>
<h2 id="zepto-init-函数-1"><a href="#zepto-init-函数-1" class="headerlink" title="zepto.init 函数"></a><code>zepto.init</code> 函数</h2><p><code>zepto.init</code>函数大约有几十行代码，把中间的那些<code>if...else...</code>操作去掉，剩下的就是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dom</div><div class="line"></div><div class="line">    <span class="comment">// ...此处省略N行...</span></div><div class="line"></div><div class="line">    <span class="comment">// create a new Zepto collection from the nodes found</span></div><div class="line">    <span class="keyword">return</span> zepto.Z(dom, selector)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>中间省略的代码，都是根据不同条件下对<code>dom</code>变量进行赋值。<code>dom</code>从名字也可以猜测出来，它将会赋值一个或多个DOM节点。最终，它将通过<code>selector</code>一起传递给<code>zepto.Z</code>函数并返回值。</p>
<p>至于<code>zepto.Z</code>是个什么鬼暂且先不管，先看看中间省略的代码是什么。</p>
<ul>
<li><strong>无参数，即$()</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If nothing given, return an empty Zepto collection</span></div><div class="line"><span class="keyword">if</span> (!selector) <span class="keyword">return</span> zepto.Z()</div></pre></td></tr></table></figure>
<p>上面代码，如果没有参数，将返回一个空的zepto集合，还是交给<code>zepto.Z</code>来处理，先不管。</p>
<ul>
<li><strong>selector参数是字符串，例如$(‘p’) $(‘’) $(‘#content’)</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</div><div class="line">  selector = selector.trim()</div><div class="line">  <span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line">  <span class="comment">// Note: In both Chrome 21 and Firefox 15, DOM error 12</span></div><div class="line">  <span class="comment">// is thrown if the fragment doesn't begin with &lt;</span></div><div class="line">  <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))</div><div class="line">    dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">  <span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line">  <span class="comment">// nodes from there</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">  <span class="comment">// If it's a CSS selector, use it to select nodes.</span></div><div class="line">  <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码，如果<code>selector</code>是字符串，接下来会有三种情况。</p>
<p>情况1，参数为<code>`这种形式，即是一个html标签的，那么</code>dom<code>变量会被赋值为用这个标签创建的DOM对象，就像</code>dom = document.createElement(‘div’)<code>差不多。其中涉及到了</code>fragmentRE<code>和</code>zepto.fragment`两个我们尚未了解的东东，此处不要深究，知道这段代码的意思即可。</p>
<p>注意，通过测试发现，这里给<code>dom</code>赋值的其实不是一个dom节点对象，而是被封装称了数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line"><span class="comment">// Note: In both Chrome 21 and Firefox 15, DOM error 12</span></div><div class="line"><span class="comment">// is thrown if the fragment doesn't begin with &lt;</span></div><div class="line"><span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))</div><div class="line">  dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div></pre></td></tr></table></figure>
<p>情况2，如果第二个参数有值，则先根据第二个参数生成zepto对象，然后再调用<code>.find</code>来获取，例如<code>$(&#39;.item&#39;, &#39;#content&#39;)</code>这种用法。<code>find</code>方法是zepto对象的一个函数，API中用法的介绍。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line"><span class="comment">// nodes from there</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div></pre></td></tr></table></figure>
<p>情况3，以上两种情况都不是，则调用<code>zepto.qsa</code>来获取数据，后来聊这个方法的具体实现。<code>qsa</code>即<code>querySelectAll</code>的缩写，看名字能大体明白了吧？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If it's a CSS selector, use it to select nodes.</span></div><div class="line"><span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div></pre></td></tr></table></figure>
<ul>
<li><strong>selector参数是函数，例如$(function(){…})</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If a function is given, call it when the DOM is ready</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector)</div></pre></td></tr></table></figure>
<p>这种用法也比较常见，意思是待dom加载完毕再执行函数。这个<code>ready</code>函数的具体实现后面会讲到，这里先知道意思即可。</p>
<ul>
<li><strong>selector本身就是个zepto对象</strong></li>
</ul>
<p>这种用法比较少，但是也不能避免，例如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = $(<span class="string">'p'</span>);</div><div class="line">$(a);  <span class="comment">// 这里传入的 a 本身就是个 zepto 对象了。</span></div></pre></td></tr></table></figure>
<p>源码中使用<code>zepto.isZ</code>来判断，如果是的话，直接就返回自身。<code>zepto.isZ</code>的实现很简单，看源码即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If a Zepto collection is given, just return it</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) <span class="keyword">return</span> selector</div></pre></td></tr></table></figure>
<ul>
<li><strong>其他情况</strong></li>
</ul>
<p>当以上情况都不符合的时候，即<code>selector</code>参数既不是空、也不是字符串、也不是函数的时候。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// normalize array if an array of nodes is given</span></div><div class="line">  <span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</div><div class="line">  <span class="comment">// Wrap DOM nodes.</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</div><div class="line">    dom = [selector], selector = <span class="literal">null</span></div><div class="line">  <span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</div><div class="line">    dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">  <span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line">  <span class="comment">// nodes from there</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">  <span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></div><div class="line">  <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>情况1，<code>selector</code>参数是数组，则通过一个<code>compact</code>处理一下赋值给<code>dom</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// normalize array if an array of nodes is given</span></div><div class="line"><span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</div></pre></td></tr></table></figure>
<p>情况2，<code>selector</code>参数是DOM节点，则将它作为数组赋值给<code>dom</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Wrap DOM nodes.</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</div><div class="line">  dom = [selector], selector = <span class="literal">null</span></div></pre></td></tr></table></figure>
<p>剩余情况，其实在<code>selector</code>是字符串的时候就已经考虑到了，因此感觉这里多余了。不过也可能是我考虑不周到，有疏漏的地方，如果谁发现了还望不吝赐教。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</div><div class="line">  dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line"><span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line"><span class="comment">// nodes from there</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line"><span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></div><div class="line"><span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div></pre></td></tr></table></figure>
<p><strong>这里请注意，虽然有些处理函数这一节没有详细看代码实现，但是最终，赋值给dom的形式是一个数组。就像这段代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Wrap DOM nodes.</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</div><div class="line">  dom = [selector], selector = <span class="literal">null</span></div></pre></td></tr></table></figure>
<p>可以针对不同情况的<code>selector</code>，跟踪代码看一下。</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><code>zepto.init</code>函数算是zepto源码中比较复杂的一个函数，一开篇就遇到了个硬骨头。不过我们这里暂且先把那些分叉放在一边，先把大路疏通，然后在慢慢的去一个一个攻破那些分叉。</p>
<p>接下来我们再把<code>init</code>函数的结构梳理一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dom</div><div class="line"></div><div class="line">    <span class="comment">// 分情况对dom赋值：</span></div><div class="line">    <span class="comment">// 1. selector 为空</span></div><div class="line">    <span class="comment">// 2. selector 是字符串，其中又分好几种情况</span></div><div class="line">    <span class="comment">// 3. selector 是函数</span></div><div class="line">    <span class="comment">// 4. 其他情况，例如 selector 是数组、对象等</span></div><div class="line"></div><div class="line">    <span class="comment">// create a new Zepto collection from the nodes found</span></div><div class="line">    <span class="keyword">return</span> zepto.Z(dom, selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="zepto-Z-函数"><a href="#zepto-Z-函数" class="headerlink" title="zepto.Z 函数"></a>zepto.Z 函数</h1><p>只要还能往前走，就先走着，那些岔道回头再说。只要思路捋顺了，那些零碎的问题，都不是问题。</p>
<h2 id="zepto-Z-函数-1"><a href="#zepto-Z-函数-1" class="headerlink" title="zepto.Z 函数"></a><code>zepto.Z</code> 函数</h2><p>上一节了解到<code>zepto.init</code>函数中，最终又将数据传递给了<code>zepto.Z</code>函数。这个函数其实非常简单，如果你看不懂，可能是忘记之前讲过的原型链的知识了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// `$.zepto.Z` swaps out the prototype of the given `dom` array</span></div><div class="line"><span class="comment">// of nodes with `$.fn` and thus supplying all the Zepto functions</span></div><div class="line"><span class="comment">// to the array. Note that `__proto__` is not supported on Internet</span></div><div class="line"><span class="comment">// Explorer. This method can be overriden in plugins.</span></div><div class="line">zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">  dom = dom || []</div><div class="line">  dom.__proto__ = $.fn</div><div class="line">  dom.selector = selector || <span class="string">''</span></div><div class="line">  <span class="keyword">return</span> dom</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码中，<code>dom</code>是一个数组，并且把它的隐式原型赋值<code>$.fn</code>，而这里的<code>$.fn</code>其实就是一个普通的js对象（马上要说），跟我们之前讲述js原型链的时候一模一样。</p>
<hr>
<p><strong>PS：后来发现，最新的zepto.Z实现上目前不一样，到最后再给大家聊聊这事儿。不过这丝毫不影响其他代码的讲解，请放心</strong></p>
<h2 id="fn是个什么鬼？"><a href="#fn是个什么鬼？" class="headerlink" title="$.fn是个什么鬼？"></a><code>$.fn</code>是个什么鬼？</h2><p>我们在之前的章节说过，<code>$</code>是一个函数，即</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而函数也像对象一样，可以随便定义属性赋值的。之前我们说过，每个函数都会有一个内置的<code>prototype</code>属性，这是内置的，我们完全可以自定义一个属性，这个完全可以的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.fn = &#123;</div><div class="line">    a: 100</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>而zepto源码中，<code>$.fn</code>是这样赋值的，可以去源码中挨个看看其中的属性。</p>
<p><img src="http://box.kancloud.cn/2016-07-03_5778a76cc9f98.png" alt="img"></p>
<p>我们之前模拟过一个zepto设计的代码，还记得吧。我们代码分析到这里，你可以发现，zepto的源码实现，跟我们之前模拟的一模一样。</p>
<p><em>当然，之前的模拟是我故意那么做的，目的是为了将大家更容易的带入进来</em></p>
<h1 id="回顾-1"><a href="#回顾-1" class="headerlink" title="回顾"></a>回顾</h1><p>源码分析到这里，我们用一个简单的代码结构对之前的工作做一个总结。并且根据这个结构，把初始化一个zepto对象的过程在捋一捋。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764d9fab9.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $,</div><div class="line">        zepto = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...省略N行代码...</span></div><div class="line"></div><div class="line">    zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">      dom = dom || []</div><div class="line">      dom.__proto__ = $.fn</div><div class="line">      dom.selector = selector || <span class="string">''</span></div><div class="line">      <span class="keyword">return</span> dom</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> dom</div><div class="line"></div><div class="line">        <span class="comment">// 针对参数情况，分别对dom赋值</span></div><div class="line"></div><div class="line">        <span class="comment">// 最终调用 zepto.Z 返回的数据</span></div><div class="line">        <span class="keyword">return</span> zepto.Z(dom, selector)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $.fn = &#123;</div><div class="line">        <span class="comment">// 里面有若干个工具函数</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...省略N行代码...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> $</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure>
<h1 id="最新的zepto-Z函数"><a href="#最新的zepto-Z函数" class="headerlink" title="最新的zepto.Z函数"></a>最新的zepto.Z函数</h1><h2 id="新旧对比"><a href="#新旧对比" class="headerlink" title="新旧对比"></a>新旧对比</h2><p>在准备课程的这个时间 <a href="https://github.com/madrobby/zepto/blob/master/src/zepto.js#files" target="_blank" rel="external">https://github.com/madrobby/zepto/blob/master/src/zepto.js#files</a> 其中的代码中，<code>zepto.Z</code>是这样实现的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</div><div class="line">  <span class="keyword">this</span>.length = len</div><div class="line">  <span class="keyword">this</span>.selector = selector || <span class="string">''</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// `$.zepto.Z` swaps out the prototype of the given `dom` array</span></div><div class="line"><span class="comment">// of nodes with `$.fn` and thus supplying all the Zepto functions</span></div><div class="line"><span class="comment">// to the array. This method can be overridden in plugins.</span></div><div class="line">zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector)</div><div class="line">&#125;</div><div class="line"></div><div class="line">$.fn = &#123;</div><div class="line">  <span class="comment">// ...很多属性...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">zepto.Z.prototype = Z.prototype = $.fn</div></pre></td></tr></table></figure>
<p>再把之前的拿出来对比一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// `$.zepto.Z` swaps out the prototype of the given `dom` array</span></div><div class="line"><span class="comment">// of nodes with `$.fn` and thus supplying all the Zepto functions</span></div><div class="line"><span class="comment">// to the array. Note that `__proto__` is not supported on Internet</span></div><div class="line"><span class="comment">// Explorer. This method can be overriden in plugins.</span></div><div class="line">zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">  dom = dom || []</div><div class="line">  dom.__proto__ = $.fn</div><div class="line">  dom.selector = selector || <span class="string">''</span></div><div class="line">  <span class="keyword">return</span> dom</div><div class="line">&#125;</div><div class="line"></div><div class="line">$.fn = &#123;</div><div class="line">  <span class="comment">// ...很多属性...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="两者的异同"><a href="#两者的异同" class="headerlink" title="两者的异同"></a>两者的异同</h2><p>第二种实现方式我们已经讲完了，最终它返回的一个数组，并且强制将<code>__proto__</code>修改为<code>$.fn</code>这个对象。这个修改发生在对象上，修改的隐式原型。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764d9fab9.png" alt="img"></p>
<p>而第一种实现方式，是直接将构造函数的原型修改了，即 <code>Z.prototype = $.fn</code>，经过这样一改，构造函数再<code>new</code>出来的对象的隐式原型<code>__proto__</code>自然就指向了<code>$.fn</code>。</p>
<p><img src="http://box.kancloud.cn/2016-07-04_577a764dc04f6.png" alt="img"></p>
<p>另外，第一种方式返回的是一个<code>对象数组</code>，而第二种返回的是一个数组。何谓对象数组？——即可以模拟进行数组操作的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> objArray = &#123;</div><div class="line">    <span class="number">0</span>: <span class="string">'abc'</span>,</div><div class="line">    <span class="number">1</span>: <span class="string">'bcd'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'cde'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( objArray[<span class="number">1</span>] )</div><div class="line"><span class="built_in">console</span>.log( objArray.length )</div></pre></td></tr></table></figure>
<p>那为何不用数组，而用对象数组？——对象本质上更加灵活、直观，例如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objArray.selector = <span class="string">''</span>;</div></pre></td></tr></table></figure>
<h1 id="附：zepto-core-1-1-6-源码注释"><a href="#附：zepto-core-1-1-6-源码注释" class="headerlink" title="附：zepto-core-1.1.6 源码注释"></a>附：zepto-core-1.1.6 源码注释</h1><h2 id="是否有必要讲解整个源码？"><a href="#是否有必要讲解整个源码？" class="headerlink" title="是否有必要讲解整个源码？"></a>是否有必要讲解整个源码？</h2><p>我个人觉得源码还得靠自己来看，但是自己直接看源码会有点晕头转向，因此本教程分析了整个代码的设计思想，这样再读起来就方便了。</p>
<p>不过如果大部分同学觉得有必要把源码再分析一遍，我可能会准备这样一份教程给大家分享。</p>
<h2 id="源码注视"><a href="#源码注视" class="headerlink" title="源码注视"></a>源码注视</h2><p>以下是我读完了并写了注释了zepto core 模块的源码，如果您想继续阅读其他源码，可参阅。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div><div class="line">1347</div><div class="line">1348</div><div class="line">1349</div><div class="line">1350</div><div class="line">1351</div><div class="line">1352</div><div class="line">1353</div><div class="line">1354</div><div class="line">1355</div><div class="line">1356</div><div class="line">1357</div><div class="line">1358</div><div class="line">1359</div><div class="line">1360</div><div class="line">1361</div><div class="line">1362</div><div class="line">1363</div><div class="line">1364</div><div class="line">1365</div><div class="line">1366</div><div class="line">1367</div><div class="line">1368</div><div class="line">1369</div><div class="line">1370</div><div class="line">1371</div><div class="line">1372</div><div class="line">1373</div><div class="line">1374</div><div class="line">1375</div><div class="line">1376</div><div class="line">1377</div><div class="line">1378</div><div class="line">1379</div><div class="line">1380</div><div class="line">1381</div><div class="line">1382</div><div class="line">1383</div><div class="line">1384</div><div class="line">1385</div><div class="line">1386</div><div class="line">1387</div><div class="line">1388</div><div class="line">1389</div><div class="line">1390</div><div class="line">1391</div><div class="line">1392</div><div class="line">1393</div><div class="line">1394</div><div class="line">1395</div><div class="line">1396</div><div class="line">1397</div><div class="line">1398</div><div class="line">1399</div><div class="line">1400</div><div class="line">1401</div><div class="line">1402</div><div class="line">1403</div><div class="line">1404</div><div class="line">1405</div><div class="line">1406</div><div class="line">1407</div><div class="line">1408</div><div class="line">1409</div><div class="line">1410</div><div class="line">1411</div><div class="line">1412</div><div class="line">1413</div><div class="line">1414</div><div class="line">1415</div><div class="line">1416</div><div class="line">1417</div><div class="line">1418</div><div class="line">1419</div><div class="line">1420</div><div class="line">1421</div><div class="line">1422</div><div class="line">1423</div><div class="line">1424</div><div class="line">1425</div><div class="line">1426</div><div class="line">1427</div><div class="line">1428</div><div class="line">1429</div><div class="line">1430</div><div class="line">1431</div><div class="line">1432</div><div class="line">1433</div><div class="line">1434</div><div class="line">1435</div><div class="line">1436</div><div class="line">1437</div><div class="line">1438</div><div class="line">1439</div><div class="line">1440</div><div class="line">1441</div><div class="line">1442</div><div class="line">1443</div><div class="line">1444</div><div class="line">1445</div><div class="line">1446</div><div class="line">1447</div><div class="line">1448</div><div class="line">1449</div><div class="line">1450</div><div class="line">1451</div><div class="line">1452</div><div class="line">1453</div><div class="line">1454</div><div class="line">1455</div><div class="line">1456</div><div class="line">1457</div><div class="line">1458</div><div class="line">1459</div><div class="line">1460</div><div class="line">1461</div><div class="line">1462</div><div class="line">1463</div><div class="line">1464</div><div class="line">1465</div><div class="line">1466</div><div class="line">1467</div><div class="line">1468</div><div class="line">1469</div><div class="line">1470</div><div class="line">1471</div><div class="line">1472</div><div class="line">1473</div><div class="line">1474</div><div class="line">1475</div><div class="line">1476</div><div class="line">1477</div><div class="line">1478</div><div class="line">1479</div><div class="line">1480</div><div class="line">1481</div><div class="line">1482</div><div class="line">1483</div><div class="line">1484</div><div class="line">1485</div><div class="line">1486</div><div class="line">1487</div><div class="line">1488</div><div class="line">1489</div><div class="line">1490</div><div class="line">1491</div><div class="line">1492</div><div class="line">1493</div><div class="line">1494</div><div class="line">1495</div><div class="line">1496</div><div class="line">1497</div><div class="line">1498</div><div class="line">1499</div><div class="line">1500</div><div class="line">1501</div><div class="line">1502</div><div class="line">1503</div><div class="line">1504</div><div class="line">1505</div><div class="line">1506</div><div class="line">1507</div><div class="line">1508</div><div class="line">1509</div><div class="line">1510</div><div class="line">1511</div><div class="line">1512</div><div class="line">1513</div><div class="line">1514</div><div class="line">1515</div><div class="line">1516</div><div class="line">1517</div><div class="line">1518</div><div class="line">1519</div><div class="line">1520</div><div class="line">1521</div><div class="line">1522</div><div class="line">1523</div><div class="line">1524</div><div class="line">1525</div><div class="line">1526</div><div class="line">1527</div><div class="line">1528</div><div class="line">1529</div><div class="line">1530</div><div class="line">1531</div><div class="line">1532</div><div class="line">1533</div><div class="line">1534</div><div class="line">1535</div><div class="line">1536</div><div class="line">1537</div><div class="line">1538</div><div class="line">1539</div><div class="line">1540</div><div class="line">1541</div><div class="line">1542</div><div class="line">1543</div><div class="line">1544</div><div class="line">1545</div><div class="line">1546</div><div class="line">1547</div><div class="line">1548</div><div class="line">1549</div><div class="line">1550</div><div class="line">1551</div><div class="line">1552</div><div class="line">1553</div><div class="line">1554</div><div class="line">1555</div><div class="line">1556</div><div class="line">1557</div><div class="line">1558</div><div class="line">1559</div><div class="line">1560</div><div class="line">1561</div><div class="line">1562</div><div class="line">1563</div><div class="line">1564</div><div class="line">1565</div><div class="line">1566</div><div class="line">1567</div><div class="line">1568</div><div class="line">1569</div><div class="line">1570</div><div class="line">1571</div><div class="line">1572</div><div class="line">1573</div><div class="line">1574</div><div class="line">1575</div><div class="line">1576</div><div class="line">1577</div><div class="line">1578</div><div class="line">1579</div><div class="line">1580</div><div class="line">1581</div><div class="line">1582</div><div class="line">1583</div><div class="line">1584</div><div class="line">1585</div><div class="line">1586</div><div class="line">1587</div><div class="line">1588</div><div class="line">1589</div><div class="line">1590</div><div class="line">1591</div><div class="line">1592</div><div class="line">1593</div><div class="line">1594</div><div class="line">1595</div><div class="line">1596</div><div class="line">1597</div><div class="line">1598</div><div class="line">1599</div><div class="line">1600</div><div class="line">1601</div><div class="line">1602</div><div class="line">1603</div><div class="line">1604</div><div class="line">1605</div><div class="line">1606</div><div class="line">1607</div><div class="line">1608</div><div class="line">1609</div><div class="line">1610</div><div class="line">1611</div><div class="line">1612</div><div class="line">1613</div><div class="line">1614</div><div class="line">1615</div><div class="line">1616</div><div class="line">1617</div><div class="line">1618</div><div class="line">1619</div><div class="line">1620</div><div class="line">1621</div><div class="line">1622</div><div class="line">1623</div><div class="line">1624</div><div class="line">1625</div><div class="line">1626</div><div class="line">1627</div><div class="line">1628</div><div class="line">1629</div><div class="line">1630</div><div class="line">1631</div><div class="line">1632</div><div class="line">1633</div><div class="line">1634</div><div class="line">1635</div><div class="line">1636</div><div class="line">1637</div><div class="line">1638</div><div class="line">1639</div><div class="line">1640</div><div class="line">1641</div><div class="line">1642</div><div class="line">1643</div><div class="line">1644</div><div class="line">1645</div><div class="line">1646</div><div class="line">1647</div><div class="line">1648</div><div class="line">1649</div><div class="line">1650</div><div class="line">1651</div><div class="line">1652</div><div class="line">1653</div><div class="line">1654</div><div class="line">1655</div><div class="line">1656</div><div class="line">1657</div><div class="line">1658</div><div class="line">1659</div><div class="line">1660</div><div class="line">1661</div><div class="line">1662</div><div class="line">1663</div><div class="line">1664</div><div class="line">1665</div><div class="line">1666</div><div class="line">1667</div><div class="line">1668</div><div class="line">1669</div><div class="line">1670</div><div class="line">1671</div><div class="line">1672</div><div class="line">1673</div><div class="line">1674</div><div class="line">1675</div><div class="line">1676</div><div class="line">1677</div><div class="line">1678</div><div class="line">1679</div><div class="line">1680</div><div class="line">1681</div><div class="line">1682</div><div class="line">1683</div><div class="line">1684</div><div class="line">1685</div><div class="line">1686</div><div class="line">1687</div><div class="line">1688</div><div class="line">1689</div><div class="line">1690</div><div class="line">1691</div><div class="line">1692</div><div class="line">1693</div><div class="line">1694</div><div class="line">1695</div><div class="line">1696</div><div class="line">1697</div><div class="line">1698</div><div class="line">1699</div><div class="line">1700</div><div class="line">1701</div><div class="line">1702</div><div class="line">1703</div><div class="line">1704</div><div class="line">1705</div><div class="line">1706</div><div class="line">1707</div><div class="line">1708</div><div class="line">1709</div><div class="line">1710</div><div class="line">1711</div><div class="line">1712</div><div class="line">1713</div><div class="line">1714</div><div class="line">1715</div><div class="line">1716</div><div class="line">1717</div><div class="line">1718</div><div class="line">1719</div><div class="line">1720</div><div class="line">1721</div><div class="line">1722</div><div class="line">1723</div><div class="line">1724</div><div class="line">1725</div><div class="line">1726</div><div class="line">1727</div><div class="line">1728</div><div class="line">1729</div><div class="line">1730</div><div class="line">1731</div><div class="line">1732</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Zepto v1.1.6 - zepto event ajax form ie - zeptojs.com/license */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> <span class="literal">undefined</span>, key, $, classList, </div><div class="line"></div><div class="line">      <span class="comment">// 获取数组的slice 和 filter（返回数组中的满足回调函数中指定的条件的元素）方法</span></div><div class="line">      emptyArray = [], slice = emptyArray.slice, filter = emptyArray.filter,</div><div class="line"></div><div class="line">      <span class="built_in">document</span> = <span class="built_in">window</span>.document,</div><div class="line">      elementDisplay = &#123;&#125;, classCache = &#123;&#125;,</div><div class="line">      cssNumber = &#123;</div><div class="line">        <span class="string">'column-count'</span>: <span class="number">1</span>, </div><div class="line">        <span class="string">'columns'</span>: <span class="number">1</span>, </div><div class="line">        <span class="string">'font-weight'</span>: <span class="number">1</span>, </div><div class="line">        <span class="string">'line-height'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'opacity'</span>: <span class="number">1</span>, </div><div class="line">        <span class="string">'z-index'</span>: <span class="number">1</span>, </div><div class="line">        <span class="string">'zoom'</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="comment">// 取出html代码中第一个html标签（或注释），如取出 &lt;p&gt;123&lt;/p&gt;&lt;h1&gt;345&lt;/h1&gt; 中的 &lt;p&gt;</span></div><div class="line">      fragmentRE = <span class="regexp">/^\s*&lt;(\w+|!)[^&gt;]*&gt;/</span>,</div><div class="line">      <span class="comment">// 匹配 &lt;img /&gt; &lt;p&gt;&lt;/p&gt;  不匹配 &lt;img src=""/&gt; &lt;p&gt;123&lt;/p&gt;</span></div><div class="line">      singleTagRE = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>,</div><div class="line">      <span class="comment">// 单标签</span></div><div class="line">      tagExpanderRE = <span class="regexp">/&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/ig</span>,</div><div class="line">      <span class="comment">// body html</span></div><div class="line">      rootNodeRE = <span class="regexp">/^(?:body|html)$/i</span>,</div><div class="line">      <span class="comment">// 大写字母</span></div><div class="line">      capitalRE = <span class="regexp">/([A-Z])/g</span>,</div><div class="line"></div><div class="line">      <span class="comment">// special attributes that should be get/set via method calls</span></div><div class="line">      <span class="comment">// 应该通过方法调用来设置/获取的特殊属性</span></div><div class="line">      methodAttributes = [<span class="string">'val'</span>, <span class="string">'css'</span>, <span class="string">'html'</span>, <span class="string">'text'</span>, <span class="string">'data'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'offset'</span>],</div><div class="line"></div><div class="line">      adjacencyOperators = [ <span class="string">'after'</span>, <span class="string">'prepend'</span>, <span class="string">'before'</span>, <span class="string">'append'</span> ],</div><div class="line"></div><div class="line">      table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>),</div><div class="line">      tableRow = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>),</div><div class="line">      <span class="comment">// 指定特殊元素的 容器</span></div><div class="line">      containers = &#123;</div><div class="line">        <span class="string">'tr'</span>: <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>),</div><div class="line">        <span class="string">'tbody'</span>: table, </div><div class="line">        <span class="string">'thead'</span>: table, </div><div class="line">        <span class="string">'tfoot'</span>: table,</div><div class="line">        <span class="string">'td'</span>: tableRow, </div><div class="line">        <span class="string">'th'</span>: tableRow,</div><div class="line">        <span class="comment">// 除了上面指定的，其他所有元素的容器都是 div</span></div><div class="line">        <span class="string">'*'</span>: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="comment">// interactive ？？？</span></div><div class="line">      readyRE = <span class="regexp">/complete|loaded|interactive/</span>,</div><div class="line"></div><div class="line">      <span class="comment">// 匹配一个包括（字母、数组、下划线、-）的字符串</span></div><div class="line">      simpleSelectorRE = <span class="regexp">/^[\w-]*$/</span>,</div><div class="line"></div><div class="line">      class2type = &#123;&#125;,</div><div class="line">      toString = class2type.toString,</div><div class="line"></div><div class="line">      zepto = &#123;&#125;,</div><div class="line">      camelize, uniq,</div><div class="line"></div><div class="line">      tempParent = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line"></div><div class="line">      <span class="comment">// 属性转换为 camalCase 格式。</span></div><div class="line">      <span class="comment">// $.fn.prop 方法用到了</span></div><div class="line">      propMap = &#123;</div><div class="line">        <span class="string">'tabindex'</span>: <span class="string">'tabIndex'</span>,</div><div class="line">        <span class="string">'readonly'</span>: <span class="string">'readOnly'</span>,</div><div class="line">        <span class="string">'for'</span>: <span class="string">'htmlFor'</span>,</div><div class="line">        <span class="string">'class'</span>: <span class="string">'className'</span>,</div><div class="line">        <span class="string">'maxlength'</span>: <span class="string">'maxLength'</span>,</div><div class="line">        <span class="string">'cellspacing'</span>: <span class="string">'cellSpacing'</span>,</div><div class="line">        <span class="string">'cellpadding'</span>: <span class="string">'cellPadding'</span>,</div><div class="line">        <span class="string">'rowspan'</span>: <span class="string">'rowSpan'</span>,</div><div class="line">        <span class="string">'colspan'</span>: <span class="string">'colSpan'</span>,</div><div class="line">        <span class="string">'usemap'</span>: <span class="string">'useMap'</span>,</div><div class="line">        <span class="string">'frameborder'</span>: <span class="string">'frameBorder'</span>,</div><div class="line">        <span class="string">'contenteditable'</span>: <span class="string">'contentEditable'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// 判断是否是arr的函数</span></div><div class="line">      isArray = <span class="built_in">Array</span>.isArray || <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123; <span class="keyword">return</span> object <span class="keyword">instanceof</span> <span class="built_in">Array</span> &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 上文定义 zepto = &#123;&#125;</span></div><div class="line">  <span class="comment">// 判断 element 是否符合 selector 的选择要求</span></div><div class="line">  zepto.matches = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>) </span>&#123;</div><div class="line">    <span class="comment">// selector有值，element有值，element是普通DOM节点</span></div><div class="line">    <span class="keyword">if</span> (!selector || !element || element.nodeType !== <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line"></div><div class="line">    <span class="comment">// elem.matchesSelector('.item') </span></div><div class="line">    <span class="comment">// 判断当前的 elem 是否符合传入的 selector 的要求 </span></div><div class="line">    <span class="keyword">var</span> matchesSelector = element.webkitMatchesSelector || </div><div class="line">                          element.mozMatchesSelector ||</div><div class="line">                          element.oMatchesSelector || </div><div class="line">                          element.matchesSelector</div><div class="line">    <span class="keyword">if</span> (matchesSelector) <span class="keyword">return</span> matchesSelector.call(element, selector)</div><div class="line"></div><div class="line">    <span class="comment">// 浏览器不支持 matchesSelector</span></div><div class="line">    <span class="comment">// fall back to performing a selector:</span></div><div class="line">    <span class="keyword">var</span> match, </div><div class="line">        parent = element.parentNode, </div><div class="line">        temp = !parent</div><div class="line"></div><div class="line">    <span class="comment">// 上文定义 tempParent = document.createElement('div'),</span></div><div class="line">    <span class="comment">// 如果没有parent，parent赋值为一个div，然后将当前元素加入到这个div中</span></div><div class="line">    <span class="keyword">if</span> (temp) &#123;</div><div class="line">      parent = tempParent;</div><div class="line">      tempParent.appendChild(element);</div><div class="line">      <span class="comment">// (parent = tempParent).appendChild(element); 这种写法不易读</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通过 qsa 获取匹配的元素，判断其中有没有 element</span></div><div class="line">    match = ~zepto.qsa(parent, selector).indexOf(element)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (temp) &#123;</div><div class="line">      <span class="comment">// 如果没有parent时，之前执行过  tempParent.appendChild(element);</span></div><div class="line">      <span class="comment">// 此时要移除子元素</span></div><div class="line">      tempParent.removeChild(element);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// temp &amp;&amp; tempParent.removeChild(element)  // 这种写法不易读</span></div><div class="line"></div><div class="line">    <span class="comment">// 返回最终的匹配结果，经过 qsa 判断的结果</span></div><div class="line">    <span class="keyword">return</span> match</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? </div><div class="line">           <span class="built_in">String</span>(obj) :  <span class="comment">// null undefined</span></div><div class="line">           class2type[toString.call(obj)] || <span class="string">"object"</span> </div><div class="line"></div><div class="line">    <span class="comment">// 下文定义：</span></div><div class="line">    <span class="comment">// // Populate the class2type map</span></div><div class="line">    <span class="comment">// $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) &#123;</span></div><div class="line">    <span class="comment">//   class2type[ "[object " + name + "]" ] = name.toLowerCase()</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> type(value) == <span class="string">"function"</span> &#125;</div><div class="line">  <span class="comment">// window的特点：window.window === window</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj == obj.window &#125;</div><div class="line">  <span class="comment">// document.nodeType === 9</span></div><div class="line">  <span class="comment">// elem.DOCUMENT_NODE 也等于 9 （这里直接判断是不是9也行？？？）</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isDocument</span>(<span class="params">obj</span>)   </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;</div><div class="line">  <span class="comment">// 判断是否是最基本的object：Object.getPrototypeOf(obj) == Object.prototype</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class="built_in">Object</span>.getPrototypeOf(obj) == <span class="built_in">Object</span>.prototype</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 数组或者对象数组</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj.length == <span class="string">'number'</span> &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 筛选数组，踢出 null undefined 元素</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item != <span class="literal">null</span> &#125;) &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 下文定义：</span></div><div class="line">  <span class="comment">// $.fn = &#123;</span></div><div class="line">  <span class="comment">//    concat: emptyArray.concat,</span></div><div class="line">  <span class="comment">// $.fn.concat.apply([], array) —— 无论 array 是不是数组，都将返回一个数组，</span></div><div class="line">  <span class="comment">// 例如 $.fn.concat.call([], 'abc') 返回的是 ['abc']</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> array.length &gt; <span class="number">0</span> ? $.fn.concat.apply([], array) : array &#125;</div><div class="line"></div><div class="line">  <span class="comment">// camelize 已在上文定义</span></div><div class="line">  <span class="comment">// 用于 css 的 camalCase 转换，例如 background-color 转换为 backgroundColor</span></div><div class="line">  camelize = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123; <span class="keyword">return</span> str.replace(<span class="regexp">/-+(.)?/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, chr</span>)</span>&#123; <span class="keyword">return</span> chr ? chr.toUpperCase() : <span class="string">''</span> &#125;) &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 将 lineHeight 转换为 line-height 格式</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dasherize</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/::/g</span>, <span class="string">'/'</span>)</div><div class="line">              .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z])/g</span>, <span class="string">'$1_$2'</span>)</div><div class="line">              .replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1_$2'</span>)</div><div class="line">              .replace(<span class="regexp">/_/g</span>, <span class="string">'-'</span>)</div><div class="line">              .toLowerCase()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// uniq变量已经在前面定义</span></div><div class="line">  <span class="comment">// 用来将 [1,1,2,2,3,3] 替换为 [1,2,3]</span></div><div class="line">  uniq = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123; <span class="keyword">return</span> array.indexOf(item) == idx &#125;) &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 上文定义 classCache = &#123;&#125;</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">classRE</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> name <span class="keyword">in</span> classCache ?</div><div class="line">           classCache[name] : </div><div class="line">           (classCache[name] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\s)'</span> + name + <span class="string">'(\\s|$)'</span>))</div><div class="line"></div><div class="line">    <span class="comment">// classCache 存储的数据是这样的：</span></div><div class="line">    <span class="comment">// &#123;</span></div><div class="line">    <span class="comment">//   abc: /(^|\s)abc(\s|$)/,  // 能匹配 'abc' 或 ' abc ' 或 ' abc' 或 'abc '</span></div><div class="line">    <span class="comment">//   xyz: /(^|\s)abc(\s|$)/,</span></div><div class="line">    <span class="comment">//   ...</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 传入一个 css 的 name 和 value，判断这个 value 是否需要增加 'px'</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">maybeAddPx</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">    <span class="comment">// dasherize(name) 将 lineHeight 转换为 line-height 格式</span></div><div class="line">    <span class="comment">// !cssNumber[dasherize(name)] 判断转换出来的 css name 是否再这个数组之外</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> value == <span class="string">"number"</span> &amp;&amp; !cssNumber[dasherize(name)]) ? </div><div class="line">           <span class="comment">// 如果 value 是数字，并且 name 不在 cssNumber 数组之内，就需要加 'px'，否则不需要</span></div><div class="line">           <span class="comment">// 例如 'width'、'font-size' 就需要加 'px'， 'font-weight' 就不需要加</span></div><div class="line">           value + <span class="string">"px"</span> : </div><div class="line">           value</div><div class="line"></div><div class="line">    <span class="comment">// 前文定义----------------------</span></div><div class="line">    <span class="comment">// cssNumber = &#123;</span></div><div class="line">    <span class="comment">//   'column-count': 1, </span></div><div class="line">    <span class="comment">//   'columns': 1, </span></div><div class="line">    <span class="comment">//   'font-weight': 1, </span></div><div class="line">    <span class="comment">//   'line-height': 1,</span></div><div class="line">    <span class="comment">//   'opacity': 1, </span></div><div class="line">    <span class="comment">//   'z-index': 1, </span></div><div class="line">    <span class="comment">//   'zoom': 1</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line">    <span class="comment">// function dasherize(str) &#123;</span></div><div class="line">    <span class="comment">//   return str.replace(/::/g, '/')</span></div><div class="line">    <span class="comment">//             .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')</span></div><div class="line">    <span class="comment">//             .replace(/([a-z\d])([A-Z])/g, '$1_$2')</span></div><div class="line">    <span class="comment">//             .replace(/_/g, '-')</span></div><div class="line">    <span class="comment">//             .toLowerCase()</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取一个元素的默认 display 样式值，可能的结果是：inline block inline-block table .... （none 转换为 block）</span></div><div class="line">  <span class="comment">// $.fn.show 方法中用到了</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defaultDisplay</span>(<span class="params">nodeName</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> element, display</div><div class="line"></div><div class="line">    <span class="comment">// 前文定义 elementDisplay = &#123;&#125;</span></div><div class="line">    <span class="keyword">if</span> (!elementDisplay[nodeName]) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// 如果 elementDisplay 对象中，没有存储 nodeName 的信息</span></div><div class="line">      <span class="comment">// 则新建一个 nodeName 元素，添加到 body 中</span></div><div class="line">      element = <span class="built_in">document</span>.createElement(nodeName)</div><div class="line">      <span class="built_in">document</span>.body.appendChild(element)</div><div class="line">      <span class="comment">// 获取它的默认的 display 样式信息。</span></div><div class="line">      display = getComputedStyle(element, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>)</div><div class="line">      <span class="comment">// 接着马上移除元素！！！</span></div><div class="line">      element.parentNode.removeChild(element)</div><div class="line">      <span class="comment">// 'none' 换成 'block'，另外还可能是 'inline' 'inline-block' 'table' 等等...</span></div><div class="line">      display == <span class="string">"none"</span> &amp;&amp; (display = <span class="string">"block"</span>)</div><div class="line">      <span class="comment">// 存储下来</span></div><div class="line">      elementDisplay[nodeName] = display</div><div class="line"></div><div class="line">      <span class="comment">// 下文定义 </span></div><div class="line">      <span class="comment">// var nativeGetComputedStyle = getComputedStyle;</span></div><div class="line">      <span class="comment">// window.getComputedStyle = function(element)&#123;</span></div><div class="line">      <span class="comment">//   try &#123;</span></div><div class="line">      <span class="comment">//     return nativeGetComputedStyle(element)</span></div><div class="line">      <span class="comment">//   &#125; catch(e) &#123;</span></div><div class="line">      <span class="comment">//     return null</span></div><div class="line">      <span class="comment">//   &#125;</span></div><div class="line">      <span class="comment">// &#125;</span></div><div class="line">      <span class="comment">// 解释：</span></div><div class="line">      <span class="comment">// 如果浏览器支持 getComputedStyle 则使用，如果不支持，就返回 null</span></div><div class="line">      <span class="comment">// getComputedStyle(elem, '伪类，如 :link') 返回一个 CSSStyleDeclaration 对象，里面存储了元素的样式信息，可以通过 getPropertyValue('name') 方法获取</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 最终返回 display 结果</span></div><div class="line">    <span class="keyword">return</span> elementDisplay[nodeName]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 返回一个元素的子元素，数组形式</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">element</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 有些浏览器支持 elem.children 获取子元素，有些不支持</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'children'</span> <span class="keyword">in</span> element ?</div><div class="line"></div><div class="line">           <span class="comment">// 上文定义 slice = [].slice</span></div><div class="line">           <span class="comment">// slice.call(likeArr) 可以将对象数组转换为真正的数组</span></div><div class="line">           slice.call(element.children) :</div><div class="line"></div><div class="line">           <span class="comment">// 浏览器不支持 elem.children 只能通过 elem.childNodes 获取子元素</span></div><div class="line">           <span class="comment">// 只去 node.nodeType == 1 的子元素，通过 $.map 拼接成数组</span></div><div class="line">           <span class="comment">// $.map 下文定义的， $.map = function (elements, callback) &#123;....&#125;</span></div><div class="line">           <span class="comment">// $.map 作用：针对 elements（对象数组或数组），对每个元素都经过 callback 函数的过滤，并将过滤通过的元素，push到一个新数组中，返回新数组</span></div><div class="line">           $.map(element.childNodes, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123; <span class="keyword">if</span> (node.nodeType == <span class="number">1</span>) <span class="keyword">return</span> node &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 上文定义 zepto = &#123;&#125;</span></div><div class="line">  <span class="comment">// 上文定义 zepto.matches = function(element, selector) &#123; /* 判断elem是否符合selector的要求 */ &#125;</span></div><div class="line"></div><div class="line">  <span class="comment">// `$.zepto.fragment` takes a html string and an optional tag name</span></div><div class="line">  <span class="comment">// to generate DOM nodes nodes from the given html string.</span></div><div class="line">  <span class="comment">// The generated DOM nodes are returned as an array.</span></div><div class="line">  <span class="comment">// This function can be overriden in plugins for example to make</span></div><div class="line">  <span class="comment">// it compatible with browsers that don't support the DOM fully.</span></div><div class="line">  zepto.fragment = <span class="function"><span class="keyword">function</span>(<span class="params">html, name, properties</span>) </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">      参数：</div><div class="line">      @html: 待处理的html字符串</div><div class="line">      @name: 通过 name 可在 containers 中查找容器节点，如果不传入，取得的容器默认为 div</div><div class="line">      @properties: 节点属性对象</div><div class="line">    */</div><div class="line"></div><div class="line">    <span class="keyword">var</span> dom, nodes, container</div><div class="line"></div><div class="line">    <span class="comment">// 上文定义：singleTagRE = /^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/,   // 匹配 &lt;img /&gt; &lt;p&gt;&lt;/p&gt;  不匹配 &lt;img src=""/&gt; &lt;p&gt;123&lt;/p&gt;</span></div><div class="line">    <span class="comment">// 如果 html 是单标签，则直接用该标签创建元素</span></div><div class="line">    <span class="comment">// RegExp.$1 表示正则中的第一个括号匹配的内容，在此即 (\w+) 匹配的内容，</span></div><div class="line">    <span class="comment">// A special case optimization for a single tag</span></div><div class="line">    <span class="keyword">if</span> (singleTagRE.test(html)) dom = $(<span class="built_in">document</span>.createElement(<span class="built_in">RegExp</span>.$<span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!dom) &#123;</div><div class="line">      <span class="comment">// 说明 html 不是单标签，dom未被赋值</span></div><div class="line"></div><div class="line">      <span class="comment">// 上文定义 tagExpanderRE = /&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/ig,   // 单标签</span></div><div class="line">      <span class="comment">// 将 &lt;p/&gt;或&lt;p /&gt;，替换为 &lt;p&gt;&lt;/p&gt;，将&lt;p abc/&gt;替换为&lt;p&gt;abc&lt;/p&gt;</span></div><div class="line">      <span class="comment">// &lt;input/&gt; （在 tagExpanderRE 中定义）的不替换</span></div><div class="line">      <span class="keyword">if</span> (html.replace) html = html.replace(tagExpanderRE, <span class="string">"&lt;$1&gt;&lt;/$2&gt;"</span>)</div><div class="line"></div><div class="line">      <span class="comment">// fragmentRE = /^\s*&lt;(\w+|!)[^&gt;]*&gt;/,   // 取出html代码中第一个html标签（或注释），如取出 &lt;p&gt;123&lt;/p&gt;&lt;h1&gt;345&lt;/h1&gt; 中的 &lt;p&gt;</span></div><div class="line">      <span class="comment">// 如果 name 未传入，则赋值为 html 的第一个标签</span></div><div class="line">      <span class="keyword">if</span> (name === <span class="literal">undefined</span>) name = fragmentRE.test(html) &amp;&amp; <span class="built_in">RegExp</span>.$<span class="number">1</span></div><div class="line"></div><div class="line">      <span class="comment">// 上文定义</span></div><div class="line">      <span class="comment">// // 指定特殊元素的 容器</span></div><div class="line">      <span class="comment">// containers = &#123;</span></div><div class="line">      <span class="comment">//   'tr': document.createElement('tbody'),</span></div><div class="line">      <span class="comment">//   'tbody': table, </span></div><div class="line">      <span class="comment">//   'thead': table, </span></div><div class="line">      <span class="comment">//   'tfoot': table,</span></div><div class="line">      <span class="comment">//   'td': tableRow, </span></div><div class="line">      <span class="comment">//   'th': tableRow,</span></div><div class="line">      <span class="comment">//   // 除了上面指定的，其他所有元素的容器都是 div</span></div><div class="line">      <span class="comment">//   '*': document.createElement('div')</span></div><div class="line">      <span class="comment">// &#125;,</span></div><div class="line">      <span class="keyword">if</span> (!(name <span class="keyword">in</span> containers)) name = <span class="string">'*'</span></div><div class="line"></div><div class="line">      container = containers[name]</div><div class="line">      container.innerHTML = <span class="string">''</span> + html  <span class="comment">// 转变为字符串的快捷方式</span></div><div class="line"></div><div class="line">      <span class="comment">// 遍历 container 的子元素（先转换为数组形式）</span></div><div class="line">      <span class="comment">// 返回的同时，将每个子元素移除。</span></div><div class="line">      <span class="comment">// $.each 返回的是一个数组，因为第一个参数就是数组 slice.call(container.childNodes)</span></div><div class="line">      dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        container.removeChild(<span class="keyword">this</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 赋值属性</span></div><div class="line">    <span class="keyword">if</span> (isPlainObject(properties)) &#123;</div><div class="line">      <span class="comment">// 先将dom转换为 zepto 对象</span></div><div class="line">      nodes = $(dom)</div><div class="line"></div><div class="line">      $.each(properties, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">        <span class="comment">// 上文定义：</span></div><div class="line">        <span class="comment">// // 应该通过方法调用来设置/获取的特殊属性</span></div><div class="line">        <span class="comment">// methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],</span></div><div class="line">        <span class="keyword">if</span> (methodAttributes.indexOf(key) &gt; <span class="number">-1</span>) nodes[key](value)  <span class="comment">// 满足 methodAttributes 的，通过方法赋值</span></div><div class="line">        <span class="keyword">else</span> nodes.attr(key, value) <span class="comment">// 否则，通过属性复制</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 最终返回的dom可能有两种形式</span></div><div class="line">    <span class="comment">// 第一，如果 html 是单标签，则dom被复制为一个zepto对象 dom = $(document.createElement(RegExp.$1))</span></div><div class="line">    <span class="comment">// 第二，如果 html 不是单标签，则dom被复制为一个DOM节点的数组</span></div><div class="line">    <span class="keyword">return</span> dom</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 上文定义 zepto = &#123;&#125;</span></div><div class="line">  <span class="comment">// 上文定义 zepto.matches = function(element, selector) &#123; /* 判断elem是否符合selector的要求 */ &#125;</span></div><div class="line">  <span class="comment">// 上文定义 zepto.fragment = function(html, name, properties) &#123; /* 通过html字符串获取文档碎片 */ &#125;</span></div><div class="line"></div><div class="line">  <span class="comment">// `$.zepto.Z` swaps out the prototype of the given `dom` array</span></div><div class="line">  <span class="comment">// of nodes with `$.fn` and thus supplying all the Zepto functions</span></div><div class="line">  <span class="comment">// to the array. Note that `__proto__` is not supported on Internet</span></div><div class="line">  <span class="comment">// Explorer. This method can be overriden in plugins.</span></div><div class="line">  zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">    dom = dom || []</div><div class="line">    <span class="comment">// 将 dom 隐式原型强制改为 $.fn</span></div><div class="line">    <span class="comment">// 下文 zepto.Z.prototype = $.fn   因此，dom.__proto__ = $.fn 即 dom.__proto__ = zepto.Z.prototype  可以不较真的认为 zepto.Z 就是一个构造函数（但感觉这么设计，有些蹩脚）</span></div><div class="line">    dom.__proto__ = $.fn</div><div class="line">    dom.selector = selector || <span class="string">''</span></div><div class="line">    <span class="keyword">return</span> dom</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// `$.zepto.isZ` should return `true` if the given object is a Zepto</span></div><div class="line">  <span class="comment">// collection. This method can be overriden in plugins.</span></div><div class="line">  zepto.isZ = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</div><div class="line">    <span class="comment">// 上文 dom.__proto__ = $.fn</span></div><div class="line">    <span class="comment">// 下文 zepto.Z.prototype = $.fn</span></div><div class="line">    <span class="comment">// 可知：dom.__proto__ === $.fn === zepto.Z.prototype</span></div><div class="line"></div><div class="line">    <span class="comment">// 因此，zepto对象都符合 object instanceof zepto.Z</span></div><div class="line">    <span class="keyword">return</span> object <span class="keyword">instanceof</span> zepto.Z</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and</span></div><div class="line">  <span class="comment">// takes a CSS selector and an optional context (and handles various</span></div><div class="line">  <span class="comment">// special cases).</span></div><div class="line">  <span class="comment">// This method can be overriden in plugins.</span></div><div class="line">  zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dom</div><div class="line">    <span class="comment">// If nothing given, return an empty Zepto collection</span></div><div class="line">    <span class="keyword">if</span> (!selector) <span class="keyword">return</span> zepto.Z()</div><div class="line"></div><div class="line">    <span class="comment">// Optimize for string selectors</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</div><div class="line">      <span class="comment">// 字符串的情况，一般有两种：</span></div><div class="line">      <span class="comment">// 第一，一段 html 代码，旨在通过zepto生成dom对象</span></div><div class="line">      <span class="comment">// 第二，一段查询字符串，旨在通过zepto查找dom对象</span></div><div class="line">      <span class="comment">// 将查询结果存储到 dom 变量中</span></div><div class="line"></div><div class="line">      selector = selector.trim()</div><div class="line">      <span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line">      <span class="comment">// Note: In both Chrome 21 and Firefox 15, DOM error 12</span></div><div class="line">      <span class="comment">// is thrown if the fragment doesn't begin with &lt;</span></div><div class="line"></div><div class="line">      <span class="comment">// 上文定义：</span></div><div class="line">      <span class="comment">// // 取出html代码中第一个html标签（或注释），如取出 &lt;p&gt;123&lt;/p&gt;&lt;h1&gt;345&lt;/h1&gt; 中的 &lt;p&gt;</span></div><div class="line">      <span class="comment">// fragmentRE = /^\s*&lt;(\w+|!)[^&gt;]*&gt;/,</span></div><div class="line">      <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))</div><div class="line"></div><div class="line">        <span class="comment">// 第一，RegExp.$1取出来的就是第一个标签名称，即正则中 (\w+|!) 对应的内容</span></div><div class="line">        <span class="comment">// 第二，此时的 context 应该传入的是css属性对象（这里会产生歧义，老版的不会传入 context）</span></div><div class="line">        dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">      <span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line">      <span class="comment">// nodes from there</span></div><div class="line"></div><div class="line">      <span class="comment">// 如果 selector 不是html字符串标签，并且 context 有值，则从context中查找</span></div><div class="line">      <span class="comment">// find 应该是在 $.fn 中定义的，有待解读？？？</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">      <span class="comment">// If it's a CSS selector, use it to select nodes.</span></div><div class="line"></div><div class="line">      <span class="comment">// 除了以上情况，就从整个 document 执行 qsa 的查找</span></div><div class="line">      <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If a function is given, call it when the DOM is ready</span></div><div class="line">    <span class="comment">// 如果是函数，则dom ready时执行，</span></div><div class="line">    <span class="comment">// ready方法应该在 $.fn 中定义，有待解毒</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector)</div><div class="line"></div><div class="line">    <span class="comment">// If a Zepto collection is given, just return it</span></div><div class="line">    <span class="comment">// 传入的参数本身就已经是 zepto 对象，则直接返回</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) <span class="keyword">return</span> selector</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="comment">// compact函数：踢出数组中 == null 的元素</span></div><div class="line">      <span class="comment">// normalize array if an array of nodes is given</span></div><div class="line">      <span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</div><div class="line"></div><div class="line">      <span class="comment">// 如果传入的是object，直接强制塞进一个数组</span></div><div class="line">      <span class="comment">// Wrap DOM nodes.</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector)) dom = [selector], selector = <span class="literal">null</span>  <span class="comment">// 及时清空 selector 不妨碍下面的判断</span></div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">// 从此往下，感觉和上文 selector 是字符串的情况下，重复了</span></div><div class="line">      <span class="comment">// ？？？？？？？？</span></div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">// fragmentRE.test 即判断字符串是否是 html 标签开头（即是否是html fragement）</span></div><div class="line">      <span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</div><div class="line">        <span class="comment">//此时，context 也是属性集合，不是容器！！！</span></div><div class="line">        <span class="comment">//（这里会产生歧义，老版的不会传入 context）</span></div><div class="line">        dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span> <span class="comment">// 及时清空 selector 不妨碍下面的判断</span></div><div class="line">      <span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line">      <span class="comment">// nodes from there</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">      <span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></div><div class="line">      <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 最终，还是通过 zepto.Z 创建了对象</span></div><div class="line">    <span class="comment">// 这里的 dom，其实就是一个数组</span></div><div class="line">    <span class="comment">// create a new Zepto collection from the nodes found</span></div><div class="line">    <span class="keyword">return</span> zepto.Z(dom, selector)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// `$` will be the base `Zepto` object. When calling this</span></div><div class="line">  <span class="comment">// function just call `$.zepto.init, which makes the implementation</span></div><div class="line">  <span class="comment">// details of selecting nodes and creating Zepto collections</span></div><div class="line">  <span class="comment">// patchable in plugins.</span></div><div class="line">  $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// $ 最终被这个匿名函数所返回，并复制给了全局的 Zepto 变量</span></div><div class="line">  <span class="comment">// 全局的 zepto 变量暴露给了 window，并且可能有一个别名—— $</span></div><div class="line">  <span class="comment">// 此 $ 非彼 $ </span></div><div class="line">  <span class="comment">// 对于初学者来说，这里肯定非常绕（还不如把这里的 $ 改改名字）</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</div><div class="line">    <span class="comment">// key 在上文已经定义，否则就污染全局变量了</span></div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source)</div><div class="line"></div><div class="line">      <span class="comment">// 深度递归，首先必须 deep 参数为 true</span></div><div class="line">      <span class="comment">// 其次，source[key] 必须是数组或者对象，才有必要深度递归（否则没必要）</span></div><div class="line">      <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// source[key] 是对象，而 target[key] 不是对象</span></div><div class="line">        <span class="comment">// 则 target[key] = &#123;&#125; 初始化一下，否则递归会出错的</span></div><div class="line">        <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</div><div class="line">          target[key] = &#123;&#125;</div><div class="line"></div><div class="line">        <span class="comment">// source[key] 是数组，而 target[key] 不是数组</span></div><div class="line">        <span class="comment">// 则 target[key] = [] 初始化一下，否则递归会出错的</span></div><div class="line">        <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</div><div class="line">          target[key] = []</div><div class="line"></div><div class="line">        <span class="comment">// 执行递归</span></div><div class="line">        extend(target[key], source[key], deep)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 不满足以上条件，说明 source[key] 是一般的值类型，直接赋值给 target 就是了</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Copy all but undefined properties from one or more</span></div><div class="line">  <span class="comment">// objects to the `target` object.</span></div><div class="line">  $.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">    <span class="comment">// 一般传入的参数会是：</span></div><div class="line">    <span class="comment">// (targetObj, srcObj1, srcObj2, srcObj1...)</span></div><div class="line">    <span class="comment">// (true, targetObj, srcObj1, srcObj2, srcObj1...)</span></div><div class="line"></div><div class="line">    <span class="comment">// arguments 是对象数组，slice.call 会返回真正的数组（此处返回从第二项开始）</span></div><div class="line">    <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 第一个参数是boolean，这里会把第二个参数当做 target，其他的作为 source</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</div><div class="line">      deep = target</div><div class="line">      target = args.shift()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将所有的 source 添加到 target 中</span></div><div class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; extend(target, arg, deep) &#125;)</div><div class="line">    <span class="keyword">return</span> target</div><div class="line"></div><div class="line">    <span class="comment">// 感觉这样设计是比较好，很好的将业务和底层进行了分离（虽然比较简单）：</span></div><div class="line">    <span class="comment">// 核心方法再 function extend(...)&#123;...&#125; 中定义，</span></div><div class="line">    <span class="comment">// 而 $.extend 方法中做一些外围的判断和处理，最终调用 extend 函数去执行</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// `$.zepto.qsa` is Zepto's CSS selector implementation which</span></div><div class="line">  <span class="comment">// uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.</span></div><div class="line">  <span class="comment">// This method can be overriden in plugins.</span></div><div class="line">  zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">      @element: 容器</div><div class="line">      @selector: 选择器</div><div class="line">    */</div><div class="line"></div><div class="line">    <span class="keyword">var</span> found,</div><div class="line">        maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</div><div class="line">        maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</div><div class="line"></div><div class="line">        <span class="comment">// ID或class形式：返回 selector.slice(1) 即ID或者class的值</span></div><div class="line">        <span class="comment">// 否则：返回 selector，如通过 tagName 查询</span></div><div class="line">        nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></div><div class="line"></div><div class="line">        <span class="comment">// 是否是一个简单的字符串（可能是一个复杂的选择器，如 'div#div1 .item[link] .red'）</span></div><div class="line">        isSimple = simpleSelectorRE.test(nameOnly)</div><div class="line"></div><div class="line">    <span class="comment">// 上文定义：</span></div><div class="line">    <span class="comment">// // 匹配一个包括（字母、数组、下划线、-）的字符串</span></div><div class="line">    <span class="comment">// simpleSelectorRE = /^[\w-]*$/,</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 以下代码的基本思路是：</span></div><div class="line">    <span class="comment">// 1. 优先通过 ID 获取元素；</span></div><div class="line">    <span class="comment">// 2. 然后试图通过 className 和 tagName 获取元素</span></div><div class="line">    <span class="comment">// 3. 最后通过 querySelectorAll 来获取</span></div><div class="line">    <span class="keyword">return</span> (isDocument(element) &amp;&amp; isSimple &amp;&amp; maybeID) ?</div><div class="line">           <span class="comment">// 这是最简单的形式：容器是document、选择器是一个id</span></div><div class="line">           <span class="comment">// 因为 getElementById 只能在 document 上用，所以这里单独拿出来</span></div><div class="line">           ( (found = element.getElementById(nameOnly)) ? </div><div class="line">              [found] : </div><div class="line">              [] </div><div class="line">           ) :</div><div class="line"></div><div class="line">           (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span>) ? </div><div class="line">              <span class="comment">// 容器不是一般元素，也不是document，直接返回 []</span></div><div class="line">              [] :</div><div class="line"></div><div class="line">              <span class="comment">// 将获取的所有元素集合，都转换为数组</span></div><div class="line">              slice.call(</div><div class="line">                isSimple &amp;&amp; !maybeID </div><div class="line"></div><div class="line">                <span class="comment">// isSimple情况下，nameOnly 只可能是 className 或者 tagName</span></div><div class="line">                <span class="comment">// getElementsByClassName 和 getElementsByTagName 可以在 elem 上用，而且比 querySelectorAll 速度快</span></div><div class="line">                <span class="comment">// 所以，只要elem容器有值，尽量单独拿出来处理</span></div><div class="line">                ? </div><div class="line">                  maybeClass ? </div><div class="line">                  element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></div><div class="line">                  element.getElementsByTagName(selector)  <span class="comment">// Or a tag</span></div><div class="line"></div><div class="line">                <span class="comment">// 最后其他情况，只能通过 querySelectorAll 来处理</span></div><div class="line">                : </div><div class="line">                element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></div><div class="line">              )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 根据 selector 筛选 nodes </span></div><div class="line">  <span class="comment">// 并将 nodes 封装为 zepto 对象</span></div><div class="line">  <span class="comment">// $.fn.filter 下文定义</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filtered</span>(<span class="params">nodes, selector</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> selector == <span class="literal">null</span> ? $(nodes) : $(nodes).filter(selector)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 判断 parent 是否包含 node</span></div><div class="line">  $.contains = <span class="built_in">document</span>.documentElement.contains ?</div><div class="line">    <span class="comment">// 浏览器支持 contains 方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> parent !== node &amp;&amp; parent.contains(node)</div><div class="line">    &#125; :</div><div class="line">    <span class="comment">// 不支持 contains 方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</div><div class="line">      <span class="keyword">while</span> (node &amp;&amp; (node = node.parentNode))</div><div class="line">        <span class="keyword">if</span> (node === parent) <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 如果 arg 是函数，则改变函数的执行环境和参数</span></div><div class="line">  <span class="comment">// 如果不是，直接返回 arg</span></div><div class="line">  <span class="comment">// $.fn.html 方法就用到了</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">funcArg</span>(<span class="params">context, arg, idx, payload</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> isFunction(arg) ? arg.call(context, idx, payload) : arg</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 设置属性</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setAttribute</span>(<span class="params">node, name, value</span>) </span>&#123;</div><div class="line">    value == <span class="literal">null</span> ? node.removeAttribute(name) : node.setAttribute(name, value)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 设置或获取 node 的 className</span></div><div class="line">  <span class="comment">// 考虑 svg ？？？？</span></div><div class="line">  <span class="comment">// access className property while respecting SVGAnimatedString</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> klass = node.className || <span class="string">''</span>,</div><div class="line">        svg   = klass &amp;&amp; klass.baseVal !== <span class="literal">undefined</span></div><div class="line"></div><div class="line">    <span class="comment">// 获取</span></div><div class="line">    <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> svg ? klass.baseVal : klass</div><div class="line">    <span class="comment">// 设置</span></div><div class="line">    svg ? (klass.baseVal = value) : (node.className = value)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 将字符串变成响应的对象或者值，例如源代码的注释：</span></div><div class="line">  <span class="comment">// "true"  =&gt; true</span></div><div class="line">  <span class="comment">// "false" =&gt; false</span></div><div class="line">  <span class="comment">// "null"  =&gt; null</span></div><div class="line">  <span class="comment">// "42"    =&gt; 42</span></div><div class="line">  <span class="comment">// "42.5"  =&gt; 42.5</span></div><div class="line">  <span class="comment">// "08"    =&gt; "08"</span></div><div class="line">  <span class="comment">// JSON    =&gt; parse if valid</span></div><div class="line">  <span class="comment">// String  =&gt; self</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deserializeValue</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">return</span> value ?</div><div class="line"></div><div class="line">        <span class="comment">// value『有值』的情况：</span></div><div class="line">        value == <span class="string">"true"</span> ||  <span class="comment">// 如果 value == 'true'，那么这个表达式本身就返回 true ，导致整个函数返回true</span></div><div class="line"></div><div class="line">          <span class="comment">// value !== 'true' 的情况：</span></div><div class="line">          ( </div><div class="line">            value == <span class="string">"false"</span> ? <span class="literal">false</span> : <span class="comment">// "null"  =&gt; null</span></div><div class="line">            value == <span class="string">"null"</span> ? <span class="literal">null</span> : <span class="comment">// "null"  =&gt; null</span></div><div class="line">            +value + <span class="string">""</span> == value ? +value :  <span class="comment">// 数字："42" =&gt; 42  "42.5" =&gt; 42.5  （ 但是 '08' 却不符合这个条件 ）</span></div><div class="line">            /^[\[\&#123;]/.test(value) ? $.parseJSON(value) : <span class="comment">// '[...]' 或者 '&#123;...&#125;'</span></div><div class="line">            value <span class="comment">// 其他</span></div><div class="line">          )</div><div class="line"></div><div class="line">        <span class="comment">// value『无值』的情况： undefined / '' / flase / 0 / null</span></div><div class="line">        : value </div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">      <span class="keyword">return</span> value</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 将上文定义的函数，暴露给 $ 对象（其实 $ 是一个 function）</span></div><div class="line">  $.type = type</div><div class="line">  $.isFunction = isFunction</div><div class="line">  $.isWindow = isWindow</div><div class="line">  $.isArray = isArray</div><div class="line">  $.isPlainObject = isPlainObject</div><div class="line"></div><div class="line">  $.isEmptyObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name</div><div class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> obj) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $.inArray = <span class="function"><span class="keyword">function</span>(<span class="params">elem, array, i</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> emptyArray.indexOf.call(array, elem, i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $.camelCase = camelize</div><div class="line">  $.trim = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str == <span class="literal">null</span> ? <span class="string">""</span> : <span class="built_in">String</span>.prototype.trim.call(str)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// plugin compatibility</span></div><div class="line">  $.uuid = <span class="number">0</span></div><div class="line">  $.support = &#123; &#125;</div><div class="line">  $.expr = &#123; &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 重新组织 elements 对象（数组、对象或者对象数组），针对每一个元素，都用 callback 进行检验</span></div><div class="line">  <span class="comment">// 检验通过后，将元素push进一个新数组，并返回</span></div><div class="line">  $.map = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> value, values = [], i, key</div><div class="line"></div><div class="line">    <span class="comment">// 数组，或者对象数组</span></div><div class="line">    <span class="keyword">if</span> (likeArray(elements))</div><div class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</div><div class="line">        <span class="comment">// 遍历，经过 callback 验证，push到结果中</span></div><div class="line">        value = callback(elements[i], i)</div><div class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对象</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</div><div class="line">        <span class="comment">// 遍历，经过 callback 验证，push到结果中</span></div><div class="line">        value = callback(elements[key], key)</div><div class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回数组</span></div><div class="line">    <span class="comment">// flatten 函数上文定义的，作用：无论 values 是否是数组，都将返回一个正确的数组。例如，传入 'abc' ，返回 ['abc']</span></div><div class="line">    <span class="keyword">return</span> flatten(values)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 遍历 elements 所有元素（数组、对象数组、对象），执行 callback 方法，最终还是返回 elements</span></div><div class="line">  <span class="comment">// 注意1：callback.call(elements[i], i, elements[i]) 函数执行的环境和参数</span></div><div class="line">  <span class="comment">// 注意2：=== false) return elements 一旦有函数返回 false，即跳出循环，类似 break</span></div><div class="line">  <span class="comment">// 注意3：无论哪种情况，最终返回的还是 elements</span></div><div class="line">  $.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i, key</div><div class="line">    <span class="keyword">if</span> (likeArray(elements)) &#123;</div><div class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</div><div class="line">        <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</div><div class="line">        <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> elements</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 上文定义：filter = emptyArray.filter</span></div><div class="line">  <span class="comment">// 筛选数组</span></div><div class="line">  $.grep = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> filter.call(elements, callback)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.JSON) $.parseJSON = <span class="built_in">JSON</span>.parse</div><div class="line"></div><div class="line">  <span class="comment">// Populate the class2type map</span></div><div class="line">  $.each(<span class="string">"Boolean Number String Function Array Date RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</div><div class="line">    class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase()</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">      上文将 class2type 赋值为 &#123;&#125;</div><div class="line">      最终将 class2type 赋值为：</div><div class="line">      &#123;</div><div class="line">        '[object boolean]': 'boolean',</div><div class="line">        '[object number]': 'number',</div><div class="line">        '[object string]': 'string',</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      存储这个数据是为了方便的获取一些对象的类型，</div><div class="line">      例如 Object.prototype.toString.call([]) 返回的是 '[Object Array]'</div><div class="line">      那么即可根据这个获取 [] 的类型是 'array'</div><div class="line">    */</div><div class="line"></div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// Define methods that will be available on all</span></div><div class="line">  <span class="comment">// Zepto collections</span></div><div class="line">  $.fn = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 为何要这么多数组的方法？</span></div><div class="line">    <span class="comment">// 因为一个 zepto 对象，本身就是一个数组</span></div><div class="line"></div><div class="line">    <span class="comment">// Because a collection acts like an array</span></div><div class="line">    <span class="comment">// copy over these useful array functions.</span></div><div class="line">    forEach: emptyArray.forEach,</div><div class="line">    <span class="attr">reduce</span>: emptyArray.reduce,  <span class="comment">// 方法何用？？？？</span></div><div class="line">    push: emptyArray.push,</div><div class="line">    <span class="attr">sort</span>: emptyArray.sort,</div><div class="line">    <span class="attr">indexOf</span>: emptyArray.indexOf,</div><div class="line">    <span class="attr">concat</span>: emptyArray.concat,</div><div class="line"></div><div class="line">    <span class="comment">// `map` and `slice` in the jQuery API work differently</span></div><div class="line">    <span class="comment">// from their array counterparts</span></div><div class="line">    map: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">      <span class="comment">// $.map 上文定义的， $.map = function (elements, callback) &#123;....&#125;</span></div><div class="line">      <span class="comment">// $.map 作用：针对 elements（对象、对象数组或数组），对每个元素都经过 callback 函数的过滤，并将过滤通过的元素，push到一个新数组中，返回新数组</span></div><div class="line"></div><div class="line">      <span class="comment">// 最后，用 $ 封装返回</span></div><div class="line">      <span class="keyword">return</span> $(</div><div class="line">        <span class="comment">// $.map 返回的是一个数组</span></div><div class="line">        $.map(<span class="keyword">this</span>, </div><div class="line">          <span class="comment">// 针对每一个元素，都执行传入的函数，如果函数返回的 !=null 就将插入到新返回的数组</span></div><div class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123; <span class="keyword">return</span> fn.call(el, i, el) &#125;</div><div class="line">        )</div><div class="line">      )</div><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line">        $('div').map(function(key, value)&#123;</div><div class="line">          return value.id;</div><div class="line">          // 或者 return this.id;</div><div class="line">        &#125;)</div><div class="line">        这个结果就是 $(['div1', 'div2' ...])</div><div class="line">      */</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">slice</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// 直接数组的slice方法，并将结果用 $ 封装返回</span></div><div class="line">      <span class="keyword">return</span> $(slice.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 在 zepto.init 函数中，当传入的函数是函数时，就用到了 ready </span></div><div class="line">    <span class="comment">// else if (isFunction(selector)) return $(document).ready(selector)</span></div><div class="line">    ready: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">      <span class="comment">// need to check if document.body exists for IE as that browser reports</span></div><div class="line">      <span class="comment">// document ready when it hasn't yet created the body element</span></div><div class="line"></div><div class="line">      <span class="comment">// 下文定义：readyRE = /complete|loaded|interactive/,</span></div><div class="line">      <span class="keyword">if</span> (readyRE.test(<span class="built_in">document</span>.readyState) &amp;&amp; <span class="built_in">document</span>.body) callback($)</div><div class="line">      <span class="keyword">else</span> <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; callback($) &#125;, <span class="literal">false</span>)</div><div class="line"></div><div class="line">      <span class="comment">// 返回当前对象</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> idx === <span class="literal">undefined</span> ? </div><div class="line">             slice.call(<span class="keyword">this</span>) : <span class="comment">// 未传参数，直接返回一整个数组</span></div><div class="line">             <span class="comment">// 有参数，则试图返回单个元素（大于0，小于0 两种情况）</span></div><div class="line">             <span class="keyword">this</span>[</div><div class="line">                idx &gt;= <span class="number">0</span> ? </div><div class="line">                idx : </div><div class="line">                idx + <span class="keyword">this</span>.length</div><div class="line">            ]</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 将zepto集合变为纯数组</span></div><div class="line">    toArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.get() &#125;,</div><div class="line"></div><div class="line">    <span class="attr">size</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 将元素从这个DOM树中移除</span></div><div class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parentNode != <span class="literal">null</span>)</div><div class="line">          <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">each</span>: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">      <span class="comment">// [].every ES5中Array的新特性。循环数组每个元素，返回是否符合callback函数的要求</span></div><div class="line"></div><div class="line">      <span class="comment">// every 函数返回的是 false 或者 true（不过这里返回什么无所谓，执行就可以了）</span></div><div class="line">      emptyArray.every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 最后返回本身对象</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">filter</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="comment">// not函数下文定义</span></div><div class="line">      <span class="comment">// 如果给not传入的参数是函数，则返回不符合这个函数规则的元素的数组（用 $ 封装）</span></div><div class="line">      <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> <span class="keyword">this</span>.not(<span class="keyword">this</span>.not(selector))</div><div class="line"></div><div class="line">      <span class="comment">// 上文定义：zepto.matches 判断elements是否符合 selector 的要求</span></div><div class="line">      <span class="comment">// zepto.matches = function(element, selector) &#123;...&#125;</span></div><div class="line">      <span class="keyword">return</span> $(filter.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">        <span class="comment">// 利用 [].filter 方法做筛选，利用 zepto.matches 做判断</span></div><div class="line">        <span class="keyword">return</span> zepto.matches(element, selector)</div><div class="line">      &#125;))</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// $('div') 可能只有三个 div 节点，那么 $('div').add('p') 再三个 div 节点的基础上，增加三个 p 节点</span></div><div class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">selector,context</span>)</span>&#123;</div><div class="line">      <span class="comment">// uniq函数——数组去重，例如：用来将 [1,1,2,2,3,3] 替换为 [1,2,3]</span></div><div class="line">      <span class="keyword">return</span> $(uniq(<span class="keyword">this</span>.concat($(selector,context))))</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">is</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="comment">// 注意：这里只对 this[0] 第一个元素做判断了，其他的元素不管了</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length &gt; <span class="number">0</span> &amp;&amp; zepto.matches(<span class="keyword">this</span>[<span class="number">0</span>], selector)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">not</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> nodes=[] <span class="comment">// 存储最后返回的结果</span></div><div class="line"></div><div class="line">      <span class="comment">// 如果参数是函数</span></div><div class="line">      <span class="keyword">if</span> (isFunction(selector) &amp;&amp; selector.call !== <span class="literal">undefined</span>)</div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">          <span class="comment">// 遍历对象的所有元素，对每个元素都执行传入的函数</span></div><div class="line">          <span class="comment">// 当函数返回 false 时（即不符合函数的规则），则将当前元素push到结果中，等待返回</span></div><div class="line">          <span class="keyword">if</span> (!selector.call(<span class="keyword">this</span>,idx)) nodes.push(<span class="keyword">this</span>)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 如果参数不是函数</span></div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 为 excludes 赋值</span></div><div class="line">        <span class="keyword">var</span> excludes = </div><div class="line">          <span class="comment">// 如果 selector 是字符串（css选择器），则用filter过滤，将结果存储到 excludes 中</span></div><div class="line">          <span class="keyword">typeof</span> selector == <span class="string">'string'</span> ? <span class="keyword">this</span>.filter(selector) :</div><div class="line">          <span class="comment">// 如果 selector 不是字符串</span></div><div class="line">          <span class="comment">// 如果是数组或者对象数组（并且 selector.item 是函数？？？），则生成数组，赋值给 excludes</span></div><div class="line">          (likeArray(selector) &amp;&amp; isFunction(selector.item)) ? slice.call(selector) </div><div class="line">          <span class="comment">// 否则直接生成 zepto 对象，赋值给 excludes</span></div><div class="line">            : $(selector)</div><div class="line"></div><div class="line">        <span class="comment">// 至此，excludes 中就存储了通过 selector 查找出来的元素</span></div><div class="line"></div><div class="line">        <span class="comment">// [].forEach 是ES5的新特性</span></div><div class="line">        <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">          <span class="comment">// 取出 excludes 中不包含的元素，push到结果中</span></div><div class="line">          <span class="keyword">if</span> (excludes.indexOf(el) &lt; <span class="number">0</span>) nodes.push(el)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 返回最后的结果，用 $ 封装</span></div><div class="line">      <span class="keyword">return</span> $(nodes)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">has</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="comment">// 经过 filter 函数处理，返回的是一个处理后的值</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> isObject(selector) ?</div><div class="line">          <span class="comment">// 如果 seletor 是 object（可能是elem节点），则用 $.contains 判断</span></div><div class="line">          $.contains(<span class="keyword">this</span>, selector) :</div><div class="line">          <span class="comment">// 否则（selector是css选择字符串）则返回find后的size（如果 size === 0 即相当于返回 false）</span></div><div class="line">          $(<span class="keyword">this</span>).find(selector).size()</div><div class="line"></div><div class="line">          <span class="comment">// $.fn.find 在下文定义</span></div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">eq</span>: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">      <span class="comment">// 取出指定index的元素</span></div><div class="line">      <span class="comment">// 可支持 -1、0、1、2 ……</span></div><div class="line">      <span class="keyword">return</span> idx === <span class="number">-1</span> ? <span class="keyword">this</span>.slice(idx) : <span class="keyword">this</span>.slice(idx, + idx + <span class="number">1</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">first</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> el = <span class="keyword">this</span>[<span class="number">0</span>]</div><div class="line">      <span class="comment">// 不是 object 则直接返回</span></div><div class="line">      <span class="comment">// 是 object 类型，则用 $ 封装 （因为时刻都要支持链式操作！！！）</span></div><div class="line">      <span class="keyword">return</span> el &amp;&amp; !isObject(el) ? el : $(el)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">last</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> el = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</div><div class="line">      <span class="keyword">return</span> el &amp;&amp; !isObject(el) ? el : $(el)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">find</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="comment">// result 存储返回结果</span></div><div class="line">      <span class="keyword">var</span> result, $<span class="keyword">this</span> = <span class="keyword">this</span></div><div class="line"></div><div class="line">      <span class="comment">// 如果没有参数，就返回一个空的 zepto 对象</span></div><div class="line">      <span class="keyword">if</span> (!selector) result = $()</div><div class="line"></div><div class="line">      <span class="comment">// 如果selector是对象</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'object'</span>)</div><div class="line">        result = $(selector).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> node = <span class="keyword">this</span></div><div class="line">          <span class="keyword">return</span> emptyArray.some.call($<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> $.contains(parent, node)</div><div class="line">          &#125;)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 如果 selector 不是对象（即是css选择器）：</span></div><div class="line"></div><div class="line">      <span class="comment">// 如果只有一个元素，则使用 qsa 判断，结果经过 $ 封装后赋值给 result</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length == <span class="number">1</span>) result = $(zepto.qsa(<span class="keyword">this</span>[<span class="number">0</span>], selector))</div><div class="line"></div><div class="line">      <span class="comment">// 如果有多个元素，则使用 map 遍历所有元素，使用 qsa 针对每个元素判断，符合条件即返回（map将返回包含符合条件的元素的新数组，并 $ 封装，支持链式操作！！）</span></div><div class="line">      <span class="keyword">else</span> result = <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> zepto.qsa(<span class="keyword">this</span>, selector) &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 返回最终结果</span></div><div class="line">      <span class="keyword">return</span> result</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 从元素本身开始，逐级向上级元素匹配，并返回最先匹配selector的元素</span></div><div class="line">    closest: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> node = <span class="keyword">this</span>[<span class="number">0</span>], collection = <span class="literal">false</span></div><div class="line"></div><div class="line">      <span class="comment">// 如果 selector 是对象，则用 $ 封装后，赋值给 collection</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'object'</span>) collection = $(selector)</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (</div><div class="line">        <span class="comment">// while循环的判断条件：</span></div><div class="line">        <span class="comment">// 第一，node有值（node一开始被赋值为对象的第一个元素）</span></div><div class="line">        <span class="comment">// 第二，collection有值（传入的selector是对象）则collection包含node；collection无值（传入的selector是字符串，css选择），则node满足selector条件</span></div><div class="line">        <span class="comment">// 满足第一个条件，不满足第二条件，则循环继续（node试图赋值为node.parentNode）；否则，循环跳出（说明已经找到了符合条件的父节点）</span></div><div class="line">        node &amp;&amp; !(</div><div class="line">                    collection ? collection.indexOf(node) &gt;= <span class="number">0</span> : zepto.matches(node, selector)</div><div class="line">                )</div><div class="line">      )</div><div class="line">        <span class="comment">// node赋值成 node.parentNode</span></div><div class="line">        <span class="comment">// 前提条件是：node != context &amp;&amp; node 不是 document，如果是这两个条件之一，那就不继续赋值</span></div><div class="line">        node = node !== context &amp;&amp; !isDocument(node) &amp;&amp; node.parentNode</div><div class="line"></div><div class="line">      <span class="comment">// 返回最终结果</span></div><div class="line">      <span class="keyword">return</span> $(node)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获取对象集合每个元素所有的祖先元素。 $('h1').parents() =&gt; [&lt;div#container&gt;, &lt;body&gt;, &lt;html&gt;]</span></div><div class="line">    parents: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> ancestors = [], nodes = <span class="keyword">this</span></div><div class="line">      <span class="keyword">while</span> (nodes.length &gt; <span class="number">0</span>)</div><div class="line">        <span class="comment">// 可能需要执行多次 while 循环</span></div><div class="line">        <span class="comment">// 每次执行 $.map 函数都会对 nodes 重新赋值，然后再判断是否需要继续循环</span></div><div class="line">        <span class="comment">// 因为要获取每个元素的所有祖先元素，所以要多次循环</span></div><div class="line">        nodes = $.map(nodes, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">          <span class="comment">// 使用 $.map（返回符合条件的元素的新数组，并用 $ 封装）遍历所有元素</span></div><div class="line">          <span class="keyword">if</span> ((node = node.parentNode) &amp;&amp; !isDocument(node) &amp;&amp; ancestors.indexOf(node) &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 将符合条件的元素push到结果中</span></div><div class="line">            <span class="comment">// 条件：不能是 document，结果中元素不能重复。否则不执行push</span></div><div class="line">            ancestors.push(node)</div><div class="line"></div><div class="line">            <span class="comment">// 返回的 node ，将拼接出新数组，重新复制给 nodes，然后试图继续执行 while 循环</span></div><div class="line">            <span class="keyword">return</span> node</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 如果css选择器参数给出，过滤出符合条件的元素</span></div><div class="line">      <span class="keyword">return</span> filtered(ancestors, selector)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获取对象集合中每个元素的直接父元素。如果css选择器参数给出。过滤出符合条件的元素。</span></div><div class="line">    parent: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="comment">// pluck 函数在下文定义</span></div><div class="line">      <span class="comment">// parent 函数，只获取第一级父节点即可</span></div><div class="line">      <span class="keyword">return</span> filtered(uniq(<span class="keyword">this</span>.pluck(<span class="string">'parentNode'</span>)), selector)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获得每个匹配元素集合元素的直接子元素，可通过 selector 过滤</span></div><div class="line">    children: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> filtered(</div><div class="line">        <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> children(<span class="keyword">this</span>) &#125;),  selector</div><div class="line">      )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获得每个匹配元素集合元素的子元素，包括文字和注释节点</span></div><div class="line">    contents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> slice.call(<span class="keyword">this</span>.childNodes) &#125;)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获取对象集合中所有元素的兄弟节点，可通过 selector 过滤</span></div><div class="line">    siblings: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> filtered(<span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;</div><div class="line">        <span class="comment">// 获取兄弟节点</span></div><div class="line">        <span class="keyword">return</span> filter.call(children(el.parentNode), <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123; <span class="keyword">return</span> child!==el &#125;)</div><div class="line">      &#125;), selector)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">empty</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.innerHTML = <span class="string">''</span> &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// `pluck` is borrowed from Prototype.js</span></div><div class="line">    pluck: <span class="function"><span class="keyword">function</span>(<span class="params">property</span>)</span>&#123;</div><div class="line">      <span class="comment">// 获取自定义属性，返回值，拼接数组</span></div><div class="line">      <span class="keyword">return</span> $.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123; <span class="keyword">return</span> el[property] &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">show</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// 返回当前对象，保证可链式操作</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 第一步，针对内联样式，将 none 改为空字符串，如 &lt;p id="p2" style="display:none;"&gt;p2&lt;/p&gt;</span></div><div class="line">        <span class="keyword">this</span>.style.display == <span class="string">"none"</span> &amp;&amp; (<span class="keyword">this</span>.style.display = <span class="string">''</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 第二步，针对css样式，如果是 none 则修改为默认的显示样式</span></div><div class="line">        <span class="keyword">if</span> (getComputedStyle(<span class="keyword">this</span>, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>) == <span class="string">"none"</span>)</div><div class="line">          <span class="keyword">this</span>.style.display = defaultDisplay(<span class="keyword">this</span>.nodeName)</div><div class="line"></div><div class="line">        <span class="comment">// show 方法是为了显示对象，而对象隐藏的方式有两种：内联样式 或 css样式</span></div><div class="line">        <span class="comment">// this.style.display 只能获取内联样式的值（获取属性值）</span></div><div class="line">        <span class="comment">// getComputedStyle(this, '').getPropertyValue("display") 可以获取内联、css样式的值（获取 renderTree 的值）</span></div><div class="line">        <span class="comment">// 因此，这两步都要做判断，</span></div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">replaceWith</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newContent</span>)</span>&#123;</div><div class="line">      <span class="comment">// 先在前面插入，然后将当前对象移除</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.before(newContent).remove()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">wrap</span>: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</div><div class="line">      <span class="comment">// 是否是函数</span></div><div class="line">      <span class="keyword">var</span> func = isFunction(structure)</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; !func)</div><div class="line">        <span class="keyword">var</span> dom   = $(structure).get(<span class="number">0</span>),</div><div class="line">            <span class="comment">// 何时用 clone ？</span></div><div class="line">            <span class="comment">// 第一，dom.parentNode 说明 dom 在文档结构中，不 clone 就会被移动</span></div><div class="line">            <span class="comment">// 第二，this.length &gt; 1 说明当前对象有多个元素，每个元素都要添加，所有要clone</span></div><div class="line">            clone = dom.parentNode || <span class="keyword">this</span>.length &gt; <span class="number">1</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        <span class="comment">// 借用 wrapAll 方法来做包装</span></div><div class="line">        $(<span class="keyword">this</span>).wrapAll(</div><div class="line">          func ? structure.call(<span class="keyword">this</span>, index) :</div><div class="line">            clone ? dom.cloneNode(<span class="literal">true</span>) : dom</div><div class="line">        )</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 在所有匹配元素外面包一个单独的结构</span></div><div class="line">    wrapAll: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>]) &#123;</div><div class="line">        <span class="comment">// 先将 structure 插入到文档结构</span></div><div class="line">        $(<span class="keyword">this</span>[<span class="number">0</span>]).before(structure = $(structure))</div><div class="line"></div><div class="line">        <span class="keyword">var</span> children</div><div class="line">        <span class="comment">// drill down to the inmost element</span></div><div class="line">        <span class="comment">// 通过循环，将 structure 重新赋值为当前 structure 的最深处的一个子元素 </span></div><div class="line">        <span class="keyword">while</span> ((children = structure.children()).length) structure = children.first()</div><div class="line"></div><div class="line">        <span class="comment">// 将所有子元素都包裹进 structure</span></div><div class="line">        $(structure).append(<span class="keyword">this</span>)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 返回当前对象</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">wrapInner</span>: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</div><div class="line">      <span class="comment">// 是否是函数</span></div><div class="line">      <span class="keyword">var</span> func = isFunction(structure)</div><div class="line"></div><div class="line">      <span class="comment">// 返回对象自身，保证链式操作</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> self = $(<span class="keyword">this</span>), contents = self.contents(),</div><div class="line">            <span class="comment">// 是函数，即获取函数执行的返回结果；否则直接用 structure 参数</span></div><div class="line">            dom  = func ? structure.call(<span class="keyword">this</span>, index) : structure</div><div class="line"></div><div class="line">        <span class="comment">// 如果当前元素有内容，则通过内容 wrapAll。无内容，则直接用自身的 append 增加</span></div><div class="line">        contents.length ? contents.wrapAll(dom) : self.append(dom)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">unwrap</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// 通过 this.parent() 获取每个元素的父节点（集合）</span></div><div class="line">      <span class="comment">// 遍历这个父节点的集合</span></div><div class="line">      <span class="keyword">this</span>.parent().each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 将当前父节点替换为它的子节点</span></div><div class="line">        $(<span class="keyword">this</span>).replaceWith($(<span class="keyword">this</span>).children())</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 返回对象自身，保证链式操作</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// 通过 this.map 循环对象，</span></div><div class="line">      <span class="comment">// 针对每个元素都返回它的clone         这个 this 和前面的 this 不一样</span></div><div class="line">      <span class="comment">// 返回新数组（用 $ 封装）</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.cloneNode(<span class="literal">true</span>) &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">hide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.css(<span class="string">"display"</span>, <span class="string">"none"</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 切换显示和隐藏</span></div><div class="line">    toggle: <span class="function"><span class="keyword">function</span>(<span class="params">setting</span>)</span>&#123;</div><div class="line">      <span class="comment">/*</span></div><div class="line">        @setting</div><div class="line">        true : 强制切换为 show</div><div class="line">        false : 强制切换为 hide</div><div class="line">      */</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> el = $(<span class="keyword">this</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 条件判断：</span></div><div class="line">        <span class="comment">// 如果 setting === undefined 则看 el.css("display") == "none"</span></div><div class="line">        <span class="comment">// 如果 setting !== undefined 则看 !!setting</span></div><div class="line">        ;(setting === <span class="literal">undefined</span> ? el.css(<span class="string">"display"</span>) == <span class="string">"none"</span> : setting) ? </div><div class="line">        el.show() : <span class="comment">// 如果 true 则显示</span></div><div class="line">        el.hide() <span class="comment">// 如果 false 则隐藏</span></div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 借助 previousElementSibling 属性</span></div><div class="line">    prev: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123; <span class="keyword">return</span> $(<span class="keyword">this</span>.pluck(<span class="string">'previousElementSibling'</span>)).filter(selector || <span class="string">'*'</span>) &#125;,</div><div class="line">    <span class="comment">// 借助 nextElementSibling 属性</span></div><div class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123; <span class="keyword">return</span> $(<span class="keyword">this</span>.pluck(<span class="string">'nextElementSibling'</span>)).filter(selector || <span class="string">'*'</span>) &#125;,</div><div class="line">    <span class="attr">html</span>: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> </div><div class="line"></div><div class="line">        <span class="comment">// 情况1：有参数，赋值，并返回自身</span></div><div class="line">        <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ? </div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> originHtml = <span class="keyword">this</span>.innerHTML</div><div class="line">          <span class="comment">// 传入的 html 参数允许是一个字符串，也允许是一个函数</span></div><div class="line">          <span class="comment">// 通过 funcArg 函数：</span></div><div class="line">          <span class="comment">//  1.如果 html 是字符串，则返回html</span></div><div class="line">          <span class="comment">//  2.如果 html 是函数，则执行执行函数（传入 idx、originHtml），返回函数执行结果</span></div><div class="line">          $(<span class="keyword">this</span>).empty().append( funcArg(<span class="keyword">this</span>, html, idx, originHtml) )</div><div class="line">        &#125;) :</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">          插播：</div><div class="line">          function funcArg(context, arg, idx, payload) &#123;</div><div class="line">            return isFunction(arg) ? arg.call(context, idx, payload) : arg</div><div class="line">          &#125;</div><div class="line">        */</div><div class="line"></div><div class="line">        <span class="comment">// 情况2：无参数，取值</span></div><div class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> ? </div><div class="line">          <span class="keyword">this</span>[<span class="number">0</span>].innerHTML : <span class="comment">// 直接取第一个元素的 innerHTML</span></div><div class="line">          <span class="literal">null</span></div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">text</span>: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> </div><div class="line"></div><div class="line">        <span class="comment">// 情况1：有参数，赋值，并返回自身</span></div><div class="line">        <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ?</div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">          <span class="comment">// funcArg的应用，和html方法中一样</span></div><div class="line">          <span class="keyword">var</span> newText = funcArg(<span class="keyword">this</span>, text, idx, <span class="keyword">this</span>.textContent)</div><div class="line">          <span class="keyword">this</span>.textContent = newText == <span class="literal">null</span> ? <span class="string">''</span> : <span class="string">''</span>+newText</div><div class="line">        &#125;) :</div><div class="line"></div><div class="line">        <span class="comment">// 情况2：无参数，取值</span></div><div class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> ? <span class="keyword">this</span>[<span class="number">0</span>].textContent : <span class="literal">null</span>)  <span class="comment">// 直接借用 textContent 属性</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">attr</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> result</div><div class="line"></div><div class="line">      <span class="keyword">return</span> </div><div class="line"></div><div class="line">        <span class="comment">// 情况1：无第二个参数，读取值（读取值只能读取第一个元素的值）</span></div><div class="line">        (<span class="keyword">typeof</span> name == <span class="string">'string'</span> &amp;&amp; !(<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>)) ?</div><div class="line">        (!<span class="keyword">this</span>.length || <span class="keyword">this</span>[<span class="number">0</span>].nodeType !== <span class="number">1</span> ? <span class="literal">undefined</span> :</div><div class="line">          <span class="comment">/*</span></div><div class="line">            注释：</div><div class="line">            this[0]是一个DOM节点，有『属性』也有『特性』</div><div class="line">              result = this[0].getAttribute(name) 试图获取 DOM节点属性</div><div class="line">              name in this[0] 判断是不是js对象的属性</div><div class="line">            然后，该返回哪一个就返回哪一个</div><div class="line">          */</div><div class="line">          (!(result = <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name)) &amp;&amp; name <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]) ? </div><div class="line">          <span class="keyword">this</span>[<span class="number">0</span>][name] : </div><div class="line">          result</div><div class="line">        ) :</div><div class="line"></div><div class="line">        <span class="comment">// 情况2：有第二个参数，设置值（针对每个元素设置值）</span></div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType !== <span class="number">1</span>) <span class="keyword">return</span></div><div class="line"></div><div class="line">          <span class="comment">// 传入的参数可能是一个对象集合</span></div><div class="line">          <span class="comment">// 此时，是不是应该放在『情况1』当中？？？此时，value根本没有用啊？？？</span></div><div class="line">          <span class="keyword">if</span> (isObject(name)) <span class="keyword">for</span> (key <span class="keyword">in</span> name) setAttribute(<span class="keyword">this</span>, key, name[key])</div><div class="line"></div><div class="line">          <span class="comment">// 传入的不是对象，即设置一个单一的属性。</span></div><div class="line">          <span class="comment">// 但是，这里的 value 参数可以是一个函数</span></div><div class="line">          <span class="comment">// funcArg 即处理了 value 是函数和非函数的两种情况</span></div><div class="line">          <span class="keyword">else</span> setAttribute(<span class="keyword">this</span>, name, funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.getAttribute(name)))</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">removeAttr</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">          <span class="keyword">this</span>.nodeType === <span class="number">1</span> &amp;&amp; name.split(<span class="string">' '</span>).forEach(</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">attribute</span>)</span>&#123;</div><div class="line">              setAttribute(<span class="keyword">this</span>, attribute)  <span class="comment">// 将属性设置为空，setAttribute会移除属性</span></div><div class="line">            &#125;, </div><div class="line">            <span class="keyword">this</span> <span class="comment">// 改参数将成为 forEach 中函数的this</span></div><div class="line">          )</div><div class="line">        &#125;</div><div class="line">      )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 读取、设置属性（js对象的属性）</span></div><div class="line">    prop: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</div><div class="line">      <span class="comment">// propMap 中存储的：key是html中的属性名称，value是js对象中的属性名称</span></div><div class="line">      <span class="comment">// 例如，html中的 "class" 在DOM对象中，就需要使用 "className" 这个名字读取，同理于：for  maxlength  cellspacing 等等</span></div><div class="line">      name = propMap[name] || name</div><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line">        上文定义：</div><div class="line">        propMap = &#123;</div><div class="line">          'tabindex': 'tabIndex',</div><div class="line">          'readonly': 'readOnly',</div><div class="line">          'for': 'htmlFor',</div><div class="line">          'class': 'className',</div><div class="line">          'maxlength': 'maxLength',</div><div class="line">          'cellspacing': 'cellSpacing',</div><div class="line">          'cellpadding': 'cellPadding',</div><div class="line">          'rowspan': 'rowSpan',</div><div class="line">          'colspan': 'colSpan',</div><div class="line">          'usemap': 'useMap',</div><div class="line">          'frameborder': 'frameBorder',</div><div class="line">          'contenteditable': 'contentEditable'</div><div class="line">        &#125;</div><div class="line">      */</div><div class="line"></div><div class="line">      <span class="keyword">return</span> </div><div class="line"></div><div class="line">        <span class="comment">// 有第二个参数，设置属性</span></div><div class="line">        (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">          <span class="comment">// 设置属性值，funcArg处理函数或者非函数</span></div><div class="line">          <span class="keyword">this</span>[name] = funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>[name])</div><div class="line">        &#125;) :</div><div class="line"></div><div class="line">        <span class="comment">// 无第二个参数，读取属性（读取第一个元素的）</span></div><div class="line">        (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; <span class="keyword">this</span>[<span class="number">0</span>][name])</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 前面加上 'data-' 通过 attr 设置或者读取</span></div><div class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</div><div class="line">      <span class="comment">/*</span></div><div class="line">        上文定义：</div><div class="line">        capitalRE = /([A-Z])/g,  //大写字母</div><div class="line">      */</div><div class="line"></div><div class="line">      <span class="comment">//      前面加上 'data-'               将 'A' 替换为 '-a'</span></div><div class="line">      <span class="keyword">var</span> attrName = <span class="string">'data-'</span> + name.replace(capitalRE, <span class="string">'-$1'</span>).toLowerCase()</div><div class="line"></div><div class="line">      <span class="keyword">var</span> data = (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</div><div class="line">        <span class="keyword">this</span>.attr(attrName, value) :</div><div class="line">        <span class="keyword">this</span>.attr(attrName)</div><div class="line"></div><div class="line">      <span class="keyword">return</span> data !== <span class="literal">null</span> ? deserializeValue(data) : <span class="literal">undefined</span></div><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line">        上文定义的，deserializeValue 函数的作用是：</div><div class="line"></div><div class="line">        // 将字符串变成响应的对象或者值，例如源代码的注释：</div><div class="line">        // "true"  =&gt; true</div><div class="line">        // "false" =&gt; false</div><div class="line">        // "null"  =&gt; null</div><div class="line">        // "42"    =&gt; 42</div><div class="line">        // "42.5"  =&gt; 42.5</div><div class="line">        // "08"    =&gt; "08"</div><div class="line">        // JSON    =&gt; parse if valid</div><div class="line">        // String  =&gt; self</div><div class="line">      */</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">val</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> </div><div class="line"></div><div class="line">        <span class="comment">// 有参数，设置值</span></div><div class="line">        <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ?</div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">          <span class="comment">// 遍历每个元素，直接对 value 属性赋值</span></div><div class="line">          <span class="keyword">this</span>.value = funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.value)</div><div class="line">        &#125;) :</div><div class="line"></div><div class="line">        <span class="comment">// 无参数，读取值</span></div><div class="line">        (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; (</div><div class="line">           <span class="comment">// 如果元素是 &lt;select multiple&gt; 多选列表</span></div><div class="line">           <span class="keyword">this</span>[<span class="number">0</span>].multiple ?</div><div class="line">           <span class="comment">// 返回所有选中的option的值的数组</span></div><div class="line">           $(<span class="keyword">this</span>[<span class="number">0</span>]).find(<span class="string">'option'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.selected &#125;).pluck(<span class="string">'value'</span>) :</div><div class="line"></div><div class="line">                   <span class="comment">/*</span></div><div class="line">                      上文定义：</div><div class="line">                      pluck: function(property)&#123;</div><div class="line">                        return $.map(this, function(el)&#123; return el[property] &#125;)</div><div class="line">                      &#125;,</div><div class="line">                   */</div><div class="line"></div><div class="line">           <span class="comment">// 如果不是，直接获取 value</span></div><div class="line">           <span class="keyword">this</span>[<span class="number">0</span>].value</div><div class="line">          )</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获取、设置元素的 offset</span></div><div class="line">    offset: <span class="function"><span class="keyword">function</span>(<span class="params">coordinates</span>)</span>&#123;</div><div class="line">      <span class="comment">// 如果有 coordinates 参数，设置坐标值，并返回当前对象</span></div><div class="line">      <span class="keyword">if</span> (coordinates) <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</div><div class="line">            <span class="comment">// 支持函数（传入 $this.offset() 做参数）和非函数</span></div><div class="line">            coords = funcArg(<span class="keyword">this</span>, coordinates, index, $<span class="keyword">this</span>.offset()),</div><div class="line">            <span class="comment">// 找到最近的 “relative”, “absolute” or “fixed” 的祖先元素，并获取它的 offset()</span></div><div class="line">            parentOffset = $<span class="keyword">this</span>.offsetParent().offset(),</div><div class="line">            <span class="comment">// left 和 top 需要去掉定位的祖先元素的 left、top 值</span></div><div class="line">            props = &#123;</div><div class="line">              <span class="attr">top</span>:  coords.top  - parentOffset.top,</div><div class="line">              <span class="attr">left</span>: coords.left - parentOffset.left</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="comment">// static时，设置 top、left是无效的</span></div><div class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.css(<span class="string">'position'</span>) == <span class="string">'static'</span>) props[<span class="string">'position'</span>] = <span class="string">'relative'</span></div><div class="line"></div><div class="line">        <span class="comment">// 通过 css 赋值</span></div><div class="line">        $<span class="keyword">this</span>.css(props)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      <span class="comment">// 当前对象是空，则返回 null</span></div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span></div><div class="line"></div><div class="line">      <span class="comment">// 如果没有 coordinates 参数，则返回第一个元素的坐标值</span></div><div class="line">      <span class="keyword">var</span> obj = <span class="keyword">this</span>[<span class="number">0</span>].getBoundingClientRect()</div><div class="line">      <span class="comment">/*</span></div><div class="line">        elem.getBoundingClientRect() 返回一个对象，</div><div class="line">        包含元素的 top bottom left right width height 的值</div><div class="line">        但是这个 top、bottom、left、right 是相对于浏览器窗口的距离，而不是页面的边界</div><div class="line">        （注意，elem.getBoundingClientRect()在IE低版本浏览器有2px的兼容问题）</div><div class="line"></div><div class="line">        window.pageXOffset 和 window.pageYOffset 可获取网页滚动的距离，</div><div class="line">        IE低版本需要用 document.body.scrollLeft 和 document.body.scrollTop 兼容</div><div class="line">      */</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">left</span>: obj.left + <span class="built_in">window</span>.pageXOffset,</div><div class="line">        <span class="attr">top</span>: obj.top + <span class="built_in">window</span>.pageYOffset,</div><div class="line">        <span class="attr">width</span>: <span class="built_in">Math</span>.round(obj.width),</div><div class="line">        <span class="attr">height</span>: <span class="built_in">Math</span>.round(obj.height)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 设置、获取 css</span></div><div class="line">    css: <span class="function"><span class="keyword">function</span>(<span class="params">property, value</span>)</span>&#123;</div><div class="line"></div><div class="line">      <span class="comment">// 只有一个参数，获取第一个元素的样式</span></div><div class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">var</span> computedStyle, element = <span class="keyword">this</span>[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span>(!element) <span class="keyword">return</span>  <span class="comment">// 如果第一个元素无值，直接返回。否则继续</span></div><div class="line"></div><div class="line">        <span class="comment">// 获取元素的计算后的样式</span></div><div class="line">        computedStyle = getComputedStyle(element, <span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> property == <span class="string">'string'</span>)</div><div class="line">          <span class="comment">// 情况1，参数为字符串形式</span></div><div class="line">          <span class="comment">// 先从elem内联样式获取（element.style），此时需要 camelize(property) 转换，如将 background-color 变为 backgroundColor</span></div><div class="line">          <span class="comment">// 如果未找到，则从css样式获取 computedStyle.getPropertyValue(property) </span></div><div class="line">          <span class="comment">// （重要）注释：elem.style 只能获取元素设置的内联样式、不能获取css样式；而 getComputedStyle 可获取内联、css样式。</span></div><div class="line">          <span class="keyword">return</span> element.style[camelize(property)] || computedStyle.getPropertyValue(property)</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isArray(property)) &#123;</div><div class="line">          <span class="comment">// 情况2，参数为数组形式（注意，此时 isObject 情况尚未判断）</span></div><div class="line">          <span class="keyword">var</span> props = &#123;&#125;</div><div class="line">          $.each(property, <span class="function"><span class="keyword">function</span>(<span class="params">_, prop</span>)</span>&#123;</div><div class="line">            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))</div><div class="line">          &#125;)</div><div class="line">          <span class="keyword">return</span> props  <span class="comment">// 返回一个对象</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 其他情况：有两个参数、property是对象</span></div><div class="line">      <span class="keyword">var</span> css = <span class="string">''</span></div><div class="line">      <span class="keyword">if</span> (type(property) == <span class="string">'string'</span>) &#123;</div><div class="line">        <span class="comment">// 情况1，property 是字符串，设置单个样式</span></div><div class="line">        <span class="keyword">if</span> (!value &amp;&amp; value !== <span class="number">0</span>)</div><div class="line">          <span class="comment">// 如果value参数是 '' null undefined 则移除这个css样式</span></div><div class="line">          <span class="comment">// 注：此计算只适用于内联样式的删除，对 css 样式无效，因为它只通过 this.style.removeProperty 计算，而 this.style 获取不到css样式</span></div><div class="line">          <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.removeProperty(dasherize(property)) &#125;)</div><div class="line">        <span class="keyword">else</span></div><div class="line">          <span class="comment">// value有正常值，将 css 生成一个字符串（如 'font-size:20px'）等待赋值给内联样式</span></div><div class="line">          <span class="comment">// maybeAddPx(property, value) 需要增加 px 的增加上</span></div><div class="line">          css = dasherize(property) + <span class="string">":"</span> + maybeAddPx(property, value)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 情况2，property 是对象（此时就不管第二个参数是什么了，不用第二个参数），一次性设置多个样式</span></div><div class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> property)</div><div class="line">          <span class="keyword">if</span> (!property[key] &amp;&amp; property[key] !== <span class="number">0</span>)</div><div class="line">            <span class="comment">// 如果对象属性值是 '' null undefined 则移除这个css样式，同理，只针对内联样式</span></div><div class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.removeProperty(dasherize(key)) &#125;)</div><div class="line">          <span class="keyword">else</span></div><div class="line">            <span class="comment">// 否则，给 css 赋值一个字符串，多样式属性用 ; 隔开</span></div><div class="line">            css += dasherize(key) + <span class="string">':'</span> + maybeAddPx(key, property[key]) + <span class="string">';'</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 针对每个元素，设置内联样式（this.style.cssText可获取、设置内联样式）</span></div><div class="line">      <span class="comment">// 最后返回自身</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.cssText += <span class="string">';'</span> + css &#125;)</div><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line">        上文定义：</div><div class="line">        // 将 lineHeight 转换为 line-height 格式</div><div class="line">        function dasherize(str) &#123;</div><div class="line">          return str.replace(/::/g, '/')</div><div class="line">                    .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')</div><div class="line">                    .replace(/([a-z\d])([A-Z])/g, '$1_$2')</div><div class="line">                    .replace(/_/g, '-')</div><div class="line">                    .toLowerCase()</div><div class="line">        &#125;</div><div class="line">      */</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 获取一个元素的索引值（从0开始计数）。当elemen参数没有给出时，返回当前元素在兄弟节点中的位置</span></div><div class="line">    index: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">      <span class="comment">/*</span></div><div class="line">        上文定义：</div><div class="line">        $.fn.indexOf: emptyArray.indexOf</div><div class="line">      */</div><div class="line"></div><div class="line">      <span class="comment">// 其实 this 本身就是一个数组，数组本身就有 indexOf ，为何还要上文的这个赋值呢？</span></div><div class="line">      <span class="comment">// 因为上文中，this.__proto__ 修改了，不是 Array.prototype 了，也就没有 indexOf 方法了</span></div><div class="line">      <span class="comment">// 因此要手动赋值，需要将数组常用的方法在重新赋值给 $.fn.indexOf</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> element ? <span class="keyword">this</span>.indexOf($(element)[<span class="number">0</span>]) : <span class="keyword">this</span>.parent().children().indexOf(<span class="keyword">this</span>[<span class="number">0</span>])</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">hasClass</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">      <span class="keyword">return</span> emptyArray.some.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">        <span class="comment">// this 就是 classRE(name) 的返回值（返回一个正则）</span></div><div class="line">        <span class="comment">// function className(node, value)&#123;...&#125; 获取或者设置elem的className</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.test(className(el))</div><div class="line">      &#125;, classRE(name))</div><div class="line"></div><div class="line">      <span class="comment">// array.some(callback,[ thisObject]); 只要数组中一项符合callback要求，即返回true</span></div><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line">        // 上文定义 classCache = &#123;&#125;</div><div class="line">        function classRE(name) &#123;</div><div class="line">          return name in classCache ?</div><div class="line">                 classCache[name] : </div><div class="line">                 (classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'))</div><div class="line"></div><div class="line">          // classCache 存储的数据是这样的：</div><div class="line">          // &#123;</div><div class="line">          //   abc: /(^|\s)abc(\s|$)/,  // 能匹配 'abc' 或 ' abc ' 或 ' abc' 或 'abc '</div><div class="line">          //   xyz: /(^|\s)abc(\s|$)/,</div><div class="line">          //   ...</div><div class="line">          // &#125;</div><div class="line">        &#125;</div><div class="line">      */</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">addClass</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">      <span class="comment">// 针对所有元素都添加className，最终返回本身</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">        <span class="comment">// 说明当前元素不是 DOM node</span></div><div class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment">// classList 是一开始就定义的空变量</span></div><div class="line">        classList = []</div><div class="line">        <span class="comment">// 获取元素的 clasname      // 支持传入函数</span></div><div class="line">        <span class="keyword">var</span> cls = className(<span class="keyword">this</span>), newName = funcArg(<span class="keyword">this</span>, name, idx, cls)</div><div class="line">        <span class="comment">// 把要赋值的值，按照空白分组，遍历</span></div><div class="line">        newName.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line">          <span class="comment">// 把当前元素不存在的class，push到classlist中</span></div><div class="line">          <span class="keyword">if</span> (!$(<span class="keyword">this</span>).hasClass(klass)) classList.push(klass)</div><div class="line">        &#125;, <span class="keyword">this</span>)</div><div class="line">        <span class="comment">// 如果classlist有数据，则为当前元素赋值最新的class值（现有的classname和新的classname拼接）</span></div><div class="line">        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">removeClass</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">      <span class="comment">// 针对所有元素都移除className，最终返回本身</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">        <span class="comment">// 说明当前元素不是 DOM node</span></div><div class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment">// 如果参数空，则移除元素的所有class</span></div><div class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) <span class="keyword">return</span> className(<span class="keyword">this</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 获取现有的classname</span></div><div class="line">        classList = className(<span class="keyword">this</span>)</div><div class="line">        <span class="comment">// （可以传入函数）遍历新的classname字符串</span></div><div class="line">        funcArg(<span class="keyword">this</span>, name, idx, classList).split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line">          <span class="comment">// classRE(klass) 返回一个正则，匹配 'classname' 或 ' classname ' 或 ' classname' 或 'classname '</span></div><div class="line">          <span class="comment">// 针对传入的classname字符串，对每个符合条件的classname，都替换为 ' '（即删除了）</span></div><div class="line">          classList = classList.replace(classRE(klass), <span class="string">" "</span>)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// 对整理好的classname，重新赋值给当前元素</span></div><div class="line">        className(<span class="keyword">this</span>, classList.trim())</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">toggleClass</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name, when</span>)</span>&#123;</div><div class="line">      <span class="comment">// when 参数相当于一个条件：</span></div><div class="line">      <span class="comment">// 如果 when === true 则单纯执行 addClass</span></div><div class="line">      <span class="comment">// 如果 when === false 则单纯执行 removeClass</span></div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">        <span class="comment">//                   name 可接收函数，可以是空白分割开来的多个classname</span></div><div class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>), names = funcArg(<span class="keyword">this</span>, name, idx, className(<span class="keyword">this</span>))</div><div class="line">        <span class="comment">// 用空白分割开多个class</span></div><div class="line">        names.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line">          <span class="comment">// 如果有 when 参数，则只通过when参数判断，true则只执行addClass，false则只执行removeClass</span></div><div class="line">          <span class="comment">// 如果没有 when 参数，则判断元素有没有该class，有则移除，没有则添加</span></div><div class="line">          (when === <span class="literal">undefined</span> ? !$<span class="keyword">this</span>.hasClass(klass) : when) ?</div><div class="line">            $<span class="keyword">this</span>.addClass(klass) : $<span class="keyword">this</span>.removeClass(klass)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">scrollTop</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></div><div class="line"></div><div class="line">      <span class="comment">// 普通elem有 scrollTop 属性，可以获取或者设置top值</span></div><div class="line">      <span class="comment">// window对象没有 scrollTop 属性，通过 pageYOffset 获取，通过 scrollTo() 赋值</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> hasScrollTop = <span class="string">'scrollTop'</span> <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]</div><div class="line">      <span class="comment">// value 无值，获取 top</span></div><div class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> hasScrollTop ? <span class="keyword">this</span>[<span class="number">0</span>].scrollTop : <span class="keyword">this</span>[<span class="number">0</span>].pageYOffset</div><div class="line">      <span class="comment">// value 有值，设置 top</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(hasScrollTop ?</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTop = value &#125; :</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTo(<span class="keyword">this</span>.scrollX, value) &#125;)   <span class="comment">// window.scrollX 获取横向滚动值</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">scrollLeft</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></div><div class="line">      <span class="keyword">var</span> hasScrollLeft = <span class="string">'scrollLeft'</span> <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]</div><div class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> hasScrollLeft ? <span class="keyword">this</span>[<span class="number">0</span>].scrollLeft : <span class="keyword">this</span>[<span class="number">0</span>].pageXOffset</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(hasScrollLeft ?</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollLeft = value &#125; :</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTo(value, <span class="keyword">this</span>.scrollY) &#125;)   <span class="comment">// window.scrollX 获取纵向滚动值</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">position</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> elem = <span class="keyword">this</span>[<span class="number">0</span>],</div><div class="line">        <span class="comment">// Get *real* offsetParent</span></div><div class="line">        offsetParent = <span class="keyword">this</span>.offsetParent(),  <span class="comment">// 找到第一个定位过的祖先元素 “relative”, “absolute” or “fixed”</span></div><div class="line">        <span class="comment">// Get correct offsets</span></div><div class="line">        offset       = <span class="keyword">this</span>.offset(), <span class="comment">// 获取自身的offset</span></div><div class="line">        parentOffset = rootNodeRE.test(offsetParent[<span class="number">0</span>].nodeName) ? &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span> &#125; : offsetParent.offset()  <span class="comment">// 获取定位祖先元素的offset（ body、html直接设置 top:0;left:0 ）</span></div><div class="line">      <span class="comment">// 上文定义： rootNodeRE = /^(?:body|html)$/i,</span></div><div class="line"></div><div class="line">      <span class="comment">// 去掉当前元素的 margin 宽度</span></div><div class="line">      <span class="comment">// Subtract element margins</span></div><div class="line">      <span class="comment">// note: when an element has margin: auto the offsetLeft and marginLeft</span></div><div class="line">      <span class="comment">// are the same in Safari causing offset.left to incorrectly be 0</span></div><div class="line">      offset.top  -= <span class="built_in">parseFloat</span>( $(elem).css(<span class="string">'margin-top'</span>) ) || <span class="number">0</span></div><div class="line">      offset.left -= <span class="built_in">parseFloat</span>( $(elem).css(<span class="string">'margin-left'</span>) ) || <span class="number">0</span></div><div class="line"></div><div class="line">      <span class="comment">// 增加父元素的 border 宽度</span></div><div class="line">      <span class="comment">// Add offsetParent borders</span></div><div class="line">      parentOffset.top  += <span class="built_in">parseFloat</span>( $(offsetParent[<span class="number">0</span>]).css(<span class="string">'border-top-width'</span>) ) || <span class="number">0</span></div><div class="line">      parentOffset.left += <span class="built_in">parseFloat</span>( $(offsetParent[<span class="number">0</span>]).css(<span class="string">'border-left-width'</span>) ) || <span class="number">0</span></div><div class="line"></div><div class="line">      <span class="comment">// Subtract the two offsets</span></div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">top</span>:  offset.top  - parentOffset.top,</div><div class="line">        <span class="attr">left</span>: offset.left - parentOffset.left</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">offsetParent</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 通过 this.map 遍历当前对象所有元素，进行计算，然后拼接新的数组，并返回。保证链式操作</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.offsetParent || <span class="built_in">document</span>.body  <span class="comment">// elem.offsetParent 可返回最近的改元素最近的已经定位的父元素</span></div><div class="line">        <span class="keyword">while</span> (parent &amp;&amp; !rootNodeRE.test(parent.nodeName) &amp;&amp; $(parent).css(<span class="string">"position"</span>) == <span class="string">"static"</span>)</div><div class="line">          <span class="comment">// 如果获取的parent不是null、不是body或html、而且position==static</span></div><div class="line">          <span class="comment">// 则继续向上查找 offsetParent、大不了找到 body 为止</span></div><div class="line">          parent = parent.offsetParent</div><div class="line"></div><div class="line">        <span class="comment">// 最后返回改元素</span></div><div class="line">        <span class="keyword">return</span> parent</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// for now</span></div><div class="line">  $.fn.detach = $.fn.remove</div><div class="line"></div><div class="line">  <span class="comment">// Generate the `width` and `height` functions</span></div><div class="line">  ;[<span class="string">'width'</span>, <span class="string">'height'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">dimension</span>)</span>&#123;</div><div class="line">    <span class="comment">// 将 width height 变为  Width Height</span></div><div class="line">    <span class="keyword">var</span> dimensionProperty =</div><div class="line">      dimension.replace(<span class="regexp">/./</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123; <span class="keyword">return</span> m[<span class="number">0</span>].toUpperCase() &#125;)</div><div class="line"></div><div class="line">    $.fn[dimension] = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> offset, el = <span class="keyword">this</span>[<span class="number">0</span>]</div><div class="line"></div><div class="line">      <span class="comment">// 情况1，无参数，获取第一个元素的值</span></div><div class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> isWindow(el) ? el[<span class="string">'inner'</span> + dimensionProperty] :  <span class="comment">// window.innerHeight</span></div><div class="line">        isDocument(el) ? el.documentElement[<span class="string">'scroll'</span> + dimensionProperty] :  <span class="comment">// document.documentElement.scrollHeight</span></div><div class="line">        (offset = <span class="keyword">this</span>.offset()) &amp;&amp; offset[dimension]  <span class="comment">// this.offset().width</span></div><div class="line"></div><div class="line">      <span class="comment">// 情况2，有参数，设置所有元素的值</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</div><div class="line">        el = $(<span class="keyword">this</span>)</div><div class="line">        <span class="comment">// 通过 css() 方法设置，支持传入函数</span></div><div class="line">        el.css(dimension, funcArg(<span class="keyword">this</span>, value, idx, el[dimension]()))</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// 针对当前元素、遍历子元素，都执行 fun 函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, fun</span>) </span>&#123;</div><div class="line">    fun(node)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = node.childNodes.length; i &lt; len; i++)</div><div class="line">      traverseNode(node.childNodes[i], fun)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 上文定义 adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],</span></div><div class="line"></div><div class="line">  <span class="comment">// Generate the `after`, `prepend`, `before`, `append`,</span></div><div class="line">  <span class="comment">// `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.</span></div><div class="line">  adjacencyOperators.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">operator, operatorIndex</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> inside = operatorIndex % <span class="number">2</span> <span class="comment">//=&gt; prepend, append</span></div><div class="line"></div><div class="line">    $.fn[operator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// arguments can be nodes, arrays of nodes, Zepto objects and HTML strings</span></div><div class="line">      <span class="keyword">var</span> argType, nodes = $.map(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">            argType = type(arg)</div><div class="line">            <span class="keyword">return</span> argType == <span class="string">"object"</span> || argType == <span class="string">"array"</span> || arg == <span class="literal">null</span> ?</div><div class="line">              arg : zepto.fragment(arg)</div><div class="line">          &#125;),</div><div class="line">          parent, copyByClone = <span class="keyword">this</span>.length &gt; <span class="number">1</span></div><div class="line">      <span class="keyword">if</span> (nodes.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, target</span>)</span>&#123;</div><div class="line">        parent = inside ? target : target.parentNode</div><div class="line"></div><div class="line">        <span class="comment">// convert all methods to a "before" operation</span></div><div class="line">        target = operatorIndex == <span class="number">0</span> ? target.nextSibling :</div><div class="line">                 operatorIndex == <span class="number">1</span> ? target.firstChild :</div><div class="line">                 operatorIndex == <span class="number">2</span> ? target :</div><div class="line">                 <span class="literal">null</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> parentInDocument = $.contains(<span class="built_in">document</span>.documentElement, parent)</div><div class="line"></div><div class="line">        nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span> (copyByClone) node = node.cloneNode(<span class="literal">true</span>)</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (!parent) <span class="keyword">return</span> $(node).remove()</div><div class="line"></div><div class="line">          parent.insertBefore(node, target)</div><div class="line">          <span class="keyword">if</span> (parentInDocument) traverseNode(node, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (el.nodeName != <span class="literal">null</span> &amp;&amp; el.nodeName.toUpperCase() === <span class="string">'SCRIPT'</span> &amp;&amp;</div><div class="line">               (!el.type || el.type === <span class="string">'text/javascript'</span>) &amp;&amp; !el.src)</div><div class="line">              <span class="built_in">window</span>[<span class="string">'eval'</span>].call(<span class="built_in">window</span>, el.innerHTML)</div><div class="line">          &#125;)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// after    =&gt; insertAfter</span></div><div class="line">    <span class="comment">// prepend  =&gt; prependTo</span></div><div class="line">    <span class="comment">// before   =&gt; insertBefore</span></div><div class="line">    <span class="comment">// append   =&gt; appendTo</span></div><div class="line">    $.fn[inside ? operator+<span class="string">'To'</span> : <span class="string">'insert'</span>+(operatorIndex ? <span class="string">'Before'</span> : <span class="string">'After'</span>)] = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">      $(html)[operator](<span class="keyword">this</span>)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  zepto.Z.prototype = $.fn</div><div class="line"></div><div class="line">  <span class="comment">// Export internal API functions in the `$.zepto` namespace</span></div><div class="line">  zepto.uniq = uniq</div><div class="line">  zepto.deserializeValue = deserializeValue</div><div class="line">  $.zepto = zepto</div><div class="line"></div><div class="line">  <span class="keyword">return</span> $</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你常用zepto，却没有试着深入zepto源码去看看它是如何实现的，你不好奇吗？跟随我，打开zepto的源码来分析一下，看看zepto是用何种方式做成了流行全世界的js库。&lt;/p&gt;
&lt;p&gt;本课程内容主要有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析zepto的设计思想，并思考如何才能实现这种设计；&lt;/li&gt;
&lt;li&gt;打开zepto源码，看它是如何实现的；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩展内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者标注的 zepto core模块的源码注视；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;至于为何要解读源码和设计？我想既然来看该教程的朋友，应该都知道它的意义，这里不再唠叨。总之，&lt;strong&gt;拜读经典框架的源码、学习设计思想，就等于站在巨人的肩膀上&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>eslint配置</title>
    <link href="http://yoursite.com/2016/10/08/%E5%B7%A5%E5%85%B7%E7%B1%BB/eslint%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/10/08/工具类/eslint配置/</id>
    <published>2016-10-08T07:02:02.000Z</published>
    <updated>2017-03-02T10:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>EsLint帮助我们检查Javascript编程时的语法错误。比如：在Javascript应用中，你很难找到你漏泄的变量或者方法。EsLint能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。<br>EsLint是建立在Esprima(ECMAScript解析架构)的基础上的。Esprima支持ES5.1,本身也是用ECMAScript编写的，用于多用途分析。EsLint不但提供一些默认的规则（可扩展），也提供用户自定义规则来约束我们写的Javascript代码。<br><a id="more"></a></p>
<p>我们在全局安装<code>npm install eslint -g</code></p>
<p>然后再初始化eslint<code>eslint --init</code></p>
<p>然后我们配置的时候<br>第一种初始化方式<br><img src="/images/eslint-1.png" alt="img"><br><img src="/images/eslint-1.png" alt="img"><br><img src="/images/eslint-1.png" alt="img"></p>
<p><img src="/images/eslint-4.png" alt="img"></p>
<p>第二种初始化方式<br><img src="/images/eslint-5.png" alt="img"></p>
<p>然后就可以了  重启我们的vscode就可以进行代码风格检查了</p>
<ul>
<li>文档 &lt;<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="external">http://eslint.cn/docs/user-guide/configuring</a><a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="external">http://eslint.cn/docs/user-guide/configuring</a>ESLint的2种配置:<strong>Configuration Comments</strong> - 使用 JavaScript 注释把配置信息直接嵌入到一个文件。<strong>Configuration Files</strong> - 使用 JavaScript、JSON 或者 YAML 文件为整个目录和它的子目录指定配置信息。可以用 .eslintrc.* 文件或者在 package.json 文件里的 eslintConfig 字段这两种方式进行配置，ESLint 会查找和自动读取它们，再者，你可以在命令行指定一个配置文件。</li>
</ul>
<blockquote>
<blockquote>
<p>有很多配置信息:</p>
<ul>
<li><strong>Environments</strong> -指定脚本的运行环境 每种环境都有一组特定的预定义全局变量</li>
<li><strong>Globals</strong> -脚本在执行期间访问的额外全局变量</li>
<li><strong>Rules</strong> -启用的规则及各自的错误级别</li>
</ul>
</blockquote>
</blockquote>
<h3 id="Configuring-Rules-配置规则"><a href="#Configuring-Rules-配置规则" class="headerlink" title="Configuring Rules 配置规则"></a>Configuring Rules 配置规则</h3><p>ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用哪些规则。改变一个规则设置，你必须设置规则 ID 等于这些值之一：</p>
<ul>
<li>“off”或0 -关闭规则</li>
<li>“warn” 或1 - 开启规则, 使用警告 程序不会退出</li>
<li>“error”或2 - 开启规则, 使用错误 程序退出</li>
</ul>
<p>为了在文件注释里配置规则，使用以下格式的注释：</p>
<p><code>/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</code><br>在这个例子里，eqeqeq 规则被关闭，curly 规则被打开，定义为错误级别。你也可以使用对应的数字定义规则严重程度：</p>
<p><code>/* eslint eqeqeq: 0, curly: 2 */</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;rules&quot;: &#123;</div><div class="line">    &quot;eqeqeq&quot;: &quot;off&quot;,</div><div class="line">    &quot;curly&quot;: &quot;error&quot;,</div><div class="line">    &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;],</div><div class="line">    &quot;plugin1/rule1&quot;: &quot;error&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="临时禁止规则出现警告"><a href="#临时禁止规则出现警告" class="headerlink" title="临时禁止规则出现警告"></a>临时禁止规则出现警告</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* eslint-disable */</span></div><div class="line">alert(<span class="string">'foo'</span>);</div><div class="line"><span class="comment">/* eslint-enable */</span></div></pre></td></tr></table></figure>
<h3 id="rule解释"><a href="#rule解释" class="headerlink" title="rule解释"></a>rule解释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></div><div class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></div><div class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></div><div class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></div><div class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></div><div class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></div><div class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></div><div class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></div><div class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></div><div class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></div><div class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></div><div class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></div><div class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></div><div class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></div><div class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></div><div class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></div><div class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></div><div class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></div><div class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></div><div class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></div><div class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></div><div class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></div><div class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></div><div class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></div><div class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></div><div class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></div><div class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></div><div class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></div><div class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></div><div class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></div><div class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></div><div class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></div><div class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></div><div class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></div><div class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></div><div class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></div><div class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></div><div class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></div><div class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></div><div class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></div><div class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></div><div class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></div><div class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></div><div class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></div><div class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></div><div class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></div><div class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></div><div class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></div><div class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></div><div class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">0</span>,<span class="comment">//不能用多余的空格</span></div><div class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></div><div class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">3</span>&#125;],<span class="comment">//空行最多不能超过2行</span></div><div class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></div><div class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></div><div class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></div><div class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></div><div class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></div><div class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></div><div class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></div><div class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></div><div class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></div><div class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></div><div class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></div><div class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></div><div class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></div><div class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></div><div class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></div><div class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></div><div class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></div><div class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></div><div class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></div><div class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></div><div class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></div><div class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></div><div class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></div><div class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></div><div class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></div><div class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></div><div class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></div><div class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></div><div class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></div><div class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></div><div class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></div><div class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></div><div class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></div><div class="line"><span class="string">"no-undef"</span>: <span class="number">2</span>,<span class="comment">//不能有未定义的变量</span></div><div class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></div><div class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></div><div class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></div><div class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></div><div class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></div><div class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></div><div class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></div><div class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></div><div class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></div><div class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></div><div class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></div><div class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></div><div class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></div><div class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></div><div class="line"></div><div class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></div><div class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></div><div class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></div><div class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></div><div class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></div><div class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></div><div class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></div><div class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></div><div class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></div><div class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></div><div class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></div><div class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></div><div class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></div><div class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></div><div class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></div><div class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></div><div class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></div><div class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></div><div class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></div><div class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></div><div class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></div><div class="line"><span class="string">"eqeqeq"</span>: <span class="number">0</span>,<span class="comment">//必须使用全等</span></div><div class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></div><div class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></div><div class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></div><div class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></div><div class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></div><div class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></div><div class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">2</span>],<span class="comment">//缩进风格</span></div><div class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></div><div class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></div><div class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></div><div class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></div><div class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></div><div class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></div><div class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></div><div class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></div><div class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></div><div class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></div><div class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></div><div class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></div><div class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></div><div class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></div><div class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></div><div class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></div><div class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></div><div class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></div><div class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></div><div class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></div><div class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></div><div class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></div><div class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></div><div class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></div><div class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></div><div class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></div><div class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></div><div class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></div><div class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></div><div class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></div><div class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></div><div class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></div><div class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></div><div class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></div><div class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></div><div class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></div><div class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></div><div class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></div><div class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></div><div class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></div><div class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></div><div class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></div><div class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></div><div class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></div></pre></td></tr></table></figure>
<p>vue 2.0 自定义规则如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">parser</span>: <span class="string">'babel-eslint'</span>,</div><div class="line">  <span class="attr">parserOptions</span>: &#123;</div><div class="line">    <span class="attr">sourceType</span>: <span class="string">'module'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// required to lint *.vue files</span></div><div class="line">  plugins: [</div><div class="line">    <span class="string">'html'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// add your custom rules here</span></div><div class="line">  <span class="string">'rules'</span>: &#123;</div><div class="line">    <span class="comment">// allow debugger during development</span></div><div class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</div><div class="line">    <span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></div><div class="line">    <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></div><div class="line">    <span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></div><div class="line">    <span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></div><div class="line">    <span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></div><div class="line">    <span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></div><div class="line">    <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></div><div class="line">    <span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></div><div class="line">    <span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></div><div class="line">    <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></div><div class="line">    <span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></div><div class="line">    <span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></div><div class="line">    <span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></div><div class="line">    <span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></div><div class="line">    <span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></div><div class="line">    <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></div><div class="line">    <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></div><div class="line">    <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></div><div class="line">    <span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></div><div class="line">    <span class="string">"no-empty"</span>: <span class="number">0</span>,<span class="comment">//块语句中的内容不能为空</span></div><div class="line">    <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></div><div class="line">    <span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></div><div class="line">    <span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></div><div class="line">    <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></div><div class="line">    <span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></div><div class="line">    <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></div><div class="line">    <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></div><div class="line">    <span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></div><div class="line">    <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></div><div class="line">    <span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></div><div class="line">    <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></div><div class="line">    <span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></div><div class="line">    <span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></div><div class="line">    <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></div><div class="line">    <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></div><div class="line">    <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></div><div class="line">    <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></div><div class="line">    <span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></div><div class="line">    <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></div><div class="line">    <span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></div><div class="line">    <span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></div><div class="line">    <span class="string">"no-labels"</span>: <span class="number">0</span>,<span class="comment">//禁止标签声明</span></div><div class="line">    <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></div><div class="line">    <span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></div><div class="line">    <span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></div><div class="line">    <span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></div><div class="line">    <span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></div><div class="line">    <span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></div><div class="line">    <span class="string">"no-multi-spaces"</span>: <span class="number">0</span>,<span class="comment">//不能用多余的空格</span></div><div class="line">    <span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></div><div class="line">    <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">3</span>&#125;],<span class="comment">//空行最多不能超过2行</span></div><div class="line">    <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></div><div class="line">    <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></div><div class="line">    <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></div><div class="line">    <span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></div><div class="line">    <span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></div><div class="line">    <span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></div><div class="line">    <span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></div><div class="line">    <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></div><div class="line">    <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></div><div class="line">    <span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></div><div class="line">    <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></div><div class="line">    <span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></div><div class="line">    <span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></div><div class="line">    <span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></div><div class="line">    <span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></div><div class="line">    <span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></div><div class="line">    <span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></div><div class="line">    <span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></div><div class="line">    <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></div><div class="line">    <span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></div><div class="line">    <span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></div><div class="line">    <span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></div><div class="line">    <span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></div><div class="line">    <span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></div><div class="line">    <span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></div><div class="line">    <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></div><div class="line">    <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></div><div class="line">    <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></div><div class="line">    <span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></div><div class="line">    <span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></div><div class="line">    <span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></div><div class="line">    <span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></div><div class="line">    <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></div><div class="line">    <span class="string">"no-undef"</span>: <span class="number">2</span>,<span class="comment">//不能有未定义的变量</span></div><div class="line">    <span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></div><div class="line">    <span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></div><div class="line">    <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></div><div class="line">    <span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></div><div class="line">    <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></div><div class="line">    <span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></div><div class="line">    <span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></div><div class="line">    <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></div><div class="line">    <span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></div><div class="line">    <span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></div><div class="line">    <span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></div><div class="line">    <span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></div><div class="line">    <span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></div><div class="line">    <span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></div><div class="line"></div><div class="line">    <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></div><div class="line">    <span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></div><div class="line">    <span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></div><div class="line">    <span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></div><div class="line">    <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></div><div class="line">    <span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></div><div class="line">    <span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></div><div class="line">    <span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></div><div class="line">    <span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></div><div class="line">    <span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></div><div class="line">    <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></div><div class="line">    <span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></div><div class="line">    <span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></div><div class="line">    <span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></div><div class="line">    <span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></div><div class="line">    <span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></div><div class="line">    <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></div><div class="line">    <span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></div><div class="line">    <span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></div><div class="line">    <span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></div><div class="line">    <span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></div><div class="line">    <span class="string">"eqeqeq"</span>: <span class="number">0</span>,<span class="comment">//必须使用全等</span></div><div class="line">    <span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></div><div class="line">    <span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></div><div class="line">    <span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></div><div class="line">    <span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></div><div class="line">    <span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></div><div class="line">    <span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></div><div class="line">    <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">2</span>],<span class="comment">//缩进风格</span></div><div class="line">    <span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></div><div class="line">    <span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></div><div class="line">    <span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></div><div class="line">    <span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></div><div class="line">    <span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></div><div class="line">    <span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></div><div class="line">    <span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></div><div class="line">    <span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></div><div class="line">    <span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></div><div class="line">    <span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></div><div class="line">    <span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></div><div class="line">    <span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></div><div class="line">    <span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></div><div class="line">    <span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></div><div class="line">    <span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></div><div class="line">    <span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></div><div class="line">    <span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></div><div class="line">    <span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></div><div class="line">    <span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></div><div class="line">    <span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></div><div class="line">    <span class="string">"quotes"</span>: [<span class="number">0</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></div><div class="line">    <span class="string">"quote-props"</span>:[<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></div><div class="line">    <span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></div><div class="line">    <span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></div><div class="line">    <span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></div><div class="line">    <span class="string">"semi"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></div><div class="line">    <span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">false</span>&#125;],<span class="comment">//分号前后空格</span></div><div class="line">    <span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></div><div class="line">    <span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></div><div class="line">    <span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></div><div class="line">    <span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></div><div class="line">    <span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></div><div class="line">    <span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></div><div class="line">    <span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></div><div class="line">    <span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></div><div class="line">    <span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></div><div class="line">    <span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></div><div class="line">    <span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></div><div class="line">    <span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></div><div class="line">    <span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></div><div class="line">    <span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></div><div class="line">    <span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></div><div class="line">    <span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EsLint帮助我们检查Javascript编程时的语法错误。比如：在Javascript应用中，你很难找到你漏泄的变量或者方法。EsLint能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。&lt;br&gt;EsLint是建立在Esprima(ECMAScript解析架构)的基础上的。Esprima支持ES5.1,本身也是用ECMAScript编写的，用于多用途分析。EsLint不但提供一些默认的规则（可扩展），也提供用户自定义规则来约束我们写的Javascript代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="主要讲解eslint配置方法" scheme="http://yoursite.com/tags/%E4%B8%BB%E8%A6%81%E8%AE%B2%E8%A7%A3eslint%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>揭秘命名函数表达式</title>
    <link href="http://yoursite.com/2016/09/17/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/48%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/17/JavaScript/深入理解javascript/48对象创建模式（下篇）/</id>
    <published>2016-09-17T15:02:02.000Z</published>
    <updated>2017-03-02T14:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要是介绍创建对象方面的模式的下篇，利用各种技巧可以极大地避免了错误或者可以编写出非常精简的代码。<br><a id="more"></a></p>
<h2 id="模式-6：函数语法糖"><a href="#模式-6：函数语法糖" class="headerlink" title="模式 6：函数语法糖"></a>模式 6：函数语法糖</h2><p>函数语法糖是为一个对象快速添加方法（函数）的扩展，这个主要是利用 prototype 的特性，代码比较简单，我们先来看一下实现代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (typeof Function.prototype.method !== &quot;function&quot;) &#123;</div><div class="line">    Function.prototype.method = function (name, implementation) &#123;</div><div class="line">        this.prototype[name] = implementation;</div><div class="line">        return this;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩展对象的时候，可以这么用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var Person = function (name) &#123;</div><div class="line">    this.name = name;</div><div class="line">&#125;</div><div class="line">.method(&apos;getName&apos;,</div><div class="line">            function () &#123;</div><div class="line">                return this.name;</div><div class="line">            &#125;)</div><div class="line">.method(&apos;setName&apos;, function (name) &#123;</div><div class="line">    this.name = name;</div><div class="line">    return this;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样就给 Person 函数添加了 getName 和 setName 这 2 个方法，接下来我们来验证一下结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = new Person(&apos;Adam&apos;);</div><div class="line">console.log(a.getName()); // &apos;Adam&apos;</div><div class="line">console.log(a.setName(&apos;Eve&apos;).getName()); // &apos;Eve&apos;</div></pre></td></tr></table></figure>
<h2 id="模式-7：对象常量"><a href="#模式-7：对象常量" class="headerlink" title="模式 7：对象常量"></a>模式 7：对象常量</h2><p>对象常量是在一个对象提供 set，get，ifDefined 各种方法的体现，而且对于 set 的方法只会保留最先设置的对象，后期再设置都是无效的，已达到别人无法重载的目的。实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var constant = (function () &#123;</div><div class="line">    var constants = &#123;&#125;,</div><div class="line">        ownProp = Object.prototype.hasOwnProperty,</div><div class="line">    // 只允许设置这三种类型的值</div><div class="line">        allowed = &#123;</div><div class="line">            string: 1,</div><div class="line">            number: 1,</div><div class="line">            boolean: 1</div><div class="line">        &#125;,</div><div class="line">        prefix = (Math.random() + &quot;_&quot;).slice(2);  </div><div class="line">    return &#123;</div><div class="line">        // 设置名称为name的属性</div><div class="line">        set: function (name, value) &#123;</div><div class="line">            if (this.isDefined(name)) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            if (!ownProp.call(allowed, typeof value)) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            constants[prefix + name] = value;</div><div class="line">            return true;</div><div class="line">        &#125;,</div><div class="line">        // 判断是否存在名称为name的属性</div><div class="line">        isDefined: function (name) &#123;</div><div class="line">            return ownProp.call(constants, prefix + name);</div><div class="line">        &#125;,</div><div class="line">        // 获取名称为name的属性</div><div class="line">        get: function (name) &#123;</div><div class="line">            if (this.isDefined(name)) &#123;</div><div class="line">                return constants[prefix + name];</div><div class="line">            &#125;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125; ());</div></pre></td></tr></table></figure>
<p>验证代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 检查是否存在</div><div class="line">console.log(constant.isDefined(&quot;maxwidth&quot;)); // false  </div><div class="line">// 定义</div><div class="line">console.log(constant.set(&quot;maxwidth&quot;, 480)); // true  </div><div class="line">// 重新检测</div><div class="line">console.log(constant.isDefined(&quot;maxwidth&quot;)); // true  </div><div class="line">// 尝试重新定义</div><div class="line">console.log(constant.set(&quot;maxwidth&quot;, 320)); // false  </div><div class="line">// 判断原先的定义是否还存在</div><div class="line">console.log(constant.get(&quot;maxwidth&quot;)); // 480</div></pre></td></tr></table></figure>
<h2 id="模式-8：沙盒模式"><a href="#模式-8：沙盒模式" class="headerlink" title="模式 8：沙盒模式"></a>模式 8：沙盒模式</h2><p>沙盒（Sandbox）模式即时为一个或多个模块提供单独的上下文环境，而不会影响其他模块的上下文环境，比如有个 Sandbox 里有 3 个方法event，dom，ajax，在调用其中 2 个组成一个环境的话，和调用三个组成的环境完全没有干扰。Sandbox 实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">function Sandbox() &#123;</div><div class="line">    // 将参数转为数组</div><div class="line">    var args = Array.prototype.slice.call(arguments),</div><div class="line">    // 最后一个参数为callback</div><div class="line">        callback = args.pop(),</div><div class="line">        // 除最后一个参数外，其它均为要选择的模块</div><div class="line">        modules = (args[0] &amp;&amp; typeof args[0] === &quot;string&quot;) ? args : args[0],</div><div class="line">        i;  </div><div class="line">    // 强制使用new操作符</div><div class="line">    if (!(this instanceof Sandbox)) &#123;</div><div class="line">        return new Sandbox(modules, callback);</div><div class="line">    &#125;  </div><div class="line">    // 添加属性</div><div class="line">    this.a = 1;</div><div class="line">    this.b = 2;  </div><div class="line">    // 向this对象上需想添加模块</div><div class="line">    // 如果没有模块或传入的参数为 &quot;*&quot; ，则以为着传入所有模块</div><div class="line">    if (!modules || modules == &apos;*&apos;) &#123;</div><div class="line">        modules = [];</div><div class="line">        for (i in Sandbox.modules) &#123;</div><div class="line">            if (Sandbox.modules.hasOwnProperty(i)) &#123;</div><div class="line">                modules.push(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    // 初始化需要的模块</div><div class="line">    for (i = 0; i &lt; modules.length; i += 1) &#123;</div><div class="line">        Sandbox.modules[modules[i]](this);</div><div class="line">    &#125;</div><div class="line">    // 调用 callback</div><div class="line">    callback(this);</div><div class="line">&#125;  </div><div class="line">// 默认添加原型对象</div><div class="line">Sandbox.prototype = &#123;</div><div class="line">    name: &quot;My Application&quot;,</div><div class="line">    version: &quot;1.0&quot;,</div><div class="line">    getName: function () &#123;</div><div class="line">        return this.name;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后我们再定义默认的初始模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Sandbox.modules = &#123;&#125;;  </div><div class="line">Sandbox.modules.dom = function (box) &#123;</div><div class="line">    box.getElement = function () &#123;</div><div class="line">    &#125;;</div><div class="line">    box.getStyle = function () &#123;</div><div class="line">    &#125;;</div><div class="line">    box.foo = &quot;bar&quot;;</div><div class="line">&#125;;  </div><div class="line">Sandbox.modules.event = function (box) &#123;</div><div class="line">    // access to the Sandbox prototype if needed:</div><div class="line">    // box.constructor.prototype.m = &quot;mmm&quot;;</div><div class="line">    box.attachEvent = function () &#123;</div><div class="line">    &#125;;</div><div class="line">    box.detachEvent = function () &#123;</div><div class="line">    &#125;;</div><div class="line">&#125;;  </div><div class="line">Sandbox.modules.ajax = function (box) &#123;</div><div class="line">    box.makeRequest = function () &#123;</div><div class="line">    &#125;;</div><div class="line">    box.getResponse = function () &#123;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 调用方式</div><div class="line">Sandbox([&apos;ajax&apos;, &apos;event&apos;], function (box) &#123;</div><div class="line">    console.log(typeof (box.foo));</div><div class="line">    // 没有选择dom，所以box.foo不存在</div><div class="line">&#125;);  </div><div class="line">Sandbox(&apos;ajax&apos;, &apos;dom&apos;, function (box) &#123;</div><div class="line">    console.log(typeof (box.attachEvent));</div><div class="line">    // 没有选择event,所以event里定义的attachEvent也不存在</div><div class="line">&#125;);  </div><div class="line">Sandbox(&apos;*&apos;, function (box) &#123;</div><div class="line">    console.log(box); // 上面定义的所有方法都可访问</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过三个不同的调用方式，我们可以看到，三种方式的上下文环境都是不同的，第一种里没有 foo；而第二种则没有 attachEvent，因为只加载了 ajax 和 dom，而没有加载 event；第三种则加载了全部。</p>
<h2 id="模式-9：静态成员"><a href="#模式-9：静态成员" class="headerlink" title="模式 9：静态成员"></a>模式 9：静态成员</h2><p>静态成员（Static Members）只是一个函数或对象提供的静态属性，可分为私有的和公有的，就像 C#或 Java 里的 public static 和 private static 一样。</p>
<p>我们先来看一下公有成员，公有成员非常简单，我们平时声明的方法，函数都是公有的，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 构造函数</div><div class="line">var Gadget = function () &#123;</div><div class="line">&#125;;  </div><div class="line">// 公有静态方法</div><div class="line">Gadget.isShiny = function () &#123;</div><div class="line">    return &quot;you bet&quot;;</div><div class="line">&#125;;  </div><div class="line">// 原型上添加的正常方法</div><div class="line">Gadget.prototype.setPrice = function (price) &#123;</div><div class="line">    this.price = price;</div><div class="line">&#125;;  </div><div class="line">// 调用静态方法</div><div class="line">console.log(Gadget.isShiny()); // &quot;you bet&quot;  </div><div class="line">// 创建实例，然后调用方法</div><div class="line">var iphone = new Gadget();</div><div class="line">iphone.setPrice(500);  </div><div class="line">console.log(typeof Gadget.setPrice); // &quot;undefined&quot;</div><div class="line">console.log(typeof iphone.isShiny); // &quot;undefined&quot;</div><div class="line">Gadget.prototype.isShiny = Gadget.isShiny;</div><div class="line">console.log(iphone.isShiny()); // &quot;you bet&quot;</div></pre></td></tr></table></figure>
<p>而私有静态成员，我们可以利用其闭包特性去实现，以下是两种实现方式。</p>
<h3 id="第一种实现方式："><a href="#第一种实现方式：" class="headerlink" title="第一种实现方式："></a>第一种实现方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var Gadget = (function () &#123;</div><div class="line">    // 静态变量/属性</div><div class="line">    var counter = 0;  </div><div class="line">    // 闭包返回构造函数的新实现</div><div class="line">    return function () &#123;</div><div class="line">        console.log(counter += 1);</div><div class="line">    &#125;;</div><div class="line">&#125; ()); // 立即执行  </div><div class="line">var g1 = new Gadget(); // logs 1</div><div class="line">var g2 = new Gadget(); // logs 2</div><div class="line">var g3 = new Gadget(); // logs 3</div></pre></td></tr></table></figure>
<p>可以看出，虽然每次都是 new 的对象，但数字依然是递增的，达到了静态成员的目的。</p>
<h3 id="第二种方式："><a href="#第二种方式：" class="headerlink" title="第二种方式："></a>第二种方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var Gadget = (function () &#123;</div><div class="line">    // 静态变量/属性</div><div class="line">    var counter = 0,</div><div class="line">        NewGadget;  </div><div class="line">    //新构造函数实现</div><div class="line">    NewGadget = function () &#123;</div><div class="line">        counter += 1;</div><div class="line">   &#125;;  </div><div class="line">    // 授权可以访问的方法</div><div class="line">    NewGadget.prototype.getLastId = function () &#123;</div><div class="line">        return counter;</div><div class="line">    &#125;;  </div><div class="line">    // 覆盖构造函数</div><div class="line">    return NewGadget;</div><div class="line">&#125; ()); // 立即执行  </div><div class="line">var iphone = new Gadget();</div><div class="line">iphone.getLastId(); // 1</div><div class="line">var ipod = new Gadget();</div><div class="line">ipod.getLastId(); // 2</div><div class="line">var ipad = new Gadget();</div><div class="line">ipad.getLastId(); // 3</div></pre></td></tr></table></figure>
<p>数字也是递增了，这是利用其内部授权方法的闭包特性实现的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是对象创建模式的下篇，两篇一起总共9种模式，是我们在日常 JavaScript 编程中经常使用的对象创建模式，不同的场景起到了不同的作用，希望大家根据各自的需求选择适用的模式。</p>
<h2 id="同步与推荐"><a href="#同步与推荐" class="headerlink" title="同步与推荐"></a>同步与推荐</h2><p>深入理解 JavaScript 系列文章，包括了原创，翻译，转载等各类型的文章，如果对你有用，请推荐支持一把，给大叔写作的动力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要是介绍创建对象方面的模式的下篇，利用各种技巧可以极大地避免了错误或者可以编写出非常精简的代码。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>对象创建模式（上篇）</title>
    <link href="http://yoursite.com/2016/09/11/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/47%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/11/JavaScript/深入理解javascript/47对象创建模式（上篇）/</id>
    <published>2016-09-11T03:02:02.000Z</published>
    <updated>2017-03-02T14:11:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要是介绍创建对象方面的模式，利用各种技巧可以极大地避免了错误或者可以编写出非常精简的代码。<br><a id="more"></a></p>
<h2 id="模式-1：命名空间（namespace）"><a href="#模式-1：命名空间（namespace）" class="headerlink" title="模式 1：命名空间（namespace）"></a>模式 1：命名空间（namespace）</h2><p>命名空间可以减少全局命名所需的数量，避免命名冲突或过度。一般我们在进行对象层级定义的时候，经常是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var app = app || &#123;&#125;;</div><div class="line">app.moduleA = app.moduleA || &#123;&#125;;</div><div class="line">app.moduleA.subModule = app.moduleA.subModule || &#123;&#125;;</div><div class="line">app.moduleA.subModule.MethodA = function () &#123;</div><div class="line">    console.log(&quot;print A&quot;);</div><div class="line">&#125;;</div><div class="line">app.moduleA.subModule.MethodB = function () &#123;</div><div class="line">    console.log(&quot;print B&quot;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果层级很多的话，那就要一直这样继续下去，很是混乱。namespace 模式就是为了解决这个问题而存在的，我们看代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 不安全，可能会覆盖已有的MYAPP对象</div><div class="line">var MYAPP = &#123;&#125;;</div><div class="line">// 还好</div><div class="line">if (typeof MYAPP === &quot;undefined&quot;) &#123;</div><div class="line">    var MYAPP = &#123;&#125;;</div><div class="line">&#125;</div><div class="line">// 更简洁的方式</div><div class="line">var MYAPP = MYAPP || &#123;&#125;;  </div><div class="line">//定义通用方法</div><div class="line">MYAPP.namespace = function (ns_string) &#123;</div><div class="line">    var parts = ns_string.split(&apos;.&apos;),</div><div class="line">        parent = MYAPP,</div><div class="line">        i;  </div><div class="line">    // 默认如果第一个节点是MYAPP的话，就忽略掉，比如MYAPP.ModuleA</div><div class="line">    if (parts[0] === &quot;MYAPP&quot;) &#123;</div><div class="line">        parts = parts.slice(1);</div><div class="line">    &#125;  </div><div class="line">    for (i = 0; i &lt; parts.length; i += 1) &#123;</div><div class="line">        // 如果属性不存在，就创建</div><div class="line">        if (typeof parent[parts[i]] === &quot;undefined&quot;) &#123;</div><div class="line">            parent[parts[i]] = &#123;&#125;;</div><div class="line">        &#125;</div><div class="line">        parent = parent[parts[i]];</div><div class="line">    &#125;</div><div class="line">    return parent;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用代码，非常简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 通过namespace以后，可以将返回值赋给一个局部变量</div><div class="line">var module2 = MYAPP.namespace(&apos;MYAPP.modules.module2&apos;);</div><div class="line">console.log(module2 === MYAPP.modules.module2); // true  </div><div class="line">// 跳过MYAPP</div><div class="line">MYAPP.namespace(&apos;modules.module51&apos;);  </div><div class="line">// 非常长的名字</div><div class="line">MYAPP.namespace(&apos;once.upon.a.time.there.was.this.long.nested.property&apos;);</div></pre></td></tr></table></figure>
<h2 id="模式-2：定义依赖"><a href="#模式-2：定义依赖" class="headerlink" title="模式 2：定义依赖"></a>模式 2：定义依赖</h2><p>有时候你的一个模块或者函数可能要引用第三方的一些模块或者工具，这时候最好将这些依赖模块在刚开始的时候就定义好，以便以后可以很方便地替换掉。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var myFunction = function () &#123;</div><div class="line">    // 依赖模块</div><div class="line">    var event = YAHOO.util.Event,</div><div class="line">        dom = YAHOO.util.dom;  </div><div class="line">    // 其它函数后面的代码里使用局部变量event和dom</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="模式-3：私有属性和私有方法"><a href="#模式-3：私有属性和私有方法" class="headerlink" title="模式 3：私有属性和私有方法"></a>模式 3：私有属性和私有方法</h2><p>JavaScript 本书不提供特定的语法来支持私有属性和私有方法，但是我们可以通过闭包来实现，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function Gadget() &#123;</div><div class="line">    // 私有对象</div><div class="line">    var name = &apos;iPod&apos;;</div><div class="line">    // 公有函数</div><div class="line">    this.getName = function () &#123;</div><div class="line">        return name;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">var toy = new Gadget();  </div><div class="line">// name未定义，是私有的</div><div class="line">console.log(toy.name); // undefined  </div><div class="line">// 公有方法访问name</div><div class="line">console.log(toy.getName()); // &quot;iPod&quot;  </div><div class="line">var myobj; // 通过自执行函数给myobj赋值</div><div class="line">(function () &#123;</div><div class="line">    // 自由对象</div><div class="line">    var name = &quot;my, oh my&quot;;  </div><div class="line">    // 实现了公有部分，所以没有var</div><div class="line">    myobj = &#123;</div><div class="line">        // 授权方法</div><div class="line">        getName: function () &#123;</div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125; ());</div></pre></td></tr></table></figure>
<h2 id="模式-4：Revelation模式"><a href="#模式-4：Revelation模式" class="headerlink" title="模式 4：Revelation模式"></a>模式 4：Revelation模式</h2><p>也是关于隐藏私有方法的模式，和<a href="http://www.cnblogs.com/TomXu/archive/2011/12/30/2288372.html" target="_blank" rel="external">《深入理解JavaScript系列（3）：全面解析Module模式》</a>里的 Module 模式有点类似，但是不是 return 的方式，而是在外部先声明一个变量，然后在内部给变量赋值公有方法。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">var myarray;</div><div class="line">(function () &#123;</div><div class="line">    var astr = &quot;[object Array]&quot;,</div><div class="line">        toString = Object.prototype.toString;  </div><div class="line">    function isArray(a) &#123;</div><div class="line">        return toString.call(a) === astr;</div><div class="line">    &#125;  </div><div class="line">    function indexOf(haystack, needle) &#123;</div><div class="line">        var i = 0,</div><div class="line">            max = haystack.length;</div><div class="line">        for (; i &lt; max; i += 1) &#123;</div><div class="line">            if (haystack[i] === needle) &#123;</div><div class="line">                return i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return -1;</div><div class="line">    &#125;  </div><div class="line">    //通过赋值的方式，将上面所有的细节都隐藏了</div><div class="line">    myarray = &#123;</div><div class="line">        isArray: isArray,</div><div class="line">        indexOf: indexOf,</div><div class="line">        inArray: indexOf</div><div class="line">    &#125;;</div><div class="line">&#125; ());  </div><div class="line">//测试代码</div><div class="line">console.log(myarray.isArray([1, 2])); // true</div><div class="line">console.log(myarray.isArray(&#123; 0: 1 &#125;)); // false</div><div class="line">console.log(myarray.indexOf([&quot;a&quot;, &quot;b&quot;, &quot;z&quot;], &quot;z&quot;)); // 2</div><div class="line">console.log(myarray.inArray([&quot;a&quot;, &quot;b&quot;, &quot;z&quot;], &quot;z&quot;)); // 2  </div><div class="line">myarray.indexOf = null;</div><div class="line">console.log(myarray.inArray([&quot;a&quot;, &quot;b&quot;, &quot;z&quot;], &quot;z&quot;)); // 2</div></pre></td></tr></table></figure>
<h2 id="模式-5：链模式"><a href="#模式-5：链模式" class="headerlink" title="模式 5：链模式"></a>模式 5：链模式</h2><p>链模式可以你连续可以调用一个对象的方法，比如 obj.add(1).remove(2).delete(4).add(2)这样的形式，其实现思路非常简单，就是将 this 原样返回。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    value: 1,</div><div class="line">    increment: function () &#123;</div><div class="line">        this.value += 1;</div><div class="line">        return this;</div><div class="line">    &#125;,</div><div class="line">    add: function (v) &#123;</div><div class="line">        this.value += v;</div><div class="line">        return this;</div><div class="line">    &#125;,</div><div class="line">    shout: function () &#123;</div><div class="line">        console.log(this.value);</div><div class="line">    &#125;</div><div class="line">&#125;;  </div><div class="line">// 链方法调用</div><div class="line">obj.increment().add(3).shout(); // 5  </div><div class="line">// 也可以单独一个一个调用</div><div class="line">obj.increment();</div><div class="line">obj.add(3);</div><div class="line">obj.shout();</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇是对象创建模式的上篇，敬请期待明天的下篇。</p>
<h2 id="同步与推荐"><a href="#同步与推荐" class="headerlink" title="同步与推荐"></a>同步与推荐</h2><p>深入理解 JavaScript 系列文章，包括了原创，翻译，转载等各类型的文章，如果对你有用，请推荐支持一把，给大叔写作的动力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要是介绍创建对象方面的模式，利用各种技巧可以极大地避免了错误或者可以编写出非常精简的代码。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Function 模式（下篇）</title>
    <link href="http://yoursite.com/2016/08/26/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/50Function%20%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/08/26/JavaScript/深入理解javascript/50Function 模式（下篇）/</id>
    <published>2016-08-26T08:56:02.000Z</published>
    <updated>2017-03-02T14:12:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇我们介绍的一些模式称为初始化模式和性能模式，主要是用在初始化以及提高性能方面，一些模式之前已经提到过，这里只是做一下总结。</p>
<h2 id="立即执行的函数"><a href="#立即执行的函数" class="headerlink" title="立即执行的函数"></a>立即执行的函数</h2><p>在本系列第 4 篇的<a href="http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html" target="_blank" rel="external">《立即调用的函数表达式》中</a>，我们已经对类似的函数进行过详细的描述，这里我们只是再举两个简单的例子做一下总结。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 声明完函数以后，立即执行该函数</div><div class="line">(function () &#123;</div><div class="line">    console.log(&apos;watch out!&apos;);</div><div class="line">&#125; ());  </div><div class="line">//这种方式声明的函数，也可以立即执行</div><div class="line">!function () &#123;</div><div class="line">    console.log(&apos;watch out!&apos;);</div><div class="line">&#125; ();  </div><div class="line">// 如下方式也都可以哦</div><div class="line">~function () &#123; /* code */ &#125; ();</div><div class="line">-function () &#123; /* code */ &#125; ();</div><div class="line">+function () &#123; /* code */ &#125; ();</div></pre></td></tr></table></figure></p>
<h2 id="立即执行的对象初始化"><a href="#立即执行的对象初始化" class="headerlink" title="立即执行的对象初始化"></a>立即执行的对象初始化</h2><p>该模式的意思是指在声明一个对象（而非函数）的时候，立即执行对象里的某一个方法来进行初始化工作，通常该模式可以用在一次性执行的代码上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(&#123;</div><div class="line">    // 这里你可以定义常量，设置其它值</div><div class="line">    maxwidth: 600,</div><div class="line">    maxheight: 400,  </div><div class="line">    //  当然也可以定义utility方法</div><div class="line">    gimmeMax: function () &#123;</div><div class="line">        return this.maxwidth + &quot;x&quot; + this.maxheight;</div><div class="line">    &#125;,  </div><div class="line">    // 初始化</div><div class="line">    init: function () &#123;</div><div class="line">        console.log(this.gimmeMax());</div><div class="line">        // 更多代码...</div><div class="line">    &#125;</div><div class="line">&#125;).init();  // 这样就开始初始化咯</div></pre></td></tr></table></figure>
<h2 id="分支初始化"><a href="#分支初始化" class="headerlink" title="分支初始化"></a>分支初始化</h2><p>分支初始化是指在初始化的时候，根据不同的条件（场景）初始化不同的代码，也就是所谓的条件语句赋值。之前我们在做事件处理的时候，通常使用类似下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var utils = &#123;</div><div class="line">    addListener: function (el, type, fn) &#123;</div><div class="line">        if (typeof window.addEventListener === &apos;function&apos;) &#123;</div><div class="line">            el.addEventListener(type, fn, false);</div><div class="line">        &#125; else if (typeof document.attachEvent !== &apos;undefined&apos;) &#123;</div><div class="line">            el.attachEvent(&apos;on&apos; + type, fn);</div><div class="line">        &#125; else &#123;</div><div class="line">            el[&apos;on&apos; + type] = fn;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    removeListener: function (el, type, fn) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们来改进一下，首先我们要定义两个接口，一个用来add事件句柄，一个用来 remove 事件句柄，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var utils = &#123;</div><div class="line">    addListener: null,</div><div class="line">    removeListener: null</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">if (typeof window.addEventListener === &apos;function&apos;) &#123;</div><div class="line">    utils.addListener = function (el, type, fn) &#123;</div><div class="line">        el.addEventListener(type, fn, false);</div><div class="line">    &#125;;</div><div class="line">&#125; else if (typeof document.attachEvent !== &apos;undefined&apos;) &#123; // IE</div><div class="line">    utils.addListener = function (el, type, fn) &#123;</div><div class="line">        el.attachEvent(&apos;on&apos; + type, fn);</div><div class="line">    &#125;;</div><div class="line">    utils.removeListener = function (el, type, fn) &#123;</div><div class="line">        el.detachEvent(&apos;on&apos; + type, fn);</div><div class="line">    &#125;;</div><div class="line">&#125; else &#123; // 其它旧浏览器</div><div class="line">    utils.addListener = function (el, type, fn) &#123;</div><div class="line">        el[&apos;on&apos; + type] = fn;</div><div class="line">    &#125;;</div><div class="line">    utils.removeListener = function (el, type, fn) &#123;</div><div class="line">        el[&apos;on&apos; + type] = null;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用起来，是不是就很方便了？代码也优雅多了。</p>
<h2 id="自声明函数"><a href="#自声明函数" class="headerlink" title="自声明函数"></a>自声明函数</h2><p>一般是在函数内部，重写同名函数代码，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var scareMe = function () &#123;</div><div class="line">    alert(&quot;Boo!&quot;);</div><div class="line">    scareMe = function () &#123;</div><div class="line">        alert(&quot;Double boo!&quot;);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这种代码，非常容易使人迷惑，我们先来看看例子的执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 1. 添加新属性</div><div class="line">scareMe.property = &quot;properly&quot;;</div><div class="line">// 2. scareMe赋与一个新值</div><div class="line">var prank = scareMe;</div><div class="line">// 3. 作为一个方法调用</div><div class="line">var spooky = &#123;</div><div class="line">    boo: scareMe</div><div class="line">&#125;;</div><div class="line">// 使用新变量名称进行调用</div><div class="line">prank(); // &quot;Boo!&quot;</div><div class="line">prank(); // &quot;Boo!&quot;</div><div class="line">console.log(prank.property); // &quot;properly&quot;</div><div class="line">// 使用方法进行调用</div><div class="line">spooky.boo(); // &quot;Boo!&quot;</div><div class="line">spooky.boo(); // &quot;Boo!&quot;</div><div class="line">console.log(spooky.boo.property); // &quot;properly&quot;</div></pre></td></tr></table></figure>
<p>通过执行结果，可以发现，将定于的函数赋值与新变量（或内部方法），代码并不执行重载的 scareMe 代码，而如下例子则正好相反：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 使用自声明函数</div><div class="line">scareMe(); // Double boo!</div><div class="line">scareMe(); // Double boo!</div><div class="line">console.log(scareMe.property); // undefined</div></pre></td></tr></table></figure>
<p>大家使用这种模式时，一定要非常小心才行，否则实际结果很可能和你期望的结果不一样，当然你也可以利用这个特殊做一些特殊的操作。</p>
<h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><p>该模式主要是利用函数的属性特性来避免大量的重复计算。通常代码形式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var myFunc = function (param) &#123;</div><div class="line">    if (!myFunc.cache[param]) &#123;</div><div class="line">        var result = &#123;&#125;;</div><div class="line">        // ... 复杂操作 ...</div><div class="line">        myFunc.cache[param] = result;</div><div class="line">    &#125;</div><div class="line">    return myFunc.cache[param];</div><div class="line">&#125;;</div><div class="line">// cache 存储</div><div class="line">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>但是上述代码有个问题，如果传入的参数是 toString 或者其它类似 Object 拥有的一些公用方法的话，就会出现问题，这时候就需要使用传说中的 hasOwnProperty 方法了，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var myFunc = function (param) &#123;</div><div class="line">    if (!myFunc.cache.hasOwnProperty(param)) &#123;</div><div class="line">        var result = &#123;&#125;;</div><div class="line">        // ... 复杂操作 ...</div><div class="line">        myFunc.cache[param] = result;</div><div class="line">    &#125;</div><div class="line">    return myFunc.cache[param];</div><div class="line">&#125;;  </div><div class="line">// cache 存储</div><div class="line">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>或者如果你传入的参数是多个的话，可以将这些参数通过 JSON 的 stringify 方法生产一个 cachekey 值进行存储，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var myFunc = function () &#123;</div><div class="line">    var cachekey = JSON.stringify(Array.prototype.slice.call(arguments)),</div><div class="line">        result;</div><div class="line">    if (!myFunc.cache[cachekey]) &#123;</div><div class="line">        result = &#123;&#125;;</div><div class="line">        // ... 复杂操作 ...</div><div class="line">        myFunc.cache[cachekey] = result;</div><div class="line">    &#125;</div><div class="line">    return myFunc.cache[cachekey];</div><div class="line">&#125;;  </div><div class="line">// cache 存储</div><div class="line">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>或者多个参数的话，也可以利用 arguments.callee 特性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var myFunc = function (param) &#123;</div><div class="line">    var f = arguments.callee,</div><div class="line">        result;</div><div class="line">    if (!f.cache[param]) &#123;</div><div class="line">        result = &#123;&#125;;</div><div class="line">        // ... 复杂操作 ...</div><div class="line">        f.cache[param] = result;</div><div class="line">    &#125;</div><div class="line">    return f.cache[param];</div><div class="line">&#125;;  </div><div class="line">// cache 存储</div><div class="line">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就不用总结了吧，大家仔细看代码就行咯</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇我们介绍的一些模式称为初始化模式和性能模式，主要是用在初始化以及提高性能方面，一些模式之前已经提到过，这里只是做一下总结。&lt;/p&gt;
&lt;h2 id=&quot;立即执行的函数&quot;&gt;&lt;a href=&quot;#立即执行的函数&quot; class=&quot;headerlink&quot; title=&quot;立即执行的函数&quot;&gt;&lt;/a&gt;立即执行的函数&lt;/h2&gt;&lt;p&gt;在本系列第 4 篇的&lt;a href=&quot;http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html&quot;&gt;《立即调用的函数表达式》中&lt;/a&gt;，我们已经对类似的函数进行过详细的描述，这里我们只是再举两个简单的例子做一下总结。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>S.O.L.I.D 五大原则之里氏替换原则 LSP</title>
    <link href="http://yoursite.com/2016/08/23/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/8S.O.L.I.D%20%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%88%99%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99%20LSP/"/>
    <id>http://yoursite.com/2016/08/23/JavaScript/深入理解javascript/8S.O.L.I.D 五大原则之里氏替换原则 LSP/</id>
    <published>2016-08-23T04:02:02.000Z</published>
    <updated>2017-03-02T14:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们要讲解的是 S.O.L.I.D 五大原则 JavaScript 语言实现的第3篇，里氏替换原则 LSP（The Liskov Substitution Principle ）。</p>
<p>开闭原则的描述是：</p>
<blockquote>
<p>Subtypes must be substitutable for their base types.<br>派生类型必须可以替换它的基类型。<br><a id="more"></a><br>在面向对象编程里，继承提供了一个机制让子类和共享基类的代码，这是通过在基类型里封装通用的数据和行为来实现的，然后已经及类型来声明更详细的子类型，为了应用里氏替换原则，继承子类型需要在语义上等价于基类型里的期望行为。</p>
</blockquote>
<p>为了来更好的理解，请参考如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">function Vehicle(my) &#123;</div><div class="line">    var my = my || &#123;&#125;;</div><div class="line">    my.speed = 0;</div><div class="line">    my.running = false;</div><div class="line">    this.speed = function() &#123;</div><div class="line">        return my.speed;</div><div class="line">    &#125;;</div><div class="line">    this.start = function() &#123;</div><div class="line">        my.running = true;</div><div class="line">    &#125;;</div><div class="line">    this.stop = function() &#123;</div><div class="line">        my.running = false;</div><div class="line">    &#125;;</div><div class="line">    this.accelerate = function() &#123;</div><div class="line">        my.speed++;</div><div class="line">    &#125;;</div><div class="line">    this.decelerate = function() &#123;</div><div class="line">        my.speed--;</div><div class="line">    &#125;, this.state = function() &#123;</div><div class="line">        if (!my.running) &#123;</div><div class="line">            return &quot;parked&quot;;</div><div class="line">        &#125;</div><div class="line">        else if (my.running &amp;&amp; my.speed) &#123;</div><div class="line">            return &quot;moving&quot;;</div><div class="line">        &#125;</div><div class="line">        else if (my.running) &#123;</div><div class="line">            return &quot;idle&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码我们定义了一个 Vehicle 函数，其构造函数为 vehicle 对象提供了一些基本的操作，我们来想想如果当前函数当前正运行在服务客户的产品环境上，如果现在需要添加一个新的构造函数来实现加快移动的 vehicle。思考以后，我们写出了如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function FastVehicle(my) &#123;</div><div class="line">    var my = my || &#123;&#125;;</div><div class="line">    var that = new Vehicle(my);</div><div class="line">    that.accelerate = function() &#123;</div><div class="line">        my.speed += 3;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在浏览器的控制台我们都测试了，所有的功能都是我们的预期，没有问题，FastVehicle 的速度增快了 3 倍，而且继承他的方法也是按照我们的预期工作。此后，我们开始部署这个新版本的类库到产品环境上，可是我们却接到了新的构造函数导致现有的代码不能支持执行了，下面的代码段揭示了这个问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var maneuver = function(vehicle) &#123;</div><div class="line">    write(vehicle.state());</div><div class="line">    vehicle.start();</div><div class="line">    write(vehicle.state());</div><div class="line">    vehicle.accelerate();</div><div class="line">    write(vehicle.state());</div><div class="line">    write(vehicle.speed());</div><div class="line">    vehicle.decelerate();</div><div class="line">    write(vehicle.speed());</div><div class="line">    if (vehicle.state() != &quot;idle&quot;) &#123;</div><div class="line">        throw &quot;The vehicle is still moving!&quot;;</div><div class="line">    &#125;</div><div class="line">    vehicle.stop();</div><div class="line">    write(vehicle.state());</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>根据上面的代码，我们看到抛出的异常是“The vehicle is still moving!”，这是因为写这段代码的作者一直认为加速（accelerate）和减速（decelerate）的数字是一样的。但 FastVehicle 的代码和 Vehicle 的代码并不是完全能够替换掉的。因此，FastVehicle 违反了里氏替换原则。</p>
<p>在这点上，你可能会想：“但，客户端不能老假定 vehicle 都是按照这样的规则来做”，里氏替换原则(LSP)的妨碍（译者注：就是妨碍实现 LSP 的代码）不是基于我们所想的继承子类应该在行为里确保更新代码，而是这样的更新是否能在当前的期望中得到实现。</p>
<p>上述代码这个 case，解决这个不兼容的问题需要在 vehicle 类库或者客户端调用代码上进行一点重新设计，或者两者都要改。</p>
<h2 id="减少-LSP-妨碍"><a href="#减少-LSP-妨碍" class="headerlink" title="减少 LSP 妨碍"></a>减少 LSP 妨碍</h2><p>那么，我们如何避免 LSP 妨碍？不幸的话，并不是一直都是可以做到的。我们这里有几个策略我们处理这个事情。</p>
<h3 id="契约（Contracts）"><a href="#契约（Contracts）" class="headerlink" title="契约（Contracts）"></a>契约（Contracts）</h3><p>处理 LSP 过分妨碍的一个策略是使用契约，契约清单有 2 种形式：执行说明书（executable specifications）和错误处理，在执行说明书里，一个详细类库的契约也包括一组自动化测试，而错误处理是在代码里直接处理的，例如在前置条件，后置条件，常量检查等，可以从 Bertrand Miller 的大作<a href="http://en.wikipedia.org/wiki/Design_by_contract" target="_blank" rel="external">《契约设计》</a>中查看这个技术。虽然自动化测试和契约设计不在本篇文字的范围内，但当我们用的时候我还是推荐如下内容：</p>
<ol>
<li>检查使用测试驱动开发（Test-Driven Development）来指导你代码的设计</li>
<li>设计可重用类库的时候可随意使用契约设计技术</li>
</ol>
<p>对于你自己要维护和实现的代码，使用契约设计趋向于添加很多不必要的代码，如果你要控制输入，添加测试是非常有必要的，如果你是类库作者，使用契约设计，你要注意不正确的使用方法以及让你的用户使之作为一个测试工具。</p>
<h3 id="避免继承"><a href="#避免继承" class="headerlink" title="避免继承"></a>避免继承</h3><p>避免 LSP 妨碍的另外一个测试是：如果可能的话，尽量不用继承，在Gamma的大作<a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612" target="_blank" rel="external">《Design Patterns – Elements of Reusable Object-Orineted Software》</a>中，我们可以看到如下建议：</p>
<blockquote>
<p>Favor object composition over class inheritance<br>尽量使用对象组合而不是类继承</p>
</blockquote>
<p>有些书里讨论了组合比继承好的唯一作用是静态类型，基于类的语言（例如，在运行时可以改变行为），与 JavaScript 相关的一个问题是耦合，当使用继承的时候，继承子类型和他们的基类型耦合在一起了，就是说基类型的改变会影响到继承子类型。组合倾向于对象更小化，更容易向静态和动态语言语言维护。</p>
<h2 id="与行为有关，而不是继承"><a href="#与行为有关，而不是继承" class="headerlink" title="与行为有关，而不是继承"></a>与行为有关，而不是继承</h2><p>到现在，我们讨论了和继承上下文在内的里氏替换原则，指示出 JavaScript 的面向对象实。不过，里氏替换原则（LSP）的本质不是真的和继承有关，而是行为兼容性。JavaScript 是一个动态语言，一个对象的契约行为不是对象的类型决定的，而是对象期望的功能决定的。里氏替换原则的初始构想是作为继承的一个原则指南，等价于对象设计中的隐式接口。</p>
<p>举例来说，让我们来看一下 Robert C. Martin的 大作<a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612" target="_blank" rel="external">《敏捷软件开发 原则、模式与实践》</a>中的一个矩形类型：</p>
<h3 id="矩形例子"><a href="#矩形例子" class="headerlink" title="矩形例子"></a>矩形例子</h3><p>考虑我们有一个程序用到下面这样的一个矩形对象:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var rectangle = &#123;</div><div class="line">    length: 0,</div><div class="line">    width: 0</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>过后，程序有需要一个正方形，由于正方形就是一个长(length)和宽(width)都一样的特殊矩形，所以我们觉得创建一个正方形代替矩形。我们添加了 length 和 width 属性来匹配矩形的声明，但我们觉得使用属性的g etters/setters 一般我们可以让 length 和 width 保存同步，确保声明的是一个正方形：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var square = &#123;&#125;;</div><div class="line">(function() &#123;</div><div class="line">    var length = 0, width = 0;</div><div class="line">    // 注意defineProperty方式是262-5版的新特性</div><div class="line">    Object.defineProperty(square, &quot;length&quot;, &#123;</div><div class="line">        get: function() &#123; return length; &#125;,</div><div class="line">        set: function(value) &#123; length = width = value; &#125;</div><div class="line">    &#125;);</div><div class="line">    Object.defineProperty(square, &quot;width&quot;, &#123;</div><div class="line">        get: function() &#123; return width; &#125;,</div><div class="line">        set: function(value) &#123; length = width = value; &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>不幸的是，当我们使用正方形代替矩形执行代码的时候发现了问题，其中一个计算矩形面积的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var g = function(rectangle) &#123;</div><div class="line">    rectangle.length = 3;</div><div class="line">    rectangle.width = 4;</div><div class="line">    write(rectangle.length);</div><div class="line">    write(rectangle.width);</div><div class="line">    write(rectangle.length * rectangle.width);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>该方法在调用的时候，结果是 16，而不是期望的 12，我们的正方形 square 对象违反了 LSP 原则，square 的长度和宽度属性暗示着并不是和矩形 100% 兼容，但我们并不总是这样明确的暗示。解决这个问题，我们可以重新设计一个 shape 对象来实现程序，依据多边形的概念，我们声明 rectangle 和square，relevant。不管怎么说，我们的目的是要说里氏替换原则并不只是继承，而是任何方法（其中的行为可以另外的行为）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>里氏替换原则（LSP）表达的意思不是继承的关系，而是任何方法（只要该方法的行为能体会另外的行为就行）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章我们要讲解的是 S.O.L.I.D 五大原则 JavaScript 语言实现的第3篇，里氏替换原则 LSP（The Liskov Substitution Principle ）。&lt;/p&gt;
&lt;p&gt;开闭原则的描述是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subtypes must be substitutable for their base types.&lt;br&gt;派生类型必须可以替换它的基类型。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Function 模式（上篇）</title>
    <link href="http://yoursite.com/2016/08/02/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/49Function%20%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/08/02/JavaScript/深入理解javascript/49Function 模式（上篇）/</id>
    <published>2016-08-02T09:02:02.000Z</published>
    <updated>2017-03-02T14:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要是介绍 Function 方面使用的一些技巧（上篇），利用 Function 特性可以编写出很多非常有意思的代码，本篇主要包括：回调模式、配置对象、返回函数、分布程序、柯里化（Currying）。<br><a id="more"></a></p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>在 JavaScript 中，当一个函数 A 作为另外一个函数 B 的其中一个参数时，则函数 A 称为回调函数，即 A 可以在函数 B 的周期内执行（开始、中间、结束时均可）。</p>
<p>举例来说，有一个函数用于生成 node</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var complexComputation = function () &#123; /* 内部处理，并返回一个node*/&#125;;</div><div class="line">有一个findNodes函数声明用于查找所有的节点，然后通过callback回调进行执行代码。  </div><div class="line">var findNodes = function (callback) &#123;</div><div class="line">var nodes = [];  </div><div class="line">var node = complexComputation();  </div><div class="line">// 如果回调函数可用，则执行它</div><div class="line">if (typeof callback === &quot;function&quot;) &#123;</div><div class="line">callback(node);</div><div class="line">&#125;  </div><div class="line">nodes.push(node);</div><div class="line">return nodes;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>关于 callback 的定义，我们可以事先定义好来用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 定义callback</div><div class="line">var hide = function (node) &#123;</div><div class="line">node.style.display = &quot;none&quot;;</div><div class="line">&#125;; </div><div class="line">// 查找node，然后隐藏所有的node</div><div class="line">var hiddenNodes = findNodes(hide);</div><div class="line">也可以直接在调用的时候使用匿名定义，如下：  </div><div class="line">// 使用匿名函数定义callback</div><div class="line">var blockNodes = findNodes(function (node) &#123;</div><div class="line">node.style.display = &apos;block&apos;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们平时用的最多的，估计就数 jQuery 的 ajax 方法的调用了，通过在 done/faild 上定义 callback，以便在 ajax 调用成功或者失败的时候做进一步处理，代码如下(本代码基于 jquery1.8 版)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var menuId = $(&quot;ul.nav&quot;).first().attr(&quot;id&quot;);</div><div class="line">var request = $.ajax(&#123;</div><div class="line">  url: &quot;script.php&quot;,</div><div class="line">  type: &quot;POST&quot;,</div><div class="line">  data: &#123;id : menuId&#125;,</div><div class="line">  dataType: &quot;html&quot;</div><div class="line">&#125;);  </div><div class="line">//调用成功时的回调处理</div><div class="line">request.done(function(msg) &#123;</div><div class="line">  $(&quot;#log&quot;).html( msg );</div><div class="line">&#125;);  </div><div class="line">//调用失败时的回调处理</div><div class="line">request.fail(function(jqXHR, textStatus) &#123;</div><div class="line">  alert( &quot;Request failed: &quot; + textStatus );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h2><p>如果一个函数（或方法）的参数只有一个参数，并且参数为对象字面量，我们则称这种模式为配置对象模式。例如，如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var conf = &#123;</div><div class="line">    username:&quot;shichuan&quot;,</div><div class="line">    first:&quot;Chuan&quot;,</div><div class="line">    last:&quot;Shi&quot;</div><div class="line">&#125;;</div><div class="line">addPerson(conf);</div></pre></td></tr></table></figure>
<p>则在 addPerson 内部，就可以随意使用 conf 的值了，一般用于初始化工作，例如 jquery 里的 ajaxSetup 也就是这种方式来实现的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 事先设置好初始值</div><div class="line">$.ajaxSetup(&#123;</div><div class="line">   url: &quot;/xmlhttp/&quot;,</div><div class="line">   global: false,</div><div class="line">   type: &quot;POST&quot;</div><div class="line"> &#125;);  </div><div class="line">// 然后再调用</div><div class="line"> $.ajax(&#123; data: myData &#125;);</div></pre></td></tr></table></figure>
<p>另外，很多 jquery 的插件也有这种形式的传参，只不过也可以不传，不传的时候则就使用默认值了。</p>
<h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><p>返回函数，则是指在一个函数的返回值为另外一个函数，或者根据特定的条件灵活创建的新函数，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var setup = function () &#123;</div><div class="line">    console.log(1);</div><div class="line">    return function () &#123;</div><div class="line">        console.log(2);</div><div class="line">    &#125;;</div><div class="line">&#125;;  </div><div class="line">// 调用setup 函数</div><div class="line">var my = setup(); // 输出 1</div><div class="line">my(); // 输出 2</div><div class="line">// 或者直接调用也可</div><div class="line">setup()();</div></pre></td></tr></table></figure>
<p>或者你可以利用闭包的特性，在 setup 函数里记录一个私有的计数器数字，通过每次调用来增加计数器，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var setup = function () &#123;</div><div class="line">    var count = 0;</div><div class="line">    return function () &#123;</div><div class="line">        return ++count;</div><div class="line">    &#125;;</div><div class="line">&#125;;   </div><div class="line">// 用法</div><div class="line">var next = setup();</div><div class="line">next(); // 返回 1</div><div class="line">next(); // 返回 2</div><div class="line">next(); // 返回 3</div></pre></td></tr></table></figure>
<h2 id="偏应用"><a href="#偏应用" class="headerlink" title="偏应用"></a>偏应用</h2><p>这里的偏应用，其实是将参数的传入工作分开进行，在有的时候一系列的操作可能会有某一个或几个参数始终完全一样，那么我们就可以先定义一个偏函数，然后再去执行这个函数（执行时传入剩余的不同参数）。</p>
<p>举个例子，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var partialAny = (function (aps) &#123;</div><div class="line">    // 该函数是你们自执行函数表达式的结果，并且赋值给了partialAny变量</div><div class="line">    function func(fn) &#123;</div><div class="line">        var argsOrig = aps.call(arguments, 1);</div><div class="line">        return function () &#123;</div><div class="line">            var args = [],</div><div class="line">                argsPartial = aps.call(arguments),</div><div class="line">                i = 0;  </div><div class="line">            // 变量所有的原始参数集，</div><div class="line">            // 如果参数是partialAny._ 占位符，则使用下一个函数参数对应的值</div><div class="line">            // 否则使用原始参数里的值</div><div class="line">            for (; i &lt; argsOrig.length; i++) &#123;</div><div class="line">                args[i] = argsOrig[i] === func._</div><div class="line">                            ? argsPartial.shift()</div><div class="line">                            : argsOrig[i];</div><div class="line">            &#125;  </div><div class="line">            // 如果有任何多余的参数，则添加到尾部</div><div class="line">            return fn.apply(this, args.concat(argsPartial));</div><div class="line">        &#125;;</div><div class="line">    &#125;  </div><div class="line">    // 用于占位符设置</div><div class="line">    func._ = &#123;&#125;;  </div><div class="line">    return func;</div><div class="line">&#125;)(Array.prototype.slice);</div></pre></td></tr></table></figure>
<p>使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 定义处理函数</div><div class="line">function hex(r, g, b) &#123;</div><div class="line">    return &apos;#&apos; + r + g + b;</div><div class="line">&#125;  </div><div class="line">//定义偏函数, 将hex的第一个参数r作为不变的参数值ff</div><div class="line">var redMax = partialAny(hex, &apos;ff&apos;, partialAny._, partialAny._);  </div><div class="line">// 新函数redMax的调用方式如下，只需要传入2个参数了：</div><div class="line">console.log(redMax(&apos;11&apos;, &apos;22&apos;)); // &quot;#ff1122&quot;</div></pre></td></tr></table></figure>
<p>如果觉得 partialAny._太长，可以用__代替哦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var __ = partialAny._;</div><div class="line">var greenMax = partialAny(hex, __, &apos;ff&apos;);</div><div class="line">console.log(greenMax(&apos;33&apos;, &apos;44&apos;));</div><div class="line">var blueMax = partialAny(hex, __, __, &apos;ff&apos;);</div><div class="line">console.log(blueMax(&apos;55&apos;, &apos;66&apos;));</div><div class="line">var magentaMax = partialAny(hex, &apos;ff&apos;, __, &apos;ff&apos;);</div><div class="line">console.log(magentaMax(&apos;77&apos;));</div></pre></td></tr></table></figure>
<p>这样使用，就简洁多了吧。</p>
<h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>Currying 是函数式编程的一个特性，将多个参数的处理转化成单个参数的处理，类似链式调用。</p>
<p>举一个简单的 add 函数的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function add(x, y) &#123;</div><div class="line">    var oldx = x, oldy = y;</div><div class="line">    if (typeof oldy === &quot;undefined&quot;) &#123; // partial</div><div class="line">        return function (newy) &#123;</div><div class="line">            return oldx + newy;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样调用方式就可以有多种了，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 测试</div><div class="line">typeof add(5); // &quot;function&quot;</div><div class="line">add(3)(4); // 7  </div><div class="line">// 也可以这样调用</div><div class="line">var add2000 = add(2000);</div><div class="line">add2000(10); // 2010</div></pre></td></tr></table></figure>
<p>接下来，我们来定义一个比较通用的 currying 函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 第一个参数为要应用的function，第二个参数是需要传入的最少参数个数</div><div class="line">function curry(func, minArgs) &#123;</div><div class="line">    if (minArgs == undefined) &#123;</div><div class="line">        minArgs = 1;</div><div class="line">    &#125;  </div><div class="line">    function funcWithArgsFrozen(frozenargs) &#123;</div><div class="line">        return function () &#123;</div><div class="line">            // 优化处理，如果调用时没有参数，返回该函数本身</div><div class="line">            var args = Array.prototype.slice.call(arguments);</div><div class="line">            var newArgs = frozenargs.concat(args);</div><div class="line">            if (newArgs.length &gt;= minArgs) &#123;</div><div class="line">                return func.apply(this, newArgs);</div><div class="line">            &#125; else &#123;</div><div class="line">                return funcWithArgsFrozen(newArgs);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;  </div><div class="line">    return funcWithArgsFrozen([]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就可以随意定义我们的业务行为了，比如定义加法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var plus = curry(function () &#123;</div><div class="line">    var result = 0;</div><div class="line">    for (var i = 0; i &lt; arguments.length; ++i) &#123;</div><div class="line">        result += arguments[i];</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;, 2);</div></pre></td></tr></table></figure>
<p>使用方式，真实多种多样哇。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plus(3, 2) // 正常调用</div><div class="line">plus(3) // 偏应用，返回一个函数（返回值为3+参数值）</div><div class="line">plus(3)(2) // 完整应用（返回5）</div><div class="line">plus()(3)()()(2) // 返回 5</div><div class="line">plus(3, 2, 4, 5) // 可以接收多个参数</div><div class="line">plus(3)(2, 3, 5) // 同理</div></pre></td></tr></table></figure>
<p>如下是减法的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var minus = curry(function (x) &#123;</div><div class="line">    var result = x;</div><div class="line">    for (var i = 1; i &lt; arguments.length; ++i) &#123;</div><div class="line">        result -= arguments[i];</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;, 2);</div></pre></td></tr></table></figure>
<p>或者如果你想交换参数的顺序，你可以这样定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var flip = curry(function (func) &#123;</div><div class="line">    return curry(function (a, b) &#123;</div><div class="line">        return func(b, a);</div><div class="line">    &#125;, 2);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaScript 里的 Function 有很多特殊的功效，可以利用闭包以及 arguments 参数特性实现很多不同的技巧，下一篇我们将继续介绍利用 Function 进行初始化的技巧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要是介绍 Function 方面使用的一些技巧（上篇），利用 Function 特性可以编写出很多非常有意思的代码，本篇主要包括：回调模式、配置对象、返回函数、分布程序、柯里化（Currying）。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>变量对象（Variable Object）</title>
    <link href="http://yoursite.com/2016/07/16/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/12%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1%EF%BC%88Variable%20Object%EF%BC%89/"/>
    <id>http://yoursite.com/2016/07/16/JavaScript/深入理解javascript/12变量对象（Variable Object）/</id>
    <published>2016-07-16T09:06:02.000Z</published>
    <updated>2017-03-02T14:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 编程的时候总避免不了声明函数和变量，以成功构建我们的系统，但是解释器是如何并且在什么地方去查找这些函数和变量呢？我们引用这些对象的时候究竟发生了什么？</p>
<p>大多数 ECMAScript 程序员应该都知道变量与执行上下文有密切关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 10; // 全局上下文中的变量</div><div class="line">(function () &#123;</div><div class="line">  var b = 20; // function上下文中的局部变量</div><div class="line">&#125;)();</div><div class="line">alert(a); // 10</div><div class="line">alert(b); // 全局变量 &quot;b&quot; 没有声明</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>并且，很多程序员也都知道，当前 ECMAScript 规范指出独立作用域只能通过“函数(function)”代码类型的执行上下文创建。也就是说，相对于 C/C++来说，ECMAScript 里的 for 循环并不能创建一个局部的上下文。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for (var k in &#123;a: 1, b: 2&#125;) &#123;</div><div class="line">  alert(k);</div><div class="line">&#125;</div><div class="line">alert(k); // 尽管循环已经结束但变量k依然在当前作用域</div></pre></td></tr></table></figure>
<p>我们来看看一下，我们声明数据的时候到底都发现了什么细节。</p>
<h2 id="数据声明"><a href="#数据声明" class="headerlink" title="数据声明"></a>数据声明</h2><p>如果变量与执行上下文相关，那变量自己应该知道它的数据存储在哪里，并且知道如何访问。这种机制称为变量对象(variable object)。</p>
<blockquote>
<p>变量对象(缩写为 VO)是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p>
</blockquote>
<ul>
<li>变量 (var, 变量声明)；</li>
<li>函数声明 (FunctionDeclaration, 缩写为 FD)；</li>
<li>函数的形参；</li>
</ul>
<p>举例来说，我们可以用普通的 ECMAScript 对象来表示一个变量对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VO = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>就像我们所说的，VO 就是执行上下文的属性(property)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">activeExecutionContext = &#123;</div><div class="line">  VO: &#123;</div><div class="line">    // 上下文数据（var, FD, function arguments)</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>只有全局上下文的变量对象允许通过 VO 的属性名称来间接访问(因为在全局上下文里，全局对象自身就是变量对象，稍后会详细介绍)，在其它上下文中是不能直接访问 VO 对象的，因为它只是内部机制的一个实现。</p>
<p>当我们声明一个变量或一个函数的时候，和我们创建 VO 新属性的时候一样没有别的区别（即：有名称以及对应的值）。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">function test(x) &#123;</div><div class="line">  var b = 20;</div><div class="line">&#125;;</div><div class="line">test(30);</div></pre></td></tr></table></figure>
<p>对应的变量对象是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 全局上下文的变量对象</div><div class="line">VO(globalContext) = &#123;</div><div class="line">  a: 10,</div><div class="line">  test: &lt;reference to function&gt;</div><div class="line">&#125;;</div><div class="line">// test函数上下文的变量对象</div><div class="line">VO(test functionContext) = &#123;</div><div class="line">  x: 30,</div><div class="line">  b: 20</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在具体实现层面(以及规范中)变量对象只是一个抽象概念。(从本质上说，在具体执行上下文中，VO 名称是不一样的，并且初始结构也不一样。</p>
<h2 id="不同执行上下文中的变量对象"><a href="#不同执行上下文中的变量对象" class="headerlink" title="不同执行上下文中的变量对象"></a>不同执行上下文中的变量对象</h2><p>对于所有类型的执行上下文来说，变量对象的一些操作(如变量初始化)和行为都是共通的。从这个角度来看，把变量对象作为抽象的基本事物来理解更为容易。同样在函数上下文中也定义和变量对象相关的额外内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">抽象变量对象VO (变量初始化过程的一般行为)</div><div class="line">  ║</div><div class="line">  ╠══&gt; 全局上下文变量对象GlobalContextVO</div><div class="line">  ║        (VO === this === global)</div><div class="line">  ║</div><div class="line">  ╚══&gt; 函数上下文变量对象FunctionContextVO</div><div class="line">           (VO === AO, 并且添加了&lt;arguments&gt;和&lt;formal parameters&gt;)</div></pre></td></tr></table></figure>
<p>我们来详细看一下：</p>
<h2 id="全局上下文中的变量对象"><a href="#全局上下文中的变量对象" class="headerlink" title="全局上下文中的变量对象"></a>全局上下文中的变量对象</h2><p>首先，我们要给全局对象一个明确的定义：</p>
<ul>
<li>全局对象(Global object) 是在进入任何执行上下文之前就已经创建了的对象；</li>
<li>这个对象只存在一份，它的属性在程序中任何地方都可以访问，全局对象的生命周期终止于程序退出那一刻。</li>
</ul>
<p>全局对象初始创建阶段将 Math、String、Date、parseInt 作为自身属性，等属性初始化，同样也可以有额外创建的其它对象作为属性（其可以指向到全局对象自身）。例如，在 DOM 中，全局对象的 window 属性就可以引用全局对象自身(当然，并不是所有的具体实现都是这样)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">global = &#123;</div><div class="line">  Math: &lt;...&gt;,</div><div class="line">  String: &lt;...&gt;</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  window: global //引用自身</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当访问全局对象的属性时通常会忽略掉前缀，这是因为全局对象是不能通过名称直接访问的。不过我们依然可以通过全局上下文的 this 来访问全局对象，同样也可以递归引用自身。例如，DOM 中的 window。综上所述，代码可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String(10); // 就是global.String(10);</div><div class="line">// 带有前缀</div><div class="line">window.a = 10; // === global.window.a = 10 === global.a = 10;</div><div class="line">this.b = 20; // global.b = 20;</div></pre></td></tr></table></figure>
<p>因此，回到全局上下文中的变量对象——在这里，变量对象就是全局对象自己：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VO(globalContext) === global;</div></pre></td></tr></table></figure>
<p>非常有必要要理解上述结论，基于这个原理，在全局上下文中声明的对应，我们才可以间接通过全局对象的属性来访问它（例如，事先不知道变量名称）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = new String(&apos;test&apos;);</div><div class="line">alert(a); // 直接访问，在VO(globalContext)里找到：&quot;test&quot;</div><div class="line">alert(window[&apos;a&apos;]); // 间接通过global访问：global === VO(globalContext): &quot;test&quot;</div><div class="line">alert(a === this.a); // true</div><div class="line">var aKey = &apos;a&apos;;</div><div class="line">alert(window[aKey]); // 间接通过动态属性名称访问：&quot;test&quot;</div></pre></td></tr></table></figure>
<h2 id="函数上下文中的变量对象"><a href="#函数上下文中的变量对象" class="headerlink" title="函数上下文中的变量对象"></a>函数上下文中的变量对象</h2><p>在函数执行上下文中，VO 是不能直接访问的，此时由活动对象(activation object，缩写为 AO)扮演 VO 的角色。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VO(functionContext) === AO;</div></pre></td></tr></table></figure>
<p>活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性的值是 Arguments 对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AO = &#123;</div><div class="line">  arguments: &lt;ArgO&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Arguments 对象是活动对象的一个属性，它包括如下属性：</p>
<ol>
<li>callee — 指向当前函数的引用</li>
<li>length — 真正传递的参数个数</li>
<li>properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes 内部元素的个数等于 arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的。</li>
</ol>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function foo(x, y, z) &#123;</div><div class="line">  // 声明的函数参数数量arguments (x, y, z)</div><div class="line">  alert(foo.length); // 3</div><div class="line">  // 真正传进来的参数个数(only x, y)</div><div class="line">  alert(arguments.length); // 2</div><div class="line">  // 参数的callee是函数自身</div><div class="line">  alert(arguments.callee === foo); // true</div><div class="line">  // 参数共享</div><div class="line">  alert(x === arguments[0]); // true</div><div class="line">  alert(x); // 10</div><div class="line">  arguments[0] = 20;</div><div class="line">  alert(x); // 20</div><div class="line">  x = 30;</div><div class="line">  alert(arguments[0]); // 30</div><div class="line">  // 不过，没有传进来的参数z，和参数的第3个索引值是不共享的</div><div class="line">  z = 40;</div><div class="line">  alert(arguments[2]); // undefined</div><div class="line">  arguments[2] = 50;</div><div class="line">  alert(z); // 40</div><div class="line">&#125;</div><div class="line">foo(10, 20);</div></pre></td></tr></table></figure>
<p>这个例子的代码，在当前版本的 Google Chrome 浏览器里有一个 bug — 即使没有传递参数 z，z 和 arguments[2]仍然是共享的。</p>
<h2 id="处理上下文代码的-2-个阶段"><a href="#处理上下文代码的-2-个阶段" class="headerlink" title="处理上下文代码的 2 个阶段"></a>处理上下文代码的 2 个阶段</h2><p>现在我们终于到了本文的核心点了。执行上下文的代码被分成两个基本的阶段来处理：</p>
<ol>
<li>进入执行上下文</li>
<li>执行代码</li>
</ol>
<p>变量对象的修改变化与这两个阶段紧密相关。</p>
<p>注：这 2 个阶段的处理是一般行为，和上下文的类型无关（也就是说，在全局上下文和函数上下文中的表现是一样的）。</p>
<h2 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h2><p>当进入执行上下文(代码执行之前)时，VO 里已经包含了下列属性(前面已经说了)：</p>
<h3 id="函数的所有形参-如果我们是在函数执行上下文中"><a href="#函数的所有形参-如果我们是在函数执行上下文中" class="headerlink" title="函数的所有形参(如果我们是在函数执行上下文中)"></a>函数的所有形参(如果我们是在函数执行上下文中)</h3><p>— 由名称和对应值组成的一个变量对象的属性被创建；没有传递对应参数的话，那么由名称和 undefined 值组成的一种变量对象的属性也将被创建。</p>
<h3 id="所有函数声明-FunctionDeclaration-FD"><a href="#所有函数声明-FunctionDeclaration-FD" class="headerlink" title="所有函数声明(FunctionDeclaration, FD)"></a>所有函数声明(FunctionDeclaration, FD)</h3><p>—由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建；如果变量对象已经存在相同名称的属性，则完全替换这个属性。</p>
<h3 id="所有变量声明-var-VariableDeclaration"><a href="#所有变量声明-var-VariableDeclaration" class="headerlink" title="所有变量声明(var, VariableDeclaration)"></a>所有变量声明(var, VariableDeclaration)</h3><p>— 由名称和对应值（undefined）组成一个变量对象的属性被创建；如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</p>
<p>让我们看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test(a, b) &#123;</div><div class="line">  var c = 10;</div><div class="line">  function d() &#123;&#125;</div><div class="line">  var e = function _e() &#123;&#125;;</div><div class="line">  (function x() &#123;&#125;);</div><div class="line">&#125;</div><div class="line">test(10); // call</div></pre></td></tr></table></figure>
<p>当进入带有参数 10 的 test 函数上下文时，AO 表现为如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AO(test) = &#123;</div><div class="line">  a: 10,</div><div class="line">  b: undefined,</div><div class="line">  c: undefined,</div><div class="line">  d: &lt;reference to FunctionDeclaration &quot;d&quot;&gt;</div><div class="line">  e: undefined</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>注意，AO 里并不包含函数“x”。这是因为“x” 是一个函数表达式(FunctionExpression, 缩写为 FE) 而不是函数声明，函数表达式不会影响 VO。 不管怎样，函数“_e” 同样也是函数表达式，但是就像我们下面将看到的那样，因为它分配给了变量 “e”，所以它可以通过名称“e”来访问。 函数声明 FunctionDeclaration 与函数表达式 FunctionExpression 的不同，将在第 15 章 Functions 进行详细的探讨，也可以参考本系列第 2 章揭秘命名函数表达式来了解。</p>
<p>这之后，将进入处理上下文代码的第二个阶段 — 执行代码。</p>
<h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><p>这个周期内，AO/VO 已经拥有了属性(不过，并不是所有的属性都有值，大部分属性的值还是系统默认的初始值 undefined )。</p>
<p>还是前面那个例子， AO/VO 在代码解释期间被修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AO[&apos;c&apos;] = 10;</div><div class="line">AO[&apos;e&apos;] = &lt;reference to FunctionExpression &quot;_e&quot;&gt;;</div></pre></td></tr></table></figure>
<p>再次注意，因为 FunctionExpression“_e”保存到了已声明的变量“e”上，所以它仍然存在于内存中。而 FunctionExpression “x”却不存在于 AO/VO 中，也就是说如果我们想尝试调用“x”函数，不管在函数定义之前还是之后，都会出现一个错误“x is not defined”，未保存的函数表达式只有在它自己的定义或递归中才能被调用。</p>
<p>另一个经典例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alert(x); // function</div><div class="line">var x = 10;</div><div class="line">alert(x); // 10</div><div class="line">x = 20;</div><div class="line">function x() &#123;&#125;; </div><div class="line">alert(x); // 20</div></pre></td></tr></table></figure>
<p>为什么第一个 alert “x” 的返回值是 function，而且它还是在“x” 声明之前访问的“x” 的？为什么不是 10 或 20 呢？因为，根据规范函数声明是在当<strong>进入上下文</strong>时填入的； 同意周期，在进入上下文的时候还有一个变量声明“x”，那么正如我们在上一个阶段所说，变量声明在顺序上跟在函数声明和形式参数声明之后，而且在这个<strong>进入上下文</strong>阶段，变量声明不会干扰VO 中已经存在的同名函数声明或形式参数声明，因此，在进入上下文时，VO 的结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">VO = &#123;&#125;;</div><div class="line">VO[&apos;x&apos;] = &lt;reference to FunctionDeclaration &quot;x&quot;&gt;</div><div class="line">// 找到var x = 10;</div><div class="line">// 如果function &quot;x&quot;没有已经声明的话</div><div class="line">// 这时候&quot;x&quot;的值应该是undefined</div><div class="line">// 但是这个case里变量声明没有影响同名的function的值</div><div class="line">VO[&apos;x&apos;] = &lt;the value is not disturbed, still function&gt;</div></pre></td></tr></table></figure>
<p>紧接着，在执行代码阶段，VO 做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">VO[&apos;x&apos;] = 10;</div><div class="line">VO[&apos;x&apos;] = 20;</div></pre></td></tr></table></figure>
<p>我们可以在第二、三个 alert 看到这个效果。</p>
<p>在下面的例子里我们可以再次看到，变量是在进入上下文阶段放入 VO 中的。(因为，虽然 else 部分代码永远不会执行，但是不管怎样，变量“b”仍然存在于 VO 中。)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  var a = 1;</div><div class="line">&#125; else &#123;</div><div class="line">  var b = 2;</div><div class="line">&#125;</div><div class="line">alert(a); // 1</div><div class="line">alert(b); // undefined,不是b没有声明，而是b的值是undefined</div></pre></td></tr></table></figure>
<h2 id="关于变量"><a href="#关于变量" class="headerlink" title="关于变量"></a>关于变量</h2><p>通常，各类文章和 JavaScript 相关的书籍都声称：“不管是使用 var 关键字(在全局上下文)还是不使用 var 关键字(在任何地方)，都可以声明一个变量”。请记住，这是错误的概念：</p>
<p><code>任何时候，变量只能通过使用 var 关键字才能声明。</code></p>
<p>上面的赋值语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = 10;</div></pre></td></tr></table></figure>
<p>这仅仅是给全局对象创建了一个新属性(但它不是变量)。“不是变量”并不是说它不能被改变，而是指它不符合 ECMAScript 规范中的变量概念，所以它“不是变量”(它之所以能成为全局对象的属性，完全是因为 VO(globalContext) === global，大家还记得这个吧？)。</p>
<p>让我们通过下面的实例看看具体的区别吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alert(a); // undefined</div><div class="line">alert(b); // &quot;b&quot; 没有声明</div><div class="line">b = 10;</div><div class="line">var a = 20;</div></pre></td></tr></table></figure>
<p>所有根源仍然是 VO 和进入上下文阶段和代码执行阶段：</p>
<p>进入上下文阶段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VO = &#123;</div><div class="line">  a: undefined</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们可以看到，因为“b”不是一个变量，所以在这个阶段根本就没有“b”，“b”将只在代码执行阶段才会出现(但是在我们这个例子里，还没有到那就已经出错了)。</p>
<p>让我们改变一下例子代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alert(a); // undefined, 这个大家都知道，</div><div class="line">b = 10;</div><div class="line">alert(b); // 10, 代码执行阶段创建</div><div class="line">var a = 20;</div><div class="line">alert(a); // 20, 代码执行阶段修改</div></pre></td></tr></table></figure>
<p>关于变量，还有一个重要的知识点。变量相对于简单属性来说，变量有一个特性(attribute)：{DontDelete}，这个特性的含义就是不能用 delete 操作符直接删除变量属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = 10;</div><div class="line">alert(window.a); // 10</div><div class="line">alert(delete a); // true</div><div class="line">alert(window.a); // undefined</div><div class="line">var b = 20;</div><div class="line">alert(window.b); // 20</div><div class="line">alert(delete b); // false</div><div class="line">alert(window.b); // still 20</div></pre></td></tr></table></figure>
<p>但是这个规则在有个上下文里不起走样，那就是 eval 上下文，变量没有{DontDelete}特性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eval(&apos;var a = 10;&apos;);</div><div class="line">alert(window.a); // 10</div><div class="line">alert(delete a); // true</div><div class="line">alert(window.a); // undefined</div></pre></td></tr></table></figure>
<p>使用一些调试工具(例如：Firebug)的控制台测试该实例时，请注意，Firebug 同样是使用 eval 来执行控制台里你的代码。因此，变量属性同样没有{DontDelete}特性，可以被删除。</p>
<h2 id="特殊实现-parent-属性"><a href="#特殊实现-parent-属性" class="headerlink" title="特殊实现: parent 属性"></a>特殊实现: <strong>parent</strong> 属性</h2><p>前面已经提到过，按标准规范，活动对象是不可能被直接访问到的。但是，一些具体实现并没有完全遵守这个规定，例如 SpiderMonkey 和 Rhino；的实现中，函数有一个特殊的属性 <strong>parent</strong>，通过这个属性可以直接引用到活动对象（或全局变量对象），在此对象里创建了函数。</p>
<p>例如 (SpiderMonkey, Rhino)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var global = this;</div><div class="line">var a = 10;</div><div class="line">function foo() &#123;&#125;</div><div class="line">alert(foo.__parent__); // global</div><div class="line">var VO = foo.__parent__;</div><div class="line">alert(VO.a); // 10</div><div class="line">alert(VO === global); // true</div></pre></td></tr></table></figure>
<p>在上面的例子中我们可以看到，函数 foo 是在全局上下文中创建的，所以属性<strong>parent</strong> 指向全局上下文的变量对象，即全局对象。</p>
<p>然而，在SpiderMonkey中用同样的方式访问活动对象是不可能的：在不同版本的SpiderMonkey中，内部函数的<strong>parent</strong> 有时指向 null ，有时指向全局对象。</p>
<p>在 Rhino 中，用同样的方式访问活动对象是完全可以的。</p>
<p>例如 (Rhino)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var global = this;</div><div class="line">var x = 10;</div><div class="line">(function foo() &#123;</div><div class="line">  var y = 20;</div><div class="line">  // &quot;foo&quot;上下文里的活动对象</div><div class="line">  var AO = (function () &#123;&#125;).__parent__;</div><div class="line">  print(AO.y); // 20</div><div class="line">  // 当前活动对象的__parent__ 是已经存在的全局对象</div><div class="line">  // 变量对象的特殊链形成了</div><div class="line">  // 所以我们叫做作用域链</div><div class="line">  print(AO.__parent__ === global); // true</div><div class="line">  print(AO.__parent__.x); // 10</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章里，我们深入学习了跟执行上下文相关的对象。我希望这些知识对您来说能有所帮助，能解决一些您曾经遇到的问题或困惑。按照计划，在后续的章节中，我们将探讨作用域链，标识符解析，闭包。</p>
<h2 id="其它参考"><a href="#其它参考" class="headerlink" title="其它参考"></a>其它参考</h2><ol>
<li><a href="http://bclary.com/2004/11/07/#a-10.1.3" target="_blank" rel="external">Variable Instantiation</a>;</li>
<li><a href="http://bclary.com/2004/11/07/#a-10.1.5" target="_blank" rel="external">Global Object</a>;</li>
<li><a href="http://bclary.com/2004/11/07/#a-10.1.6" target="_blank" rel="external">Activation Object</a>;</li>
<li><a href="http://bclary.com/2004/11/07/#a-10.1.8" target="_blank" rel="external">Arguments Object</a>.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 编程的时候总避免不了声明函数和变量，以成功构建我们的系统，但是解释器是如何并且在什么地方去查找这些函数和变量呢？我们引用这些对象的时候究竟发生了什么？&lt;/p&gt;
&lt;p&gt;大多数 ECMAScript 程序员应该都知道变量与执行上下文有密切关系：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = 10; // 全局上下文中的变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var b = 20; // function上下文中的局部变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(a); // 10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(b); // 全局变量 &amp;quot;b&amp;quot; 没有声明&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>S.O.L.I.D 五大原则之开闭原则 OCP</title>
    <link href="http://yoursite.com/2016/06/23/JavaScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript/7S.O.L.I.D%20%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%88%99%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99%20OCP/"/>
    <id>http://yoursite.com/2016/06/23/JavaScript/深入理解javascript/7S.O.L.I.D 五大原则之开闭原则 OCP/</id>
    <published>2016-06-23T09:02:02.000Z</published>
    <updated>2017-03-02T14:12:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们要讲解的是 S.O.L.I.D 五大原则 JavaScript 语言实现的第 2 篇，开闭原则 OCP（The Open/Closed Principle ）。</p>
<p>开闭原则的描述是：</p>
<blockquote>
<p>Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.<br>软件实体（类，模块，方法等等）应当对扩展开放，对修改关闭，即软件实体应当在不修改的前提下扩展。<br><a id="more"></a><br>open for extension（对扩展开放）的意思是说当新需求出现的时候，可以通过扩展现有模型达到目的。而 Close for modification（对修改关闭）的意思是说不允许对该实体做任何修改，说白了，就是这些需要执行多样行为的实体应该设计成不需要修改就可以实现各种的变化，坚持开闭原则有利于用最少的代码进行项目维护。</p>
</blockquote>
<h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><p>为了直观地描述，我们来举个例子演示一下，下属代码是动态展示 question 列表的代码（没有使用开闭原则）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">// 问题类型</div><div class="line">var AnswerType = &#123;</div><div class="line">    Choice: 0,</div><div class="line">    Input: 1</div><div class="line">&#125;;</div><div class="line">// 问题实体</div><div class="line">function question(label, answerType, choices) &#123;</div><div class="line">    return &#123;</div><div class="line">        label: label,</div><div class="line">        answerType: answerType,</div><div class="line">        choices: choices // 这里的choices是可选参数</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">var view = (function () &#123;</div><div class="line">    // render一个问题</div><div class="line">    function renderQuestion(target, question) &#123;</div><div class="line">        var questionWrapper = document.createElement(&apos;div&apos;);</div><div class="line">        questionWrapper.className = &apos;question&apos;;</div><div class="line">        var questionLabel = document.createElement(&apos;div&apos;);</div><div class="line">        questionLabel.className = &apos;question-label&apos;;</div><div class="line">        var label = document.createTextNode(question.label);</div><div class="line">        questionLabel.appendChild(label);</div><div class="line">        var answer = document.createElement(&apos;div&apos;);</div><div class="line">        answer.className = &apos;question-input&apos;;</div><div class="line">        // 根据不同的类型展示不同的代码：分别是下拉菜单和输入框两种</div><div class="line">        if (question.answerType === AnswerType.Choice) &#123;</div><div class="line">            var input = document.createElement(&apos;select&apos;);</div><div class="line">            var len = question.choices.length;</div><div class="line">            for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">                var option = document.createElement(&apos;option&apos;);</div><div class="line">                option.text = question.choices[i];</div><div class="line">                option.value = question.choices[i];</div><div class="line">                input.appendChild(option);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else if (question.answerType === AnswerType.Input) &#123;</div><div class="line">            var input = document.createElement(&apos;input&apos;);</div><div class="line">            input.type = &apos;text&apos;;</div><div class="line">        &#125;</div><div class="line">        answer.appendChild(input);</div><div class="line">        questionWrapper.appendChild(questionLabel);</div><div class="line">        questionWrapper.appendChild(answer);</div><div class="line">        target.appendChild(questionWrapper);</div><div class="line">    &#125;</div><div class="line">    return &#123;</div><div class="line">        // 遍历所有的问题列表进行展示</div><div class="line">        render: function (target, questions) &#123;</div><div class="line">            for (var i = 0; i &lt; questions.length; i++) &#123;</div><div class="line">                renderQuestion(target, questions[i]);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line">var questions = [</div><div class="line">                question(&apos;Have you used tobacco products within the last 30 days?&apos;, AnswerType.Choice, [&apos;Yes&apos;, &apos;No&apos;]),</div><div class="line">                question(&apos;What medications are you currently using?&apos;, AnswerType.Input)</div><div class="line">                ];</div><div class="line">var questionRegion = document.getElementById(&apos;questions&apos;);</div><div class="line">view.render(questionRegion, questions);</div></pre></td></tr></table></figure>
<p>上面的代码，view 对象里包含一个 render 方法用来展示 question 列表，展示的时候根据不同的 question 类型使用不同的展示方式，一个 question 包含一个 label 和一个问题类型以及 choices 的选项（如果是选择类型的话）。如果问题类型是 Choice 那就根据选项生产一个下拉菜单，如果类型是 Input，那就简单地展示 input输入框。</p>
<p>该代码有一个限制，就是如果再增加一个 question 类型的话，那就需要再次修改 renderQuestion 里的条件语句，这明显违反了开闭原则。</p>
<h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><p>让我们来重构一下这个代码，以便在出现新 question 类型的情况下允许扩展 view 对象的 render 能力，而不需要修改 view 对象内部的代码。</p>
<p>先来创建一个通用的 questionCreator 函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function questionCreator(spec, my) &#123;</div><div class="line">    var that = &#123;&#125;;</div><div class="line">    my = my || &#123;&#125;;</div><div class="line">    my.label = spec.label;</div><div class="line">    my.renderInput = function () &#123;</div><div class="line">        throw &quot;not implemented&quot;; </div><div class="line">        // 这里renderInput没有实现，主要目的是让各自问题类型的实现代码去覆盖整个方法</div><div class="line">    &#125;;</div><div class="line">    that.render = function (target) &#123;</div><div class="line">        var questionWrapper = document.createElement(&apos;div&apos;);</div><div class="line">        questionWrapper.className = &apos;question&apos;;</div><div class="line">        var questionLabel = document.createElement(&apos;div&apos;);</div><div class="line">        questionLabel.className = &apos;question-label&apos;;</div><div class="line">        var label = document.createTextNode(spec.label);</div><div class="line">        questionLabel.appendChild(label);</div><div class="line">        var answer = my.renderInput();</div><div class="line">        // 该render方法是同样的粗合理代码</div><div class="line">        // 唯一的不同就是上面的一句my.renderInput()</div><div class="line">        // 因为不同的问题类型有不同的实现</div><div class="line">        questionWrapper.appendChild(questionLabel);</div><div class="line">        questionWrapper.appendChild(answer);</div><div class="line">        return questionWrapper;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该代码的作用组合要是 render 一个问题，同时提供一个未实现的 renderInput 方法以便其他 function 可以覆盖，以使用不同的问题类型，我们继续看一下每个问题类型的实现代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function choiceQuestionCreator(spec) &#123;</div><div class="line">    var my = &#123;&#125;,</div><div class="line">that = questionCreator(spec, my);           </div><div class="line">    // choice类型的renderInput实现</div><div class="line">    my.renderInput = function () &#123;</div><div class="line">        var input = document.createElement(&apos;select&apos;);</div><div class="line">        var len = spec.choices.length;</div><div class="line">        for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">            var option = document.createElement(&apos;option&apos;);</div><div class="line">            option.text = spec.choices[i];</div><div class="line">            option.value = spec.choices[i];</div><div class="line">            input.appendChild(option);</div><div class="line">        &#125;</div><div class="line">        return input;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div><div class="line">function inputQuestionCreator(spec) &#123;</div><div class="line">    var my = &#123;&#125;,</div><div class="line">that = questionCreator(spec, my);</div><div class="line">    // input类型的renderInput实现</div><div class="line">    my.renderInput = function () &#123;</div><div class="line">        var input = document.createElement(&apos;input&apos;);</div><div class="line">        input.type = &apos;text&apos;;</div><div class="line">        return input;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>choiceQuestionCreator 函数和 inputQuestionCreator 函数分别对应下拉菜单和 input 输入框的 renderInput 实现，通过内部调用统一的 questionCreator(spec, my)然后返回 that 对象（同一类型哦）。</p>
<p>view 对象的代码就很固定了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var view = &#123;</div><div class="line">    render: function(target, questions) &#123;</div><div class="line">        for (var i = 0; i &lt; questions.length; i++) &#123;</div><div class="line">            target.appendChild(questions[i].render());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>所以我们声明问题的时候只需要这样做，就 OK 了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var questions = [</div><div class="line">    choiceQuestionCreator(&#123;</div><div class="line">    label: &apos;Have you used tobacco products within the last 30 days?&apos;,</div><div class="line">    choices: [&apos;Yes&apos;, &apos;No&apos;]</div><div class="line">　　&#125;),</div><div class="line">    inputQuestionCreator(&#123;</div><div class="line">    label: &apos;What medications are you currently using?&apos;</div><div class="line">　　&#125;)</div><div class="line">    ];</div></pre></td></tr></table></figure>
<p>最终的使用代码，我们可以这样来用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var questionRegion = document.getElementById(&apos;questions&apos;);</div><div class="line">view.render(questionRegion, questions);</div></pre></td></tr></table></figure>
<p>重构后的最终代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">function questionCreator(spec, my) &#123;</div><div class="line">    var that = &#123;&#125;;</div><div class="line">    my = my || &#123;&#125;;</div><div class="line">    my.label = spec.label;</div><div class="line">    my.renderInput = function() &#123;</div><div class="line">        throw &quot;not implemented&quot;;</div><div class="line">    &#125;;</div><div class="line">    that.render = function(target) &#123;</div><div class="line">        var questionWrapper = document.createElement(&apos;div&apos;);</div><div class="line">        questionWrapper.className = &apos;question&apos;;</div><div class="line">        var questionLabel = document.createElement(&apos;div&apos;);</div><div class="line">        questionLabel.className = &apos;question-label&apos;;</div><div class="line">        var label = document.createTextNode(spec.label);</div><div class="line">        questionLabel.appendChild(label);</div><div class="line">        var answer = my.renderInput();</div><div class="line">        questionWrapper.appendChild(questionLabel);</div><div class="line">        questionWrapper.appendChild(answer);</div><div class="line">        return questionWrapper;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div><div class="line">function choiceQuestionCreator(spec) &#123;</div><div class="line">    var my = &#123;&#125;,</div><div class="line">        that = questionCreator(spec, my);</div><div class="line">    my.renderInput = function() &#123;</div><div class="line">        var input = document.createElement(&apos;select&apos;);</div><div class="line">        var len = spec.choices.length;</div><div class="line">        for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">            var option = document.createElement(&apos;option&apos;);</div><div class="line">            option.text = spec.choices[i];</div><div class="line">            option.value = spec.choices[i];</div><div class="line">            input.appendChild(option);</div><div class="line">        &#125;</div><div class="line">        return input;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div><div class="line">function inputQuestionCreator(spec) &#123;</div><div class="line">    var my = &#123;&#125;,</div><div class="line">        that = questionCreator(spec, my);</div><div class="line">    my.renderInput = function() &#123;</div><div class="line">        var input = document.createElement(&apos;input&apos;);</div><div class="line">        input.type = &apos;text&apos;;</div><div class="line">        return input;</div><div class="line">    &#125;;</div><div class="line">    return that;</div><div class="line">&#125;</div><div class="line">var view = &#123;</div><div class="line">    render: function(target, questions) &#123;</div><div class="line">        for (var i = 0; i &lt; questions.length; i++) &#123;</div><div class="line">            target.appendChild(questions[i].render());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">var questions = [</div><div class="line">    choiceQuestionCreator(&#123;</div><div class="line">    label: &apos;Have you used tobacco products within the last 30 days?&apos;,</div><div class="line">    choices: [&apos;Yes&apos;, &apos;No&apos;]</div><div class="line">&#125;),</div><div class="line">    inputQuestionCreator(&#123;</div><div class="line">    label: &apos;What medications are you currently using?&apos;</div><div class="line">&#125;)</div><div class="line">    ];</div><div class="line">var questionRegion = document.getElementById(&apos;questions&apos;);</div><div class="line">view.render(questionRegion, questions);</div></pre></td></tr></table></figure>
<p>上面的代码里应用了一些技术点，我们来逐一看一下：</p>
<ol>
<li>首先，questionCreator 方法的创建，可以让我们使用模板方法模式将处理问题的功能 delegat 给针对每个问题类型的扩展代码 renderInput 上。</li>
<li>其次，我们用一个私有的 spec 属性替换掉了前面 question 方法的构造函数属性，因为我们封装了 render 行为进行操作，不再需要把这些属性暴露给外部代码了。</li>
<li>第三，我们为每个问题类型创建一个对象进行各自的代码实现，但每个实现里都必须包含 renderInput 方法以便覆盖 questionCreator 方法里的 renderInput 代码，这就是我们常说的策略模式。</li>
<li>通过重构，我们可以去除不必要的问题类型的枚举 AnswerType，而且可以让 choices 作为 choiceQuestionCreator 函数的必选参数（之前的版本是一个可选参数）。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>重构以后的版本的 view 对象可以很清晰地进行新的扩展了，为不同的问题类型扩展新的对象，然后声明 questions 集合的时候再里面指定类型就行了，view 对象本身不再修改任何改变，从而达到了开闭原则的要求。</p>
<p>另：懂 C#的话，不知道看了上面的代码后是否和多态的实现有些类似？其实上述的代码用原型也是可以实现的，大家可以自行研究一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章我们要讲解的是 S.O.L.I.D 五大原则 JavaScript 语言实现的第 2 篇，开闭原则 OCP（The Open/Closed Principle ）。&lt;/p&gt;
&lt;p&gt;开闭原则的描述是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.&lt;br&gt;软件实体（类，模块，方法等等）应当对扩展开放，对修改关闭，即软件实体应当在不修改的前提下扩展。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
