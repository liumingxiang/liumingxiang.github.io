<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-07T02:14:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB的安装以及自启动详细教程</title>
    <link href="http://yoursite.com/2017/03/07/nodejs/mongodb/MongoDB/"/>
    <id>http://yoursite.com/2017/03/07/nodejs/mongodb/MongoDB/</id>
    <published>2017-03-06T17:57:20.000Z</published>
    <updated>2017-03-07T02:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下，我写这篇文章的背景，一直以来我也是这么实践的，那就是懒，嗯，对，就是懒，之前我自己配过这个mongodb，最近电脑重装了，然后我有个步骤忘记了，然后去网上查询资料，想改成自启动，可是我发现网上的教程没有一篇能把它说清楚的，所以我就把这个教程写了下来，供大家参考</p>
<p>———————————————————华丽的分割线—————————————————————-</p>
<p>MongoDB是一个基于分布式文件存储的数据库。由<a href="http://baike.baidu.com/view/824.htm" target="_blank" rel="external">C++</a>语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB[][ ]是一个介于<a href="http://baike.baidu.com/view/68348.htm" target="_blank" rel="external">关系数据库</a>和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似<a href="http://baike.baidu.com/view/136475.htm" target="_blank" rel="external">json</a>的<a href="http://baike.baidu.com/view/3463259.htm" target="_blank" rel="external">bson</a>格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立<a href="http://baike.baidu.com/view/262241.htm" target="_blank" rel="external">索引</a>。</p>
<a id="more"></a>
<p>首先我们要去下载我们的mongodb的zip包，不知道你们要下载什么，反正我是下载的zip，因为这个比较灵活，只需要解压就OK了，（记住哈，是zip格式）    <a href="https://www.mongodb.com/" target="_blank" rel="external">传送门</a></p>
<p><img src="/images/MongoDB/mdb16.png" alt="img"></p>
<p><img src="/images/MongoDB/mdb17.png" alt="img"></p>
<p>然后把他解压到我们电脑的某一个盘符的根目录譬如我这样 把它放在D盘根目录</p>
<p><img src="/images/MongoDB/mdb15.png" alt="img"></p>
<p>当我们把这些准备好以后，我们只需要在我们mongodb的目录下，建立一个data的目录（先不要管那个mongo.config）</p>
<p><img src="/images/MongoDB/mdb1.png" alt="img"></p>
<p>后面我们只需要在data中建立一个文件夹叫db还有一个文件夹叫log</p>
<p><img src="/images/MongoDB/mdb2.png" alt="img"></p>
<p>还有下面我们要在我们的log文件夹中建立一个mongodb.log文件，文件里不用填任何的东西</p>
<p><img src="/images/MongoDB/mdb3.png" alt="img"></p>
<p>下面我们只需要把我们的mongodb加入我们的path目录中，我们就可以在系统的任何地方启动我们的mongodb了</p>
<p><img src="/images/MongoDB/mdb4.png" alt="img"></p>
<p>然后我们就可以启动我们的数据库了，第一次启动的时候，我们要指定我们的数据库存储地址，上面我们建的的data里面的db</p>
<p>我们只需要执行一个命令就可以了，其实在你执行了上面一步之后，并不需要跳转到bin目录下，也依然可以执行我们的mongod命令，后面的<code>--dbpath D:\mongodb\data\db</code>千万不能忘，这是指定我们的数据存储地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">D:/mongodb/bin&gt;mongod --dbpath D:\mongodb\data\db</div><div class="line">D:\                                  </div><div class="line">λ cd mongodb\bin\                                                    </div><div class="line">D:\mongodb\bin                       </div><div class="line">λ mongod --dbpath D:\mongodb\data\db</div></pre></td></tr></table></figure>
<p><img src="/images/MongoDB/mdb13.png" alt="img"></p>
<p>就这样子，我们就在本地安装好了我们的mongodb</p>
<h3 id="但是，但是，但是。。。"><a href="#但是，但是，但是。。。" class="headerlink" title="但是，但是，但是。。。"></a>但是，但是，但是。。。</h3><p>如果真的这样子的话，我们每次都需要在我们需要的时候，都需要开启我们的cmd然后输入我们的mongod然后一直开着我们的cmd窗口才行，这样子很不方便好吗，如果真的这样子就完事了，我就不写这篇文章了。既然你是一名开发者，就肯定知道系统服务这个东西，我们也可以把我们的mongodb服务加入到我们的系统服务中，然后在开机的时候，自动开启我们的mongodb，这样子就很方便了。</p>
<p>—————————————————分割线———————————————–</p>
<p>下面我就带着你，把我们的mongodb加到我们的系统服务中</p>
<p>首先呢，我们需要在我们的mongodb根目录下，建立一个<code>mongo.config</code></p>
<p><img src="/images/MongoDB/mdb5.png" alt="img"></p>
<p>然后在文件中写入我们的mongodb.log的目录，以及我们的db的目录，如下（根据自己的实际情况来填写下面的路径）</p>
<p><img src="/images/MongoDB/mdb6.png" alt="img"></p>
<p>再然后我们在我们的cmd中输入下面的命令，可是你要根据自己的实际目录来改变自己的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config D:\mongodb\mongo.config --install --serviceName &quot;MongoDB&quot;</div></pre></td></tr></table></figure>
<p><img src="/images/MongoDB/mdb8.png" alt="img"></p>
<p>如果在我们的mongodb.log中看到以下信息，嗯，你就成功了</p>
<p><img src="/images/MongoDB/mdb14.png" alt="img"></p>
<p>下面我们在cmd或者<code>win+R</code>输入以下命令<code>services.msc</code>，来打开我们的服务列表</p>
<p><img src="/images/MongoDB/mdb9.png" alt="img"></p>
<p>然后我们就可以看到这些信息，在这里我们就可以看到我们的mongodb服务了</p>
<p><img src="/images/MongoDB/mdb10.png" alt="img"></p>
<p>然后我们右键进入属性，把启动项改为自动</p>
<p><img src="/images/MongoDB/mdb11.png" alt="img"></p>
<p>然后在回到上一级，把我们的服务启动了，就算正式完成了，噢耶</p>
<p><img src="/images/MongoDB/mdb12.png" alt="img"></p>
<p>至此我们的mongodb就算是真的安装以及可以自启动了，再也不用去看着黑黑的dos了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说一下，我写这篇文章的背景，一直以来我也是这么实践的，那就是懒，嗯，对，就是懒，之前我自己配过这个mongodb，最近电脑重装了，然后我有个步骤忘记了，然后去网上查询资料，想改成自启动，可是我发现网上的教程没有一篇能把它说清楚的，所以我就把这个教程写了下来，供大家参考&lt;/p&gt;
&lt;p&gt;———————————————————华丽的分割线—————————————————————-&lt;/p&gt;
&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库。由&lt;a href=&quot;http://baike.baidu.com/view/824.htm&quot;&gt;C++&lt;/a&gt;语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;MongoDB[][ ]是一个介于&lt;a href=&quot;http://baike.baidu.com/view/68348.htm&quot;&gt;关系数据库&lt;/a&gt;和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似&lt;a href=&quot;http://baike.baidu.com/view/136475.htm&quot;&gt;json&lt;/a&gt;的&lt;a href=&quot;http://baike.baidu.com/view/3463259.htm&quot;&gt;bson&lt;/a&gt;格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立&lt;a href=&quot;http://baike.baidu.com/view/262241.htm&quot;&gt;索引&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在github pages利用hexo快速搭建静态个人主页以及更改域名</title>
    <link href="http://yoursite.com/2017/01/18/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%9C%A8github%20pages%E5%88%A9%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2017/01/18/工具类/在github pages利用hexo快速搭建静态个人主页以及更改域名/</id>
    <published>2017-01-18T06:41:30.000Z</published>
    <updated>2017-03-03T02:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>github pages是一种提供免费托管静态页面的工具，可以免费作为我们的个人主页进行使用<br><a id="more"></a></p>
<p><a href="https://pages.github.com/" target="_blank" rel="external">官方地址</a></p>
<p>既然知道工具是做什么的了，下面我们就开始进行操作吧</p>
<h6 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h6><ol>
<li>首先你要确保的是你有一个github账号 <a href="https://github.com/" target="_blank" rel="external">传送门</a></li>
<li>还要确保你的电脑上有安装有git</li>
<li>最后还要有nodejs</li>
</ol>
<p>###在github上申请github pages空间<br>如果你已经看到这了  我已经默认你具备了上面的三个条件了！<br>如果你看了上面的介绍 你应该已经知道了怎么去申请这个空间了 但是为了避免有的人还是犯迷糊我下面还是讲一下怎么申请这个github pages空间吧，避免第一步就卡死这<br>登陆我们的github</p>
<p>点击这里新建一个仓储</p>
<p><img src="/images/github0.png" alt="img"></p>
<p>然后我们到了这个页面  我们按照我写的这个顺序进行操作</p>
<p><img src="/images/github2.png" alt="img">我们的仓储名格式是xxx.github.io<br>然后选择public<br>然后选择同意 就可以了</p>
<p>然后我们这个仓储就创建好了，图中的地址一定要记好，后面我们就有用了</p>
<p><img src="/images/github4.png" alt="img"></p>
<h3 id="安装hexo以及初始化"><a href="#安装hexo以及初始化" class="headerlink" title="安装hexo以及初始化"></a>安装hexo以及初始化</h3><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>首先你可以自己看看hexo的官网 <a href="https://hexo.io/" target="_blank" rel="external">传送门</a><br>首先在全局安装hexo的脚手架在cmd命令行中输入 <code>$ npm install hexo-cli -g</code> </p>
<p>等我们在全局安装好以后，找到你想放置你博客文件的目录 然后执行<code>hexo init blogName</code> 执行初始化操作</p>
<p><img src="/images/HEXO1.png" alt="img"></p>
<p>然后我们就在本地有了一个blog的文件夹，然后我们输入<code>cd blogName</code> 然后执行<code>hexo server</code>就可以在本地看到你的blog了，但是显然只是本地，你并不满足</p>
<p><img src="/images/HEXO2.png" alt="img"></p>
<p>看到这里  你是不是感觉很简单呀</p>
<p>对 就是这么简单</p>
<p>下面我们要做的就是往我们的git仓库里面进行push了</p>
<p>在hexo这个工具中我们可以直接配置我们的git地址</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">	//格式如下 https://账户:密码@你的仓储地址，也就是上面要你记住的地址</div><div class="line">  repo: https://账户:密码@github.com/xuhongbo/xuhongbo.github.io.git</div></pre></td></tr></table></figure>
<p>在你执行过上面那一步之后  你就离成功只剩一步了</p>
<p>下面我们再安装一个插件<code>npm install hexo-deployer-git --save</code>当然了，这个操作也是在我们的项目根目录中</p>
<p>然后就可以进行发布了<code>hexo generate --deploy</code></p>
<p><img src="/images/HEXO5.png" alt="img"></p>
<p>至此 你已经可以在你的github pages上看到你的个人博客了</p>
<p>如果你没有绑定个人域名的需求，就这样就不用往下面看了</p>
<h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>首先我们要有一个域名，如果没有的话，自己想办法哈，这个我是帮不了你</p>
<p>我在这里说一下怎么配dns和hexo中加入CNAME这两件事</p>
<p>在这里我拿万网作为例子</p>
<p>在dns解析中我们加入以下三条记录</p>
<p>分别是两条github pages ip 和一条你的github pages地址名如<code>xxx.github.io.</code>注意哈，最后的那个点千万别忘了</p>
<p><img src="/images/wanwang.png" alt="img"></p>
<p>对了下面我们最好还是在阿里云里面开了我们的免费的cdn加速会比较好</p>
<p><img src="/images/cdn.png" alt="img"></p>
<p>然后下面添加CNAME文件加入source文件夹中，然后在此文件中写入你的域名记住不带前面的http什么鬼的 只要 express.com 这一段然后再执行一次 <code>hexo generate --deploy</code>  </p>
<p><img src="/images/CNAME.png" alt="img"><img src="/images/CNAME2.png" alt="img"></p>
<p>嗯 所有工作已经做完了  你现在出去溜达一会  等个十来分钟  就可以访问了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github pages是一种提供免费托管静态页面的工具，可以免费作为我们的个人主页进行使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：slice和splice区别</title>
    <link href="http://yoursite.com/2015/08/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9Aslice%E5%92%8Csplice%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2015/08/17/前端知识点/前端知识点：slice和splice区别/</id>
    <published>2015-08-17T12:14:15.000Z</published>
    <updated>2017-03-31T11:08:11.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="slice和splice区别"><a href="#slice和splice区别" class="headerlink" title="slice和splice区别"></a>slice和splice区别</h1><p>##slice</p>
<ul>
<li>基于当前数组中的一或多个项创建一个新数组</li>
<li>可以接受一或两个参数，即要返回项的起始和结束位置,但不包括结束位置</li>
<li>在只有一个参数的情况下，返回从该参数指定位置开始到当前数组末尾的所有项</li>
<li><strong>不会影响原始数组</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;];</div><div class="line">var colors2 = colors.slice(1);</div><div class="line">var colors3 = colors.slice(1,4);</div><div class="line"></div><div class="line">console.log(colors); // [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</div><div class="line">console.log(colors2); // [&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;purple&quot;]</div><div class="line">console.log(colors3); // [&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;]</div></pre></td></tr></table></figure>
<blockquote>
<p>如果参数中有一个负数，则用数组长度加上该数来确定相应的位置。例如，在一个包含5项的数组上调用 <code>slice(-2,-1)</code>与调用 <code>slice(3,4)</code>得到的结果相同。如果结束位置小于起始位置，则返回空数组。</p>
</blockquote>
<hr>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><ul>
<li>主要用途是向数组的中部插入元素</li>
<li><strong>会影响原始数组</strong></li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>要实现 <code>splice</code> 的删除功能，最多只能传两个参数</p>
<h6 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h6><p>删除从参数位置到当前数组末尾的所有项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(0)</div><div class="line"></div><div class="line">console.log(colors) // []</div><div class="line">console.log(spliceColors) // [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;]</div></pre></td></tr></table></figure>
<h6 id="两个参数"><a href="#两个参数" class="headerlink" title="两个参数"></a>两个参数</h6><p>起始位置和要删除元素的数量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(0,2)</div><div class="line"></div><div class="line">console.log(colors) // [&quot;blue&quot;, &quot;black&quot;]</div><div class="line">console.log(spliceColors) // [&quot;red&quot;, &quot;green&quot;]</div></pre></td></tr></table></figure>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>要实现 <code>splice</code> 的插入功能，至少传3个参数：起始位置、0（要删除元素的数量）和要插入的元素。如果要插入多个元素，可以再传入第四、第五，以至任意多个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(1,0,&apos;yellow&apos;,&apos;white&apos;)</div><div class="line"></div><div class="line">console.log(colors) // [&quot;red&quot;, &quot;yellow&quot;, &quot;white&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;]</div><div class="line">console.log(spliceColors) // []</div></pre></td></tr></table></figure>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>splice</code> 可以向指定位置插入任意数量的项，且同时删除任意数量的项。要实现 <code>splice</code>的替换功能，只需指定3个参数：起始位置、要删除元素的数量和要插入的元素。插入的项数不必与删除的项数相等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;];</div><div class="line">var spliceColors = colors.splice(1,2,&apos;yellow&apos;,&apos;white&apos;)</div><div class="line"></div><div class="line">console.log(colors) // [&quot;red&quot;, &quot;yellow&quot;, &quot;white&quot;, &quot;black&quot;]</div><div class="line">console.log(spliceColors) // [&quot;green&quot;, &quot;blue&quot;]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;slice和splice区别&quot;&gt;&lt;a href=&quot;#slice和splice区别&quot; class=&quot;headerlink&quot; title=&quot;slice和splice区别&quot;&gt;&lt;/a&gt;slice和splice区别&lt;/h1&gt;&lt;p&gt;##slice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：事件篇</title>
    <link href="http://yoursite.com/2015/08/03/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%AF%87/"/>
    <id>http://yoursite.com/2015/08/03/前端知识点/前端知识点：事件篇/</id>
    <published>2015-08-03T13:44:15.000Z</published>
    <updated>2017-03-31T11:04:34.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-事件对象"><a href="#1-事件对象" class="headerlink" title="1. 事件对象"></a>1. 事件对象</h2><ul>
<li>event  事件对象(系统自带)<br>*兼容：Chrome IE系<br>FF -&gt; 报错</li>
<li>ev     事件函数传入参数<br>*兼容：高级浏览器(Chrome、FF、IE9+)<br>IE8- -&gt; undefined</li>
</ul>
<p><strong>兼容写法</strong>：var oEvent = ev || event;</p>
<h2 id="2-事件冒泡"><a href="#2-事件冒泡" class="headerlink" title="2. 事件冒泡"></a>2. 事件冒泡</h2><p>概念：子级的事件会传递给父级。如果父级有相同的事件，会依次从内到外执行，直到相同事件的祖宗节点，否则会继续冒泡。</p>
<p><strong>阻止事件冒泡：</strong></p>
<p>子级事件内添加  <code>oEvent.cancelBubble = true;</code></p>
<h2 id="3-事件绑定"><a href="#3-事件绑定" class="headerlink" title="3. 事件绑定"></a>3. 事件绑定</h2><p><strong>有效解决事件冲突</strong></p>
<ul>
<li>obj.addEventListener(事件名, 函数名/函数, 是否捕获);</li>
</ul>
<p>*兼容：高级浏览器</p>
<p>事件名 -&gt; 不能加’on’</p>
<p>函数名 -&gt; 不能加括号</p>
<p>是否捕获 -&gt; false</p>
<ul>
<li>obj.attachEvent(事件名, 函数名/函数);</li>
</ul>
<p>*兼容：IE10-</p>
<p>事件名 -&gt; 必须加’on’</p>
<p>函数名 -&gt; 不能加括号</p>
<p><strong>兼容写法</strong></p>
<p>封装一个事件绑定的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function addEvent(obj, sEv, fn) &#123;    //对象, 事件(不加on), 函数名/函数</div><div class="line">        if(obj.addEventListner) &#123;    //高级浏览器 -&gt; function  低级 -&gt;undefined</div><div class="line">            //高级浏览器</div><div class="line">            obj.addEventListener(sEv, fn, false);</div><div class="line">        &#125; else &#123;            //低级浏览器</div><div class="line">            obj.attachEvent(&apos;on&apos; + sEv, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="4-关于捕获-这点理解不是很到位"><a href="#4-关于捕获-这点理解不是很到位" class="headerlink" title="4. 关于捕获(这点理解不是很到位)"></a>4. 关于捕获(这点理解不是很到位)</h2><p>事件冒泡：子级 -&gt; 父级<br>设置捕获：父级 -&gt; 子级</p>
<h2 id="5-事件解绑"><a href="#5-事件解绑" class="headerlink" title="5. 事件解绑"></a>5. 事件解绑</h2><ul>
<li>obj.removeEventListener(事件名, 函数名/函数, 是否捕获);</li>
</ul>
<p>*兼容：高级浏览器</p>
<p><strong>注意：函数不能是匿名函数，每个匿名函数都相当于新创建了一个函数。</strong></p>
<p>创建函数 var show = new Function(‘a’,’b’, ‘alert(a + b)’);</p>
<ul>
<li>obj.detachEvent(事件名, 函数名/函数);</li>
</ul>
<p>*兼容：IE10-</p>
<p><strong>兼容写法</strong></p>
<p>封装一个事件解绑的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function removeEvent(obj, sEv, fn) &#123;    //对象, 事件(不加on), 函数名/函数</div><div class="line">        if(obj.removeEventListner) &#123;    //高级浏览器 -&gt; function  低级 -&gt;undefined</div><div class="line">            //高级浏览器</div><div class="line">            obj.removeEventListener(sEv, fn, false);</div><div class="line">        &#125; else &#123;            //低级</div><div class="line">            obj.detachEvent(&apos;on&apos; + sEv, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-查看鼠标点击位置"><a href="#6-查看鼠标点击位置" class="headerlink" title="6. 查看鼠标点击位置"></a>6. 查看鼠标点击位置</h2><p>var oEvent = ev || event;</p>
<p>X轴：oEvent.clientX;</p>
<p>Y轴：oEvent.clientY;</p>
<h2 id="7-键盘事件"><a href="#7-键盘事件" class="headerlink" title="7. 键盘事件"></a>7. 键盘事件</h2><ol>
<li>obj.onkeydown  按下键盘触发</li>
<li>obj.onkeyup    释放键盘触发</li>
<li>obj.oninput           键盘输入时实时触发<br>*兼容：高级浏览器<br>IE9删除时有问题</li>
</ol>
<ul>
<li>obj.onpropertychange    键盘输入时实时触发<br>*兼容：IE10-<br>IE9删除时有问题</li>
</ul>
<p><strong>兼容处理</strong></p>
<p>事件的兼容不需要处理，直接连等</p>
<p>obj.oninput = obj.onpropertychange = function() {}</p>
<p>*处理IE9：定时器</p>
<p>封装一个实时统计字数的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function calLen(obj1, obj2) &#123;        if (window.navigator.userAgent.indexOf(&apos;MSIE 9.0&apos;) != -1) &#123; //IE9</div><div class="line">            var timer = null;</div><div class="line">            obj1.onfocus = function() &#123;</div><div class="line">                timer = setInterval(function() &#123;</div><div class="line">                    obj2.innerHTML = obj1.value.length;</div><div class="line">                &#125;, 50);</div><div class="line">            &#125;;</div><div class="line">            obj1.onblur = function() &#123;</div><div class="line">                clearInterval(timer);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123; //能不添加定时器时就不添加</div><div class="line">            obj1.oninput = obj1.onpropertychange = function() &#123; //高级浏览器、IE10-</div><div class="line">                obj2.innerHTML = obj1.value.length;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>应用：实时统计输入字数</p>
<h3 id="键码-oEvent-keyCode"><a href="#键码-oEvent-keyCode" class="headerlink" title="键码 oEvent.keyCode"></a>键码 <code>oEvent.keyCode</code></h3><p><strong>重要</strong></p>
<ul>
<li>0~9：48~57</li>
<li>a~z：65~90</li>
<li>ctrl：17</li>
<li>delete：46</li>
<li>backspace：8</li>
<li>enter：13</li>
<li>左键：37</li>
<li>上键：38</li>
<li>右键：39</li>
<li>下键：40</li>
</ul>
<blockquote>
<p>组合键(js中键码不能组合使用)</p>
</blockquote>
<ul>
<li>ctrl  -&gt; ctrlKey</li>
<li>shift -&gt; shiftKey</li>
<li>alt   -&gt; altKey</li>
</ul>
<p>eg:<br><code>if(oEvent.ctrlKey &amp;&amp; oEvent.shiftKey &amp;&amp; oEvent.keyCode == 65){...}</code></p>
<h2 id="8-鼠标事件"><a href="#8-鼠标事件" class="headerlink" title="8. 鼠标事件"></a>8. 鼠标事件</h2><ol>
<li><p>obj.oncontextmenu 点击鼠标右键触发(有默认右键菜单行为)</p>
<blockquote>
<p>默认行为：<br>点击右键有菜单 文本框能输入内容 点击a标签能跳转等</p>
</blockquote>
<p><strong>阻止默认行为：return  false;</strong></p>
<p>应用：自定义右键菜单<br>应用：自定义输入框</p>
</li>
<li><p>obj.onmousedown    按下鼠标时触发</p>
</li>
<li><p>obj.onmouseup    抬起鼠标时触发</p>
</li>
<li><p>obj.onmousemove    鼠标移动触发</p>
<p>应用：拖拽<br>应用：拖拽(带框)<br>应用：磁性吸附</p>
</li>
<li><p>obj.onmouseover  鼠标移入时触发</p>
</li>
<li><p>obj.onmouseout   鼠标移出时触发</p>
<p><strong>问题</strong></p>
<p>问题1：移入子级也算重新移入<br>解决1：onmouseover -&gt; onmouseenter</p>
<p>问题2：移出子级也算移出<br>解决2：onmouseout -&gt; onmouseleave</p>
</li>
<li><p>obj.onmousewheel  滚动鼠标滚轮触发</p>
</li>
</ol>
<p>*兼容：Chrome IE系</p>
<p>DOMMouseScroll       DOM滚轮事件(<strong>DOM事件只能通过事件绑定添加</strong>)</p>
<p>*兼容：FF</p>
<p><strong>兼容写法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if (window.navigator.userAgent.indexOf(&apos;FireFox&apos;) != -1) &#123;        document.addEventListener(&apos;DOMMouseScroll&apos;, function() &#123; //FF</div><div class="line">            //scroll code here</div><div class="line">        &#125;, false)</div><div class="line">    &#125; else &#123;        document.onmousewheel = function() &#123; //Chrome IE系</div><div class="line">            //scroll code here</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="判断滚动方向"><a href="#判断滚动方向" class="headerlink" title="判断滚动方向"></a>判断滚动方向</h3><ul>
<li><p>oEvent.wheelDelta</p>
<p>*兼容：Chrome IE系</p>
<p>向上：120</p>
<p>向下：-120</p>
</li>
<li><p>DOMMouseScroll</p>
<p>*兼容：FF</p>
<p>向上：-3</p>
<p>向下：3</p>
</li>
</ul>
<p><strong>兼容写法</strong></p>
<p>封装一个鼠标滚动方向的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function addWheel(obj, fn) &#123; //向上fn(false)，向下fn(true)</div><div class="line">        function wheel(ev) &#123;            var oEvent = ev || event;            // var bDown = true;                //默认向下 --&gt;</div><div class="line">            // if(oEvent.wheelDelta) &#123;            //FF -&gt; undefined</div><div class="line">            //     //Chrome IE系</div><div class="line">            //     bDown = oEvent.wheelDelta &lt; 0;</div><div class="line">            // &#125; else &#123;</div><div class="line">            //     //FF</div><div class="line">            //     bDown = oEvent.detail &gt; 0;</div><div class="line">            // &#125;</div><div class="line"></div><div class="line">            var bDown = oEvent.wheelDelta ? oEvent.wheelDelta &lt; 0 : oEvent.detail &gt; 0;            //判断是否传入函数，执行回调函数</div><div class="line">            fn &amp;&amp; fn(bDown);            //FF阻止默认</div><div class="line">            oEvent.preventDefault &amp;&amp; oEvent.preventDefault();            //阻止默认</div><div class="line">            return false;</div><div class="line">        &#125;        if (window.navigator.userAgent.indexOf(&apos;FireFox&apos;) != -1) &#123;            //FF</div><div class="line">            document.addEventListener(&apos;DOMMouseScroll&apos;, wheel, false); //事件中阻止默认没有用</div><div class="line">        &#125; else &#123;            //Chrome IE系</div><div class="line">            // document.onmousewheel = wheel;</div><div class="line">            addEvent(obj, &apos;mousewheel&apos;, wheel);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>oEvent.preventDefault();<br> 兼容：高级浏览器<br> IE8- -&gt; undefined</p>
</blockquote>
<p>应用：自定义滚动条</p>
<h2 id="9-domReady"><a href="#9-domReady" class="headerlink" title="9. domReady"></a>9. domReady</h2><ul>
<li>DOMContentLoaded 当DOM加载完成时触发(在页面前) <strong>DOM事件必须通过事件绑定添加</strong><br>*兼容：高级浏览器</li>
<li>onreadystatechange 模拟domReady</li>
</ul>
<p><strong>兼容写法</strong><br>封装domReady全兼容方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function domReady(fn) &#123;        if (document.addEventListener) &#123;            //高级浏览器</div><div class="line">            document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</div><div class="line">                fn &amp;&amp; fn();</div><div class="line">            &#125;, false);</div><div class="line">        &#125; else &#123;            //低级浏览器  模拟domReady</div><div class="line">            document.onreadystatechange = function() &#123;                if (document.readyState == &apos;complete&apos;) &#123;    // 全兼容</div><div class="line">                    fn &amp;&amp; fn();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="10-事件委托"><a href="#10-事件委托" class="headerlink" title="10. 事件委托"></a>10. 事件委托</h2><p>概念：子级自己的事件可以委托给父级处理</p>
<p>好处： (1)提高性能  <strong>(2)可以给未来的子元素添加事件</strong></p>
<h2 id="11-事件源"><a href="#11-事件源" class="headerlink" title="11. 事件源"></a>11. 事件源</h2><ul>
<li>oEvent.target<br>*兼容：高级浏览器<br>低级浏览器 -&gt; undefined</li>
<li>oEvent.srcElement<br>*兼容：Chrome、IE系<br>FF -&gt; undefined</li>
</ul>
<p><strong>兼容写法</strong><br>var oSrc = oEvent.srcElement || oEvent.target;</p>
<blockquote>
<p>注意：oSrc.tagName获取到的标签名都是大写</p>
</blockquote>
<h3 id="给子级循环添加事件-闭包的替代写法-gt-委托"><a href="#给子级循环添加事件-闭包的替代写法-gt-委托" class="headerlink" title="给子级循环添加事件 闭包的替代写法 -&gt; 委托"></a>给子级循环添加事件 闭包的替代写法 -&gt; 委托</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">window.onload=function()&#123;</div><div class="line">       var ul=document.getElementById(&quot;number&quot;);</div><div class="line">       var li=ul.getElementsByTagName(&quot;li&quot;);</div><div class="line">       var but=document.getElementById(&quot;add&quot;);</div><div class="line"></div><div class="line">       but.onclick=function()&#123;</div><div class="line">       	var li =document.createElement(&quot;li&quot;);</div><div class="line">       	li.innerHTML=&quot;hello&quot;;</div><div class="line">       	ul.appendChild(li)</div><div class="line">       &#125;</div><div class="line">       ul.onmouseover=function(ev)&#123;</div><div class="line">           var ev=ev||window.event;</div><div class="line">           var target=ev.target||ev.srcElement;</div><div class="line">           if(target.nodeName.toLowerCase()==&quot;li&quot;)&#123;</div><div class="line">               target.style.background=&quot;red&quot;;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       ul.onmouseout=function(ev)&#123;</div><div class="line">           var ev=ev||window.event;</div><div class="line">           var target=ev.target||ev.srcElement;</div><div class="line">           if(target.nodeName.toLowerCase()==&quot;li&quot;)&#123;</div><div class="line">               target.style.background=&quot;white&quot;;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line">       ul.onclick=function(ev)&#123;</div><div class="line">           var ev = event||window.event;</div><div class="line">           var target=ev.target||ev.srcElement  //获取事件源</div><div class="line">           if(target.nodeName==&quot;LI&quot; )&#123;</div><div class="line">               target.style.background=&quot;pink&quot;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       </div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-事件对象&quot;&gt;&lt;a href=&quot;#1-事件对象&quot; class=&quot;headerlink&quot; title=&quot;1. 事件对象&quot;&gt;&lt;/a&gt;1. 事件对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;event  事件对象(系统自带)&lt;br&gt;*兼容：Chrome IE系&lt;br&gt;FF -&amp;gt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：offset系类与style系类</title>
    <link href="http://yoursite.com/2015/07/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9Aoffset%E4%B8%8Estyle%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2015/07/17/前端知识点/前端知识点：offset与style系列/</id>
    <published>2015-07-17T11:39:15.000Z</published>
    <updated>2017-03-31T11:02:28.610Z</updated>
    
    <content type="html"><![CDATA[<p>#offset系类与style系类区分<br>首先offset系类，offset有left、top、width、height、四个值即offsetLeft,offsetTop,offsetHeight,offsetWidth</p>
<p><img src="/images/offset/1.png" alt="img"><br><img src="/images/offset/2.png" alt="img">   </p>
<p>offset系类与style系类区别就是:1 style系类只能获取行内的样式，如果样式没写，或写到了别处则无法获取。2 offset系类只读，style系类能读也能设置。3 offset系类值是数值，style系类值是字符串，需加+“px”。4 如果没有加定位，style可能获取的值可能是无效的。5 两者最大的区别在于offsetLeft以border左上角为基准，而styleLeft以margin左上角为基准。（如下图）</p>
<p><img src="/images/offset/3.png" alt="img"> </p>
<p>offsetParent:返回该对象距离最近的带有定位的父级，如果当前的父级元素都没有设置定位，offsetParent为body,如果当前父级元素设置了定位，offsetParent为那个父级元素。<br><strong>scroll系类：</strong>主要分为scrollTop,scrollLeft,scrollWidth,scrollHeight四个。</p>
<p><img src="/images/offset/4.png" alt="img"><br><strong>client系类：</strong>clientLeft和clientTop没用，他们就是borderTop和borderLeft。clientWidth和clientHeight：可视区域的宽度和高度不包括边框。</p>
<p><img src="/images/offset/5.png" alt="img">  <img src="/images/offset/6.png" alt="img"> </p>
<p>事件对象<br><img src="/images/offset/7.png" alt="img"> </p>
<p> 其中三个重要的坐标：</p>
<p><img src="/images/offset/8.png" alt="img"><br><img src="/images/offset/9.png" alt="img"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#offset系类与style系类区分&lt;br&gt;首先offset系类，offset有left、top、width、height、四个值即offsetLeft,offsetTop,offsetHeight,offsetWidth&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：各种宽高距离篇</title>
    <link href="http://yoursite.com/2015/07/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%90%84%E7%A7%8D%E5%AE%BD%E9%AB%98%E8%B7%9D%E7%A6%BB%E7%AF%87/"/>
    <id>http://yoursite.com/2015/07/15/前端知识点/前端知识点：各种宽高距离篇/</id>
    <published>2015-07-15T08:32:15.000Z</published>
    <updated>2017-03-31T10:45:31.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-滚动距离"><a href="#1-滚动距离" class="headerlink" title="1. 滚动距离"></a>1. 滚动距离</h2><p><strong>html简写：document.documentElement</strong></p>
<ul>
<li>document.body.scrollTop<br> 兼容：Chrome<br> 其他 -&gt; 0</li>
<li>document.documentElement.scrollTop<br> 兼容：IE、FF<br> 其他 -&gt; 0</li>
</ul>
<p><strong>兼容写法</strong><br>纵向：var scrollT = document.documentElement.scrollTop || document.body.scrollTop;<br>横向：var scrollL = document.documentElement.scrollLeft || document.body.scrollLeft;</p>
<h2 id="2-滚动高度"><a href="#2-滚动高度" class="headerlink" title="2. 滚动高度"></a>2. 滚动高度</h2><p>obj.scrollHeight</p>
<ul>
<li>内容高度 &gt; 盒模型高度    取内容高度</li>
<li>盒模型高度 &gt; 内容高度    去盒模型高度</li>
</ul>
<h2 id="3-可视区高度"><a href="#3-可视区高度" class="headerlink" title="3. 可视区高度"></a>3. 可视区高度</h2><ul>
<li>可视区高度：var clientH = document.documentElement.clientHeight;</li>
<li>可视区宽度：var clientW = document.documentElement.clientWidth;</li>
</ul>
<p>兼容：全兼容</p>
<h2 id="4-物体高度"><a href="#4-物体高度" class="headerlink" title="4. 物体高度"></a>4. 物体高度</h2><p><strong>获取的是盒模型大小 = width/height + padding + border;</strong></p>
<ul>
<li>物体的高度：var oH = obj.offsetHeight;</li>
<li>物体的宽度：var oW = obj.offsetWidth;</li>
</ul>
<blockquote>
<p>注意：offsetWidth/height只有append进body后才有，创建时获取不到盒模型的大小。</p>
</blockquote>
<h2 id="5-offsetHeight-amp-amp-getStyle"><a href="#5-offsetHeight-amp-amp-getStyle" class="headerlink" title="5. offsetHeight &amp;&amp; getStyle()"></a>5. offsetHeight &amp;&amp; getStyle()</h2><table>
<thead>
<tr>
<th></th>
<th>offsetHeight</th>
<th>getStyle()</th>
</tr>
</thead>
<tbody>
<tr>
<td>返回值</td>
<td>数字</td>
<td>字符串</td>
</tr>
<tr>
<td>获取值</td>
<td>获取的是盒模型的大小(width/height+padding+border)</td>
<td>获取的是纯width/height</td>
</tr>
<tr>
<td>display:none后</td>
<td>0</td>
<td>仍可以获取</td>
</tr>
</tbody>
</table>
<h2 id="6-物体的相对距离"><a href="#6-物体的相对距离" class="headerlink" title="6. 物体的相对距离"></a>6. 物体的相对距离</h2><ul>
<li>物体距离定位父级左边距离：var oL = obj.offsetLeft;</li>
<li>物体距离定位父级上边距离：var oT = obj.offsetTop;</li>
</ul>
<h2 id="7-关于父级"><a href="#7-关于父级" class="headerlink" title="7. 关于父级"></a>7. 关于父级</h2><ul>
<li>结构父级 obj.parentNode    根：document</li>
<li>定位父级 obj.offsetParent  根：body</li>
</ul>
<h2 id="8-封装一个物体距离左边-上边的绝对位置的函数"><a href="#8-封装一个物体距离左边-上边的绝对位置的函数" class="headerlink" title="8. 封装一个物体距离左边/上边的绝对位置的函数"></a>8. 封装一个物体距离左边/上边的绝对位置的函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function getPos(obj) &#123;        var l = 0;    // 距离左边的绝对距离</div><div class="line">        var t = 0;    // 距离上边的绝对距离</div><div class="line">        while(obj) &#123;</div><div class="line">            l += obj.offsetLeft;</div><div class="line">            t += obj.offsetTop;</div><div class="line">            obj = obj.offsetParent;    // 继续查找上一层定位父级</div><div class="line">        &#125;        return &#123;left: l, top: t&#125;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-滚动距离&quot;&gt;&lt;a href=&quot;#1-滚动距离&quot; class=&quot;headerlink&quot; title=&quot;1. 滚动距离&quot;&gt;&lt;/a&gt;1. 滚动距离&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;html简写：document.documentElement&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：原生篇(5)</title>
    <link href="http://yoursite.com/2015/04/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%8E%9F%E7%94%9F%E7%AF%87(5)/"/>
    <id>http://yoursite.com/2015/04/13/前端知识点/前端知识点：原生篇(5)/</id>
    <published>2015-04-13T10:37:15.000Z</published>
    <updated>2017-03-31T10:33:08.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-select下拉框的相关属性"><a href="#1-select下拉框的相关属性" class="headerlink" title="1. select下拉框的相关属性"></a>1. select下拉框的相关属性</h2><ul>
<li>选中的索引值<br>oSel.selectedIndex</li>
<li>获取所有选项<br>oSel.options</li>
<li>获取选中的选项的文本内容<br>oSel.options[oSel.selectedIndex].innerHTML<br>oSel.options[oSel.selectedIndex].text</li>
<li>添加选项<br>var option = new Option(文本内容, value值);<br>oSel.options.add(option);</li>
<li>删除选项<br>oSel.options.remove(index);</li>
</ul>
<h2 id="2-预解析"><a href="#2-预解析" class="headerlink" title="2. 预解析"></a>2. 预解析</h2><p>变量和函数的定义会预先解析，解析在当前script标签内的最上面</p>
<blockquote>
<p>作用域：(1)script (2)函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;   </div><div class="line">    var a = 111;    </div><div class="line">    function show() &#123;</div><div class="line">        alert(a);        </div><div class="line">        var a = 12;        // 相当于</div><div class="line">                           // var a;</div><div class="line">                           // alert(a);    //undefined</div><div class="line">                           // a = 12;</div><div class="line">    &#125;</div><div class="line">    show();        // undefined</div><div class="line">    alert(a);    // 111</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="3-已知计算机编码查看对应单词"><a href="#3-已知计算机编码查看对应单词" class="headerlink" title="3. 已知计算机编码查看对应单词"></a>3. 已知计算机编码查看对应单词</h2><p>String.fromCharCode(‘0x4e00’);     // 对应中文 “一”</p>
<ul>
<li>第一个中文     0x4e00 一</li>
<li>最后一个中文    0x9fa5 龥(yu)</li>
</ul>
<p><strong>unicode编码：以\u开头 \u4e00(一) ~ \u9fa5(龥)</strong></p>
<h2 id="4-字节长度和编码的关系"><a href="#4-字节长度和编码的关系" class="headerlink" title="4. 字节长度和编码的关系"></a>4. 字节长度和编码的关系</h2><p>英文、数组都占1个字节，与编码格式无关<br>UTF-8；中文占3个字节<br>GB2312：中文占2个字节</p>
<h3 id="封装一个求字节长度的函数"><a href="#封装一个求字节长度的函数" class="headerlink" title="封装一个求字节长度的函数"></a>封装一个求字节长度的函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    </div><div class="line">    function getBytesLen(str, type) &#123;    // 字符串，编码格式</div><div class="line">        var result = 0;</div><div class="line">        type = type.toLowerCase();        </div><div class="line">        for (var i = 0; i &lt; str.length; i++) &#123;</div><div class="line">            if(str.charAt(i) &gt;= &apos;\u4e00&apos; &amp;&amp; str.charAt(i) &lt;= &apos;\u9fa5&apos;) &#123;                if(type == &apos;gb2312&apos;) &#123;</div><div class="line">                    result += 2;</div><div class="line">                &#125; else &#123;</div><div class="line">                    result += 3;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                result++;</div><div class="line">            &#125;</div><div class="line">        &#125;        </div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="5-严格模式"><a href="#5-严格模式" class="headerlink" title="5. 严格模式"></a>5. 严格模式</h2><p><strong>非严格模式下，没有用var定义变量时为全局变量，全局的东西都属于window</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    </div><div class="line">    function show()&#123;</div><div class="line">        a = 12;        //a没有var时a为全局变量</div><div class="line">        alert(a);    //1. 12</div><div class="line">    &#125;</div><div class="line">    show();        //需先调用show函数</div><div class="line">    alert(a);    //2. 12</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>严格模式</p>
<p>在script标签内最上面写<code>&#39;use strict&#39;;</code>   <strong>IE6不识别但不报错</strong></p>
<p><code>&#39;use strict&#39;;</code>好处：</p>
<ol>
<li>修复局部this的问题</li>
<li>不允许if/while/for里面定义函数</li>
<li>去掉了with(){}</li>
<li>定义变量必须加var</li>
</ol>
<p>作用域：(1)当前script标签内 (2)函数  (3)js文件</p>
<p><strong>坑</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    </div><div class="line">    var a = 5;    </div><div class="line">    if(a % 2) &#123;        </div><div class="line">        function show() &#123;</div><div class="line">            alert(&apos;单数&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;        </div><div class="line">        function show() &#123;</div><div class="line">            alert(&apos;双数&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    show();    // 单数 最新版高级浏览器中预解析不会覆盖，之前版本预解析后此例预解析覆盖 弹出双数</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    </div><div class="line">    &apos;use strict&apos;;    </div><div class="line">    var a = 5;    </div><div class="line">    if(a % 2) &#123;        </div><div class="line">        function show() &#123;</div><div class="line">            alert(&apos;单数&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;        </div><div class="line">        function show() &#123;</div><div class="line">            alert(&apos;双数&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    show();    // show is not defined，严格模式不允许if/for里面定义函数</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-连等及逗号运算符"><a href="#6-连等及逗号运算符" class="headerlink" title="6. 连等及逗号运算符"></a>6. 连等及逗号运算符</h2><h3 id="连等"><a href="#连等" class="headerlink" title="连等"></a>连等</h3><p><strong>函数内部使用连等定义变量，第一个是局部变量，其余是全局变量。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    </div><div class="line">    function show()&#123;        </div><div class="line">        var a=b=c=1;    //a是局部变量，b、c是全局变量</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p><strong>逗号运算符 以最后一个为准</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    </div><div class="line">    var a = (1, 2, 3); // a=3</div><div class="line"></div><div class="line">    for (var i = 0, j = 5, k = 8; i &lt; 10, j &lt; 10, k &lt; 10; i++, j++, k++) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    alert(i + j + k); // 2+7+10=19</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="7-文本提示框"><a href="#7-文本提示框" class="headerlink" title="7. 文本提示框"></a>7. 文本提示框</h2><p>聚焦事件：oT.onfocus = function() {};<br>失焦事件：oT.onblur = function() {};</p>
<blockquote>
<p>强制获取一个焦点：oT.focus();<br>强制失去一个焦点：oT.blur();</p>
</blockquote>
<h2 id="8-form表单"><a href="#8-form表单" class="headerlink" title="8. form表单"></a>8. form表单</h2><p>想要提交数据须有</p>
<ol>
<li>action 提交的地址</li>
<li>name   数据名称</li>
<li>value  数据       input.value</li>
</ol>
<p>提交方式</p>
<ol>
<li>get(默认) 容量32K左右  不安全，有缓存<br><strong>好处：(1)分享 (2)收藏</strong></li>
<li>post      容量1G左右   相对安全，没有缓存</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-select下拉框的相关属性&quot;&gt;&lt;a href=&quot;#1-select下拉框的相关属性&quot; class=&quot;headerlink&quot; title=&quot;1. select下拉框的相关属性&quot;&gt;&lt;/a&gt;1. select下拉框的相关属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;选中的索引值
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：原生篇(4)</title>
    <link href="http://yoursite.com/2015/04/11/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%8E%9F%E7%94%9F%E7%AF%87(4)/"/>
    <id>http://yoursite.com/2015/04/11/前端知识点/前端知识点：原生篇(4)/</id>
    <published>2015-04-11T03:58:20.000Z</published>
    <updated>2017-03-31T10:26:04.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-参数的数组arguments"><a href="#1-参数的数组arguments" class="headerlink" title="1. 参数的数组arguments"></a>1. 参数的数组arguments</h2><p>参数中的数组，函数中可以不需要定义参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    sum(12, 5, 6);    function sum() &#123;        console.log(arguments[1]);    // 5</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="2-设置样式的三种方法"><a href="#2-设置样式的三种方法" class="headerlink" title="2. 设置样式的三种方法"></a>2. 设置样式的三种方法</h2><ol>
<li>style.xxx<br>oDiv.style.width = ‘300px’;</li>
<li>className<br>oDiv.className = ‘active’;</li>
<li>cssText<br>批量设置样式<br>oDiv.style.cssText = ‘width: 300px; height: 300px’;</li>
</ol>
<h2 id="3-字符串的相关方法"><a href="#3-字符串的相关方法" class="headerlink" title="3. 字符串的相关方法"></a>3. 字符串的相关方法</h2><ul>
<li>str.charAt(i); 获取字符串中的第i+1个字符  返回值：相应位置的字符</li>
</ul>
<blockquote>
<p>str[i]的兼容问题<br>获取字符串中的第i+1个</p>
<ul>
<li><p>str[i]  兼容：高级浏览器及IE8+</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;       IE7 -&gt; undefined</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>str.charAt(i)  全兼容</li>
</ul>
</blockquote>
<ul>
<li>str.indexOf(‘w’); 查找w在字符串中的位置  返回值：成功 -&gt; w在字符串中的位置  失败 -&gt; -1</li>
</ul>
<blockquote>
<ol>
<li>从左往右找</li>
<li>区分大小写</li>
<li>找到第一个相同值即停止</li>
<li>查找多个字符时，返回第一个字符的位置</li>
</ol>
</blockquote>
<ul>
<li>str.lastIndexOf(‘w’); 查找w在字符串中的位置  返回值：成功 -&gt; w在字符串中的位置  失败 -&gt; -1</li>
</ul>
<blockquote>
<p>从右往左倒序查找，返回的索引值与indexOf()规则相同</p>
</blockquote>
<ul>
<li>str.search(‘w’); 与indexOf()规则相同 <strong>常用于正则</strong></li>
<li>str.substring(开始位置, 结束位置); 截取字符串，包含开始位置，不包含结束位置</li>
</ul>
<blockquote>
<p>str.substring(开始位置); 截取字符串 <strong>从开始位置一直截取到最后</strong></p>
</blockquote>
<ul>
<li>str.substr(开始位置, 截取字符串长度); 定长截取字符串</li>
<li>str.slice(开始位置, 结束位置); 截取字符串</li>
<li>str.match(‘w’); 在字符串中匹配w <strong>常用于正则</strong> 返回值：成功 -&gt; 匹配的w  失败 -&gt; null</li>
<li>str.split(‘w’); 切割字符串 <strong>返回值类型：数组</strong></li>
</ul>
<blockquote>
<ol>
<li>字符串按w割开，去掉w后组成的数组</li>
<li><strong>若没找到w则原样返回一个长度为1的数组</strong></li>
<li>若为’’(空字符串，无空格)则返回将str中每个字符逐个拆开的数组</li>
</ol>
</blockquote>
<ul>
<li>str.toUpperCase(); str转大写<br>str.toLowerCase(); str转小写</li>
<li>str.replace(‘xxx’, ‘yyy’); <strong>常用于正则</strong> 参数：被替换内容,替换内容</li>
</ul>
<blockquote>
<ol>
<li><strong>修改第一个被替换内容</strong></li>
<li><strong>替换不修改原字符串, 需重新声明</strong></li>
<li><strong>第二个参数可为一个方法</strong></li>
<li><strong>replace可以连用</strong></li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var str = &apos;xxa&apos;;</div><div class="line">    str.replace(&apos;x&apos;,&apos;y&apos;);</div><div class="line">    str2 = str.replace(&apos;a&apos;, &apos;b&apos;);</div><div class="line">    str3 = str.replace(&apos;x&apos;, &apos;y&apos;).replace(&apos;a&apos;, &apos;b&apos;);</div><div class="line">    alert(str);     // xxa</div><div class="line">    alert(str.replace(&apos;x&apos;, &apos;y&apos;));   // yxa</div><div class="line">    alert(str2);    //xxb</div><div class="line">    alert(str3);    //yxb&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var str = &apos;xxxy&apos;;    var str2 = str.replace(&apos;xxx&apos;, function(s)&#123;</div><div class="line">        alert(s);    // xxx  被替换字符 数据类型：string</div><div class="line">        var str2 = &apos;&apos;;        for(var i = 0; i &lt; s.length; i++) &#123;</div><div class="line">            str2 += &apos;*&apos;;</div><div class="line">        &#125;        return str2;    // 替换后的内容</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    alert(str2);    // ***y&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>str.charCodeAt(i);    // 获取字符串中的第i+1个字符对应的ASCII编码</li>
</ul>
<blockquote>
<p>a-&gt; 0x61 -&gt; 97<br>b-&gt; 0x62 -&gt; 98<br>z -&gt; 0x7A -&gt; 122</p>
</blockquote>
<h2 id="4-字符串比较"><a href="#4-字符串比较" class="headerlink" title="4. 字符串比较"></a>4. 字符串比较</h2><ul>
<li>英文 按照字典序(a~z)依次比较，z为最大；从两字符串的第一个字符开始，若相当再比较下一个字符</li>
<li>数字 按照数字大小依次；从两字符串的第一个字符开始，若相当再比较下一个字符</li>
<li>汉字 按照unicode大小比较</li>
</ul>
<h2 id="5-字符串应用"><a href="#5-字符串应用" class="headerlink" title="5. 字符串应用"></a>5. 字符串应用</h2><h3 id="判断浏览器的类型"><a href="#判断浏览器的类型" class="headerlink" title="判断浏览器的类型"></a>判断浏览器的类型</h3><p>window.navigator.userAgent<br>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    if(window.navigator.userAgent.indexOf(&apos;Chrome&apos;) != -1) &#123;        console.log(&apos;Chrome&apos;);</div><div class="line">    &#125; else if(window.navigator.userAgent.indexOf(&apos;Firefox&apos;) != -1) &#123;        console.log(&apos;Firefox&apos;);</div><div class="line">    &#125; else if(window.navigator.userAgent.indexOf(&apos;MSIE7.0&apos;) != -1) &#123;</div><div class="line">        consolle.log(&apos;IE7&apos;);</div><div class="line">    &#125; else &#123;        console.log(&apos;others&apos;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="判断上传文件格式"><a href="#判断上传文件格式" class="headerlink" title="判断上传文件格式"></a>判断上传文件格式</h3><p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var index = str.lastIndexOf(&apos;.&apos;);       var type = str.substring(index+1);    //返回文件类型名&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-定义数组"><a href="#6-定义数组" class="headerlink" title="6. 定义数组"></a>6. 定义数组</h2><ol>
<li>var arr = [1, 2, 3];</li>
<li>var arr = new Array(1, 2, 3);</li>
</ol>
<blockquote>
<p>Array()只传一个参数时表示定义一个新数组的长度<br>new Array(10); 定义一个长度为10的数组</p>
</blockquote>
<h2 id="7-数组的相关方法"><a href="#7-数组的相关方法" class="headerlink" title="7. 数组的相关方法"></a>7. 数组的相关方法</h2><ul>
<li>arr.push(‘w’); 往数组最后面添加一项  返回值：新添加的那项</li>
<li>arr.unshift(‘w’); 往数组最前面添加一项  <strong>返回值：新数组长度</strong></li>
<li>arr.pop(); 删除数组最后一项  返回值：删除的那项</li>
<li>arr.shift(); 删除数组最前一项  返回值：删除的那项</li>
<li>arr.join(‘w’); 数组各项用w连接成一个字符串  <strong>返回值类型：字符串</strong></li>
<li>arr.concat(arr2, arr3, …); 数组arr与arr2、arr3…连接</li>
<li>arr.reverse(); 数组翻转</li>
<li>arr.sort(); 数组排序(按字典序和数字序列)</li>
</ul>
<blockquote>
<p>高级排序 数值排序</p>
<ul>
<li>从小到大<br>arr.sort(function(n1, n2){<br> return n1-n2;<br>});</li>
<li>从大到小<br>arr.sort(function(n1, n2){<br> return n2-n1;<br>});</li>
</ul>
</blockquote>
<ul>
<li>arr.splice(开始位置, 删除个数, 元素1, 元素2);</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var arr1=[1,2,3,4];</div><div class="line">   arr1.splice(1, 0, &apos;a&apos;, &apos;b&apos;);    //添加：在1后添加&apos;a&apos;,&apos;b&apos;    返回值：返回空数组</div><div class="line"></div><div class="line">   var arr2=[1,2,3,4];</div><div class="line">   arr2.splice(1, 2); //删除：删除2、3    返回值：返回删除的各项</div><div class="line"></div><div class="line">   var arr3=[1,2,3,4];</div><div class="line">   arr3.splice(1, 1, 8, 88, 888) //修改：先删除再添加 把2改为8,88,888    返回值：返回删除的各项&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>splice模拟方法<br>1) arr.push(c);    -&gt; arr.splice(arr.length, 0, c);<br>2）arr.unshift(c); -&gt; arr.splice(0, 0, c);<br>3）arr.pop();      -&gt; arr.splice(arr.length-1, 1);<br>4）arr.shift();    -&gt; arr.splice(0, 1);</p>
</blockquote>
<h2 id="8-json-object类型"><a href="#8-json-object类型" class="headerlink" title="8. json(object类型)"></a>8. json(object类型)</h2><p>json格式：{name:value,name2:value2, …}<br>json标准格式：{“name”:value, “name2”:value2, …}</p>
<blockquote>
<p>所有键名需双引号,键值非数字时需加引号<br>键值对没有json.length<br>json的name是唯一的</p>
</blockquote>
<ul>
<li>获取json值: json.name 或者 json[‘name’]</li>
<li>添加/修改: json.aaa = ‘bbb’; 或者 json[‘aaa’] = ‘bbb’;</li>
<li>删除: delete json.c; 或者 delete json[‘c’];</li>
<li>判断json内某个属性是否存在</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var json = &#123;a: 1, b: 2&#125;;</div><div class="line">    alert(&apos;c&apos; in json);    // false 属性c不存在&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="json和数组的区别"><a href="#json和数组的区别" class="headerlink" title="json和数组的区别"></a>json和数组的区别</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><ul>
<li>数组：有length</li>
<li>json：没有length</li>
</ul>
<h4 id="循环遍历方法"><a href="#循环遍历方法" class="headerlink" title="循环遍历方法"></a>循环遍历方法</h4><ul>
<li>数组：for(var i=0;i&lt;arr.length;i++){alert(arr[i])};    for循环</li>
<li>json：for(var name in json){alert(json[name])};        for in循环</li>
</ul>
<h3 id="访问元素下标类型"><a href="#访问元素下标类型" class="headerlink" title="访问元素下标类型"></a>访问元素下标类型</h3><ul>
<li>数组：arr[1]  数字</li>
<li>json：json[‘a’]  字符串</li>
</ul>
<h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><ul>
<li>数组：有序，根据下标访问</li>
<li>json：无序，根据键名访问</li>
</ul>
<h2 id="9-Math方法"><a href="#9-Math方法" class="headerlink" title="9. Math方法"></a>9. Math方法</h2><ol>
<li><code>Math.random()</code>                 0-1随机数（不包含1）</li>
<li><code>Math.abs(num)</code>            绝对值</li>
<li><code>Math.max(num1, num2, ...)</code>    最大数</li>
<li><code>Math.min(num1, num2, ...)</code>    最小数</li>
<li><code>Math.floor(num)</code>            向下取整    12.4 -&gt; 12    12.6 -&gt; 12</li>
<li><code>Math.ceil(num)</code>            向上取整    12.5 -&gt; 13    12.1 -&gt; 13</li>
<li><code>Math.pow(n, m)</code>            n的m次方    Math.pow(2, 3)=8;</li>
<li><code>Math.sqrt(num)</code>            num开平方    Math.sqrt(9)=3;</li>
<li><code>Math.round(num)</code>            四舍五入    12.1 -&gt; 12    12.6 -&gt; 13</li>
</ol>
<blockquote>
<p><code>num.toFixed(保留小数个数);</code>  保留几位小数(自动四舍五入)</p>
</blockquote>
<h2 id="10-try-catch捕获异常"><a href="#10-try-catch捕获异常" class="headerlink" title="10. try-catch捕获异常"></a>10. try-catch捕获异常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    try &#123;        // code</div><div class="line">    &#125; catch(ex) &#123;    // exception</div><div class="line">        console.log(ex.message);    // 查看错误信息</div><div class="line"></div><div class="line">        // 错误的提示信息</div><div class="line">        // 补救的代码</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-参数的数组arguments&quot;&gt;&lt;a href=&quot;#1-参数的数组arguments&quot; class=&quot;headerlink&quot; title=&quot;1. 参数的数组arguments&quot;&gt;&lt;/a&gt;1. 参数的数组arguments&lt;/h2&gt;&lt;p&gt;参数中的数组，函数中可以
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：原生篇(3)</title>
    <link href="http://yoursite.com/2015/04/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%8E%9F%E7%94%9F%E7%AF%87(3)/"/>
    <id>http://yoursite.com/2015/04/10/前端知识点/前端知识点：原生篇(3)/</id>
    <published>2015-04-10T07:15:42.000Z</published>
    <updated>2017-03-31T10:24:44.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-返回值问题-return"><a href="#1-返回值问题-return" class="headerlink" title="1. 返回值问题(return)"></a>1. 返回值问题(return)</h2><ol>
<li>return语句后面的代码不执行</li>
<li><strong>函数若没有写return，则默认返回undefined</strong></li>
<li><strong>函数返回语句为return; 也返回undefined</strong></li>
<li><strong>return必须写在函数function内</strong></li>
</ol>
<h2 id="2-undefined出现的情况"><a href="#2-undefined出现的情况" class="headerlink" title="2. undefined出现的情况"></a>2. undefined出现的情况</h2><ol>
<li>函数没有返回值或只有return;</li>
<li>定义了一个变量，但没有赋值</li>
</ol>
<blockquote>
<p>eg: var a; // undefined<br>​     function show(a) {}<br>​     show();    // undefined</p>
</blockquote>
<ol>
<li>访问不存在的属性</li>
</ol>
<blockquote>
<p>eg: oDiv.aaa;    // undefined</p>
</blockquote>
<h2 id="3-eval-字符串"><a href="#3-eval-字符串" class="headerlink" title="3. eval(字符串)"></a>3. eval(字符串)</h2><blockquote>
<p>虽然这个不建议使用，但还是聊聊这个东西是怎么用的吧</p>
</blockquote>
<p>eval能把字符串里面的代码转换成js能理解的程序，把引号中的拿出来运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var a = &apos;[1, 2, 3]&apos;;    //字符串</div><div class="line">    alert(eval(a));        // 1, 2, 3  &apos;[1, 2, 3]&apos; -&gt; [1, 2, 3]&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="4-数字小于10的补零函数"><a href="#4-数字小于10的补零函数" class="headerlink" title="4. 数字小于10的补零函数"></a>4. 数字小于10的补零函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function toTen(num) &#123;        if(num &lt; 10) &#123;            return &apos;0&apos; + num;</div><div class="line">        &#125; else &#123;            return &apos;&apos; + num;    // 函数的返回类型最好保持一致</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>简化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function toTen(num) &#123;        return num &lt; 10 ? &apos;0&apos; + num : &apos;&apos; + num;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="5-定时器"><a href="#5-定时器" class="headerlink" title="5. 定时器"></a>5. 定时器</h2><ol>
<li>Interval(每过一段时间执行一次，循环执行)</li>
</ol>
<ul>
<li>开启定时器<br>setInterval(函数/函数名, 时间);</li>
</ul>
<blockquote>
<p>时间单位是毫秒</p>
</blockquote>
<ul>
<li>关闭定时器<br>clearInterval(定时器的名字);</li>
</ul>
<ol>
<li>Timeout(过一段时间执行一次，只执行一次)</li>
</ol>
<ul>
<li>开启定时器<br>setTimeout(函数/函数名, 时间);</li>
</ul>
<blockquote>
<p>时间单位是毫秒</p>
</blockquote>
<ul>
<li>关闭定时器<br>clearTimeout(定时器的名字);</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;        // 定时器先关后开</div><div class="line">    var bSin = false;        var timer = setInterval(function() &#123;            if(bSin) &#123;                return;</div><div class="line">        &#125;</div><div class="line">        bSin = true;</div><div class="line">    &#125;, 30);        function clear() &#123;</div><div class="line">        clearInterval(timer);</div><div class="line">        bSin = false;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-日期对象"><a href="#6-日期对象" class="headerlink" title="6. 日期对象"></a>6. 日期对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // 获取时间</div><div class="line">    var oDate = new Date();</div><div class="line">    oDate.getFullYear();    // 获取年</div><div class="line">    oDate.getMonth();        // 获取月，从0开始，获取+1，设置-1 !important</div><div class="line">    oDate.getDate();        // 获取日</div><div class="line">    oDate.getDay();            // 获取星期，星期天 -&gt; 0，星期一 ~ 星期六 -&gt; 1 ~ 6</div><div class="line"></div><div class="line">    oDate.getHours();        // 获取小时，记得加s，下同 !important</div><div class="line">    oDate.getMinutes();        // 获取分钟</div><div class="line">    oDate.getSeconds();        // 获取秒</div><div class="line">    oDate.getMillseconds();    // 获取毫秒</div><div class="line">    oDate.getTime();         // 时间戳 当前时间距离1970/1/1凌晨的毫秒数&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    // 设置时间</div><div class="line">    var oDate = new Date();</div><div class="line">    oDate.setFulllYear(2017, 11, 13);    // 设置年、月、日  月份设置时-1</div><div class="line">    oDate.setHours(0, 0, 0, 0);            // 设置时、分、秒、毫秒</div><div class="line"></div><div class="line">    // 获得时间戳</div><div class="line">    oDate.getTime();    // 设置后的时间距离1970/1/1凌晨的毫秒数&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="7-日期对象应用"><a href="#7-日期对象应用" class="headerlink" title="7. 日期对象应用"></a>7. 日期对象应用</h2><blockquote>
<p>oDate.setDate(31); // 假设本月有30天会跑到下个月的第一天 会自动进位<br>oDate.setDate(0); // 会跑到上个月的最后一天</p>
</blockquote>
<h3 id="本月有多少天"><a href="#本月有多少天" class="headerlink" title="本月有多少天"></a>本月有多少天</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var oDate = new Date();</div><div class="line">    oDate.setMonth(oDate.getMonth() + 1); // 当前月份+1</div><div class="line">    oDate.setDate(0);    // setDate(0);</div><div class="line">    alert(oDate.getDate());&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="本月第一天是周几"><a href="#本月第一天是周几" class="headerlink" title="本月第一天是周几"></a>本月第一天是周几</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var oDate = new Date();</div><div class="line">    oDate.setDate(1);    // setDate(1);</div><div class="line">    alert(oDate.getDay());&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="本月最后一天是周几"><a href="#本月最后一天是周几" class="headerlink" title="本月最后一天是周几"></a>本月最后一天是周几</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    var oDate = new Date();</div><div class="line">    oDate.setMonth(oDate.getMonth()+1);    // 当前月份+1</div><div class="line">    oDate.setDate(0);    // setDate(0);</div><div class="line">    alert(oDate.getDay());&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="8-事件函数相同可以合并"><a href="#8-事件函数相同可以合并" class="headerlink" title="8. 事件函数相同可以合并"></a>8. 事件函数相同可以合并</h2><p>eg: oDiv1.onmouseout = oDiv2.onmouseout = function() {};</p>
<h2 id="9-this"><a href="#9-this" class="headerlink" title="9. this"></a>9. this</h2><p>this: 当前方法属于谁，this就是谁<br><strong>this默认属于window</strong></p>
<p>定时器里的this不能直接使用，原因：this指向了window</p>
<p>1.定时器中的this不指向元素，指向window<br>解决：在定时器外保存this<br>oBtn.onclick = function() {<br>   var _this = this;<br>   setTimeout(function(){<br>​       _this.style.background = ‘#f00’;<br>   },1000);<br>}<br>2.调用封装函数使用this，this不指向元素，指向window<br>3.(低级浏览器attachEvent)事件绑定里面的this 报错</p>
<h2 id="10-闭包"><a href="#10-闭包" class="headerlink" title="10. 闭包"></a>10. 闭包</h2><p>用处：</p>
<ol>
<li>解决变量名冲突</li>
<li>解决循环添加事件，事件中的循环变量不能用的问题</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function clickEg() &#123;        //获取一组按钮    ps:js一组元素不能一起改变样式或设置事件</div><div class="line">        var aBtn = document.getElementsByTagName(&apos;button&apos;);        for(var i = 0; i &lt; 3; i++) &#123;</div><div class="line">            aBtn[i].onclick = function() &#123;                //循环中的i变量此时已自增至3</div><div class="line">                //aBtn[i].style.background = &apos;#f00&apos;;</div><div class="line"></div><div class="line">                //当前事件发生的对象 aBtn[i]为this</div><div class="line">                this.style.background = &apos;f00&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>闭包写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function clickEg() &#123;        //获取一组按钮    ps:js一组元素不能一起改变样式或设置事件</div><div class="line">        var aBtn = document.getElementsByTagName(&apos;button&apos;);        for(var i = 0; i &lt; 3; i++) &#123;</div><div class="line">            (function(index) &#123;</div><div class="line">                aBtn[i].onclick = function() &#123;</div><div class="line">                    aBtn[index].style.background = &apos;f00&apos;;</div><div class="line">                &#125;</div><div class="line">            &#125;)(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    for(var i=0; i&lt;2; i++) &#123;</div><div class="line">        setTimeout(function()&#123;</div><div class="line">            alert(i);</div><div class="line">        &#125;, 2000);</div><div class="line">    &#125;    // 结果：两秒后alert两次2，两秒后i已为2，然后执行两次循环&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>闭包写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    for(var i=0; i&lt;2; i++) &#123;</div><div class="line">        (function(a)&#123;</div><div class="line">            setTimeout(function()&#123;</div><div class="line">                alert(a);</div><div class="line">            &#125;,2000);</div><div class="line">        &#125;)(i);</div><div class="line">    &#125;    // 结果：两秒后alert 0、1&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-返回值问题-return&quot;&gt;&lt;a href=&quot;#1-返回值问题-return&quot; class=&quot;headerlink&quot; title=&quot;1. 返回值问题(return)&quot;&gt;&lt;/a&gt;1. 返回值问题(return)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;return语句后面的代
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：原生篇(2)</title>
    <link href="http://yoursite.com/2015/04/07/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%8E%9F%E7%94%9F%E7%AF%87(2)/"/>
    <id>http://yoursite.com/2015/04/07/前端知识点/前端知识点：原生篇(2)/</id>
    <published>2015-04-07T09:38:20.000Z</published>
    <updated>2017-03-31T10:21:09.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-js操作元素属性"><a href="#1-js操作元素属性" class="headerlink" title="1. js操作元素属性"></a>1. js操作元素属性</h2><ul>
<li><strong>.</strong> 属性操作符(不可以接收变量)</li>
<li><strong>[]</strong> 中括号可以操作属性也可以接收变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function setValue() &#123;        //省略获取元素oBtn, oBtn2的伪代码</div><div class="line">        oBtn.value = &apos;bbb&apos;;</div><div class="line">        oBtn2[&apos;value&apos;] = &apos;bbb&apos;;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>凡是<strong>.</strong> 出现的地方都可以用中括号替代</p>
</blockquote>
<h2 id="2-js设置复杂样式"><a href="#2-js设置复杂样式" class="headerlink" title="2. js设置复杂样式"></a>2. js设置复杂样式</h2><blockquote>
<p>非首单词的首字母大写并去掉-符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .complex &#123;</div><div class="line">        margin-left: 10px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function setStyle() &#123;        var oC = document.getElementsByClassName(&apos;complex&apos;)[0];</div><div class="line">        oC.style.marginLeft = &apos;10px&apos;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="3-物体从中心放大"><a href="#3-物体从中心放大" class="headerlink" title="3. 物体从中心放大"></a>3. 物体从中心放大</h2><blockquote>
<ul>
<li>margin-top: -变化的高度/2</li>
<li>margin-left: -变化的宽度/2</li>
</ul>
</blockquote>
<h2 id="4-a链接防止刷新"><a href="#4-a链接防止刷新" class="headerlink" title="4. a链接防止刷新"></a>4. a链接防止刷新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;#&quot;&gt;点击会刷新页面&lt;/a&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;javascript:;&quot;&gt;点击不会刷新页面！(推荐使用)&lt;/a&gt;</div><div class="line">&lt;!-- javascript:;相当于一个伪协议 --&gt;</div></pre></td></tr></table></figure>
<h2 id="5-循环添加事件，事件中的循环变量不能用"><a href="#5-循环添加事件，事件中的循环变量不能用" class="headerlink" title="5. 循环添加事件，事件中的循环变量不能用"></a>5. 循环添加事件，事件中的循环变量不能用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function clickEg() &#123;        //获取一组按钮    ps:js一组元素不能一起改变样式或设置事件</div><div class="line">        var aBtn = document.getElementsByTagName(&apos;button&apos;);        for(var i = 0; i &lt; 3; i++) &#123;</div><div class="line">            aBtn[i].onclick = function() &#123;                //循环中的i变量此时已自增至3</div><div class="line">                //aBtn[i].style.background = &apos;#f00&apos;;</div><div class="line"></div><div class="line">                //当前事件发生的对象 aBtn[i]为this</div><div class="line">                this.style.background = &apos;f00&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="6-浏览器加载的过程"><a href="#6-浏览器加载的过程" class="headerlink" title="6. 浏览器加载的过程"></a>6. 浏览器加载的过程</h2><p>1.加载整个页面的标签和属性<br>2.过滤不符合W3C标准的标签和属性(高级浏览器)<br>3.执行js -&gt; window.onload</p>
<h2 id="7-DOM获取元素方法"><a href="#7-DOM获取元素方法" class="headerlink" title="7. DOM获取元素方法"></a>7. DOM获取元素方法</h2><h3 id="1-document-getElementById-‘id’"><a href="#1-document-getElementById-‘id’" class="headerlink" title="1.document.getElementById(‘id’);"></a>1.document.getElementById(‘id’);</h3><h3 id="2-document-obj-getElementsByTagName-‘TagName’"><a href="#2-document-obj-getElementsByTagName-‘TagName’" class="headerlink" title="2.document/obj.getElementsByTagName(‘TagName’);"></a>2.document/obj.getElementsByTagName(‘TagName’);</h3><h3 id="3-document-obj-getElementsByClassName-‘ClassName’"><a href="#3-document-obj-getElementsByClassName-‘ClassName’" class="headerlink" title="3.document/obj.getElementsByClassName(‘ClassName’);"></a>3.document/obj.getElementsByClassName(‘ClassName’);</h3><p>兼容：Chrome、FF、IE9+</p>
<p>obj.getElementsByClassName</p>
<ul>
<li><p>高级浏览器 -&gt; function</p>
</li>
<li><p>IE8- -&gt; undefined</p>
<h4 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;  function getByClass(obj, sClass) &#123;    // obj为从哪个父级下面查找类为sClass的元素</div><div class="line">          if(obj.getElementsByClassName) &#123;    // IE8- -&gt; undefined  高级浏览器 -&gt; function</div><div class="line">              return obj.getElementsByClassName(sClass);    // 高级浏览器</div><div class="line">          &#125; else &#123;    // IE8</div><div class="line">              var aEle = document.getElementsByTagName(&apos;*&apos;);              var arr = [];              for(var i=0; i&lt;aEle.length; i++)&#123;                  var temp = aEle[i].className.split(&apos; &apos;);                  if(findInArr(sClass, temp)) &#123;</div><div class="line">                      arr.push(aEle[i]);</div><div class="line">                  &#125;</div><div class="line">              &#125;              return arr;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<ul>
<li>getElementById只能从document下获取<br> var oDiv = document.getElementById(‘id’);</li>
<li>getElementsByTagName/getElementsByClassName可以从document下获取，也可以从父级下获取<br> var oDiv2 = document.getElementsByClassName(‘ClassName’)[0];<br> var oDiv3 = oBox.getElementsByTagName(‘TagName’)[0];</li>
</ul>
</blockquote>
<h2 id="8-js中的真假"><a href="#8-js中的真假" class="headerlink" title="8. js中的真假"></a>8. js中的真假</h2><ul>
<li>真：非0数字，非空字符串，true，非空对象</li>
<li>假：0，空字符串(‘’)，false，空对象(null)，undefined，NaN</li>
</ul>
<h2 id="9-获取元素当前样式-兼容"><a href="#9-获取元素当前样式-兼容" class="headerlink" title="9. 获取元素当前样式(兼容)"></a>9. 获取元素当前样式(兼容)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function getStyle(obj, name)&#123;    //元素，样式名称</div><div class="line">        if(obj.currentStyle) &#123;    // Chrome、FF -&gt; undefined    IE -&gt; object</div><div class="line">            // IE系</div><div class="line">            return obj.currentStyle[name];    // 兼容IE系</div><div class="line">        &#125; else &#123;            // Chrome、FF</div><div class="line">            return getComputedStyle(obj, false)[name];    // 兼容高级浏览器(Chrome、FF、IE9+)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>简化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function getStyle(obj, name)&#123;    //元素，样式名称</div><div class="line">        return (obj.currentStyle || getComputedStyle(obj, false))[name];</div><div class="line">    &#125;    // 调用</div><div class="line">    console.log(parseInt(getStyle(oDiv, &apos;heihgt&apos;)));&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="10-获取一个n-m之间的随机数-n-lt-m，且不包括m"><a href="#10-获取一个n-m之间的随机数-n-lt-m，且不包括m" class="headerlink" title="10. 获取一个n~m之间的随机数(n&lt;m，且不包括m)"></a>10. 获取一个n~m之间的随机数(n&lt;m，且不包括m)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;    function rnd(n, m) &#123;        return parseInt(Math.random() * (m - n) + n);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>应用：随机变色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; &lt;script&gt;    // rgb色值范围[0, 255]</div><div class="line">&gt;     oDiv.style.background = &apos;rgb(&apos; + rnd(0, 256) + &apos;,&apos; + rnd(0, 256) + &apos;,&apos; + rnd(0, 256) + &apos;)&apos;;&lt;/script&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-js操作元素属性&quot;&gt;&lt;a href=&quot;#1-js操作元素属性&quot; class=&quot;headerlink&quot; title=&quot;1. js操作元素属性&quot;&gt;&lt;/a&gt;1. js操作元素属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt; 属性操作符(不可以接收
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点：原生篇(1)</title>
    <link href="http://yoursite.com/2015/04/07/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%E5%8E%9F%E7%94%9F%E7%AF%87(1)/"/>
    <id>http://yoursite.com/2015/04/07/前端知识点/前端知识点：原生篇(1)/</id>
    <published>2015-04-07T01:10:46.000Z</published>
    <updated>2017-03-31T10:19:06.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-js六大数据类型"><a href="#1-js六大数据类型" class="headerlink" title="1. js六大数据类型"></a>1. js六大数据类型</h2><blockquote>
<p>这里的数据类型是按照typeof返回来分类，也不是很懂有些教程写数据类型还有null，求解答数据类型应该是哪几类？</p>
</blockquote>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li>number    数字</li>
<li>string    字符串</li>
<li>boolean   布尔</li>
<li>undefined 未定义</li>
<li>function  函数</li>
</ul>
<h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><ul>
<li>object    对象(可拆分为多种数据类型)</li>
</ul>
<h2 id="2-数据类型补充"><a href="#2-数据类型补充" class="headerlink" title="2. 数据类型补充"></a>2. 数据类型补充</h2><ul>
<li>null空对象 -&gt; 数据类型(object)</li>
<li>NaN 非数字 -&gt; 数据类型(number)</li>
</ul>
<blockquote>
<p>NaN和任何数据类型都不相等，包括自己</p>
</blockquote>
<h2 id="3-数字相关判断方法"><a href="#3-数字相关判断方法" class="headerlink" title="3. 数字相关判断方法"></a>3. 数字相关判断方法</h2><ul>
<li><h3 id="是否是数字"><a href="#是否是数字" class="headerlink" title="是否是数字"></a>是否是数字</h3><p>isNaN() 非数字-&gt;true  数字-&gt;false</p>
</li>
<li><h3 id="是否是整数"><a href="#是否是整数" class="headerlink" title="是否是整数"></a>是否是整数</h3><p>if(num == parseInt(num))</p>
</li>
</ul>
<h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4. 变量"></a>4. 变量</h2><ol>
<li><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3></li>
<li><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3></li>
<li><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>子函数可以使用父函数的全局变量</p>
</li>
</ol>
<blockquote>
<p>变量的遮蔽<br> 全局变量和局部变量同名<br> 就近原则-&gt;在函数里优先使用自己的变量</p>
</blockquote>
<h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h2><ol>
<li><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3></li>
<li><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">== -&gt; !=    === -&gt; !==</div></pre></td></tr></table></figure>
</li>
<li><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3></li>
<li><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3></li>
</ol>
<h2 id="6-常见变量命名前缀"><a href="#6-常见变量命名前缀" class="headerlink" title="6. 常见变量命名前缀"></a>6. 常见变量命名前缀</h2><table>
<thead>
<tr>
<th>前缀</th>
<th>全称</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>o</td>
<td>object</td>
<td>一个对象，一个元素</td>
<td>oDiv</td>
</tr>
<tr>
<td>a</td>
<td>array</td>
<td>一组元素</td>
<td>aLi</td>
</tr>
<tr>
<td>s</td>
<td>string</td>
<td>字符串</td>
<td>sUserName</td>
</tr>
<tr>
<td>i</td>
<td>integer</td>
<td>整数</td>
<td>iCount</td>
</tr>
<tr>
<td>f</td>
<td>float</td>
<td>浮点数</td>
<td>fPrice</td>
</tr>
<tr>
<td>b</td>
<td>boolean</td>
<td>布尔</td>
<td>bOk</td>
</tr>
<tr>
<td>fn</td>
<td>function</td>
<td>函数</td>
<td>fnSucc</td>
</tr>
<tr>
<td>re</td>
<td>RegExp</td>
<td>正则</td>
<td>reMailCheck</td>
</tr>
</tbody>
</table>
<h2 id="7-字符串转化为数字"><a href="#7-字符串转化为数字" class="headerlink" title="7. 字符串转化为数字"></a>7. 字符串转化为数字</h2><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><ul>
<li>从左往右开始找，找到第一个非数字(包含小数点)就停止，如果第一个数不是数字，则返回NaN</li>
<li>eg: ‘12.5’ -&gt; 12    ‘12abc’ -&gt; 12    ‘abc’ -&gt; NaN</li>
</ul>
<h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h3><ul>
<li>从左往右开始找，找到第一个非数字(不包含小数点)就停止，如果第一个数不是数字，则返回NaN</li>
<li>eg: ‘12.5’ -&gt; 12.5    ‘12abc’ -&gt; 12    ‘abc’ -&gt; NaN</li>
</ul>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><ul>
<li>既能处理整数，也能处理小数，但只能处理数字</li>
<li>eg: ‘12.5’ -&gt; 12.5     ‘12’ -&gt; 12         ‘12abc’ -&gt; NaN     ‘abc’ -&gt; NaN</li>
</ul>
<h2 id="8-数字转化为字符串"><a href="#8-数字转化为字符串" class="headerlink" title="8. 数字转化为字符串"></a>8. 数字转化为字符串</h2><p>number + ‘’</p>
<blockquote>
<p>eg：12 + ‘’ -&gt; ‘12’</p>
</blockquote>
<h2 id="9-if语句变形"><a href="#9-if语句变形" class="headerlink" title="9. if语句变形"></a>9. if语句变形</h2><ol>
<li>条件 &amp;&amp; 语句; (条件为真时执行)</li>
<li>条件 || 语句; (条件为假时执行)</li>
<li>三目运算  条件? 语句1: 语句2;</li>
</ol>
<h2 id="10-js及事件的概念"><a href="#10-js及事件的概念" class="headerlink" title="10. js及事件的概念"></a>10. <strong>js</strong>及<strong>事件</strong>的概念</h2><ul>
<li>js：修改样式</li>
<li>事件：用户的操作</li>
</ul>
<blockquote>
<p>任何标签都可以添加事件，任何属性都可以修改</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-js六大数据类型&quot;&gt;&lt;a href=&quot;#1-js六大数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. js六大数据类型&quot;&gt;&lt;/a&gt;1. js六大数据类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这里的数据类型是按照typeof返回来分类，也
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript逻辑运算符“||”和“&amp;&amp;”</title>
    <link href="http://yoursite.com/2015/03/07/js%E7%B1%BB/javascript%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%88%96%E9%9D%9E/"/>
    <id>http://yoursite.com/2015/03/07/js类/javascript逻辑运算符与或非/</id>
    <published>2015-03-07T13:00:20.000Z</published>
    <updated>2017-03-31T09:35:50.582Z</updated>
    
    <content type="html"><![CDATA[<p>#一、先来说说||（逻辑或）,从字面上来说，只有前后都是false的时候才返回false，否则返回true。</p>
<p>alert(true||false);    // true<br>alert(false||true);    // true<br>alert(true||true);        // true<br>alert(false||false);    // false</p>
<p>##二、但是，从深层意义上来说的话，却有另一番天地，试下面代码</p>
<p>alert(0||1);</p>
<p>显然，我们知道，前面0意味着false,而后面1意味着true,那么上面的结果应该是true,而事实返回的结果是1。再看下面代码：</p>
<p>alert(2||1);</p>
<p>我们知道，前面2是true,后面1也是true,那返回结果又是什么呢？测试结果是2,继续看：</p>
<p>alert(‘a’||1);</p>
<p>同样，前面’a’是true，后面1也是true;测试结果是’a’,下面</p>
<p>alert(‘’||1);</p>
<p>由上，我们知道前面’’是false,后面1是true,而返回结果是1。再看下面</p>
<p>alert(‘a’||0);</p>
<p> 前面’a’是true，而后面0是false,返回结果是’a’，继续下面</p>
<p>alert(‘a’||’b’);</p>
<p> 前面’a’是true,后面’b’是false,返回结果是’a’，我们继续下面</p>
<p>alert(‘’||0);</p>
<p> 前面’’是false,后面0同样是false,返回结果是0</p>
<p>alert(0||’’);</p>
<p>前面0是false，后面’’是false，返回结果是’’</p>
<p>这就意味</p>
<p>1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。</p>
<p>2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。<br>二、下面说说&amp;&amp;（逻辑与）,从字面上来说，只有前后都是true的时候才返回true，否则返回false。</p>
<p>alert(true&amp;&amp;false);    // false<br>alert(true&amp;&amp;true);    // true<br>alert(false&amp;&amp;false);    // false<br>alert(false&amp;&amp;true);    // false</p>
<p>然后，根据上面经验，我们看看“&amp;&amp;”号前后，不单单是布尔类型的情况。</p>
<p>alert(‘’&amp;&amp;1);</p>
<p>结是返回’’,“&amp;&amp;”前面’’是false,后面是1是true。</p>
<p>alert(‘’&amp;&amp;0);</p>
<p>结是返回’’,“&amp;&amp;”前面’’是false,后面是0也是false。</p>
<p>alert(‘a’&amp;&amp;1);</p>
<p>结是返回1,“&amp;&amp;”前面’’a是true,后面是1也是true。</p>
<p>alert(‘a’&amp;&amp;0);</p>
<p>结是返回0,“&amp;&amp;”前面’’a是true,后面是0是false。</p>
<p>alert(‘a’&amp;&amp;’’);</p>
<p>结是返回’’,“&amp;&amp;”前面’’a是true,后面是’’是false。</p>
<p>alert(0&amp;&amp;’a’);</p>
<p>结是返回0,“&amp;&amp;”前面’’0是false,后面是’a’是true。</p>
<p>alert(0&amp;&amp;’’);</p>
<p>结是返回0,“&amp;&amp;”前面’’0是false,后面是’’也是false。 </p>
<p>这意味着</p>
<p>1、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;</p>
<p>2、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;</p>
<p>让我们总结一下：</p>
<p>1、只要“||”前面为false，无论“||”后面是true还是false，结果都返回“||”后面的值。</p>
<p>2、只要“||”前面为true，无论“||”后面是true还是false，结果都返回“||”前面的值。</p>
<p>3、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;</p>
<p>4、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;</p>
<p>由上两个测试可知，逻辑运算符，“||”和“&amp;&amp;”都是遵行短路原则，只要确定符号前面的真假，既可确定返回值。</p>
<p>需要说明的是“&amp;&amp;”的优先级是高于“||”的，下面测试：</p>
<p>alert(1||’a’&amp;&amp;2);</p>
<p>返回结果是1。</p>
<p>根据反证原理，我们假设“||”的优先级不低于“&amp;&amp;”（这里只所以用“不低于”，是为了同时证明等级相同的情况）。</p>
<p>根据上面我们得出的结论（1），（1||’a’）将返回前面的值1，(1&amp;&amp;2)根据结论(4)应该返回后面的值2。这显然不对，由此可知“&amp;&amp;”的优先级是高于“||”的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#一、先来说说||（逻辑或）,从字面上来说，只有前后都是false的时候才返回false，否则返回true。&lt;/p&gt;
&lt;p&gt;alert(true||false);    // true&lt;br&gt;alert(false||true);    // true&lt;br&gt;alert(t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js运算符的优先级</title>
    <link href="http://yoursite.com/2015/03/07/js%E7%B1%BB/js%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://yoursite.com/2015/03/07/js类/js运算符的优先级/</id>
    <published>2015-03-07T09:00:44.000Z</published>
    <updated>2017-03-31T09:44:34.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-操作符种类"><a href="#1-1-操作符种类" class="headerlink" title="1.1 操作符种类"></a>1.1 <strong>操作符种类</strong></h2><p>一、算数运算符（+—*/…）</p>
<p>a) 一元运算符：正号、负号、++、–、平方等一个变量就能运算</p>
<p>b) 二元运算符：+-*/%等两个变量才能运算</p>
<p>c) 三元运算符：    值1？值2：值3；</p>
<p>二、逻辑运算符（ |&amp; ! ）（或且非）</p>
<p>三、比较运算符（&lt;、&gt;、==、&gt;=…）</p>
<p>四、赋值运算符（=、+=、-=、*=、/=、%=）</p>
<h2 id="1-2-优先级"><a href="#1-2-优先级" class="headerlink" title="1.2 优先级**"></a>1.2 <strong>优先级<em>**</em></strong></h2><p><img src="file:///C:\Users\LIUXIA~1\AppData\Local\Temp\ksohtml\wps436F.tmp.jpg" alt="![img](file:///C:/Users/LIUXIA~1/AppData/Local/Temp/ksohtml/wps436F.tmp.jpg?lastModify=1490953363)![img](file:///C:/Users/LIUXIA~1/AppData/Local/Temp/ksohtml/wps436F.tmp.jpg?lastModify=1490953363)img"></p>
<p>1 () </p>
<p>2 !、-（负数）、++、– （正数省略+）（一元运算）</p>
<p>3 *、/、% </p>
<p>4 +、- （加，减）（二元运算）</p>
<p>5 &lt;、&lt;=、&lt;、&gt;= （一级逻辑运算）</p>
<p>6 ==、!=、===、!==、 （二级逻辑运算）</p>
<p>7 &amp;&amp; （三级级逻辑运算）</p>
<p>8 || </p>
<p>9?: （三元运算）</p>
<p>10 =、+=、-=、*=、/=、%= （赋值运算）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-操作符种类&quot;&gt;&lt;a href=&quot;#1-1-操作符种类&quot; class=&quot;headerlink&quot; title=&quot;1.1 操作符种类&quot;&gt;&lt;/a&gt;1.1 &lt;strong&gt;操作符种类&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;一、算数运算符（+—*/…）&lt;/p&gt;
&lt;p&gt;a) 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>null和undefined</title>
    <link href="http://yoursite.com/2015/02/09/js%E7%B1%BB/undefine%E5%92%8C%E6%88%96null%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2015/02/09/js类/undefine和或null区别/</id>
    <published>2015-02-09T07:07:27.000Z</published>
    <updated>2017-03-31T08:06:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript中的null和undefined"><a href="#javascript中的null和undefined" class="headerlink" title="javascript中的null和undefined"></a>javascript中的null和undefined</h1><h2 id="null和undefined在JavaScript中的含义"><a href="#null和undefined在JavaScript中的含义" class="headerlink" title="null和undefined在JavaScript中的含义"></a>null和undefined在JavaScript中的含义</h2><p>在JavaScript中，将一个变量赋值为undefined或null，老实说，几乎没区别。</p>
<h3 id="null的含义"><a href="#null的含义" class="headerlink" title="null的含义"></a>null的含义</h3><ul>
<li><code>null</code>是JavaScript的关键字，常用来描述“空值”。</li>
<li>在浏览器的控制台对<code>null</code>用<code>typeof</code>函数<code>typeof(null)</code></li>
</ul>
<p>1</p>
<p>返回的是<code>object</code>，可以认为<code>null</code>是一个特殊的对象值，含义是“无对象”。</p>
<ul>
<li>对<code>null</code>使用<code>Number</code>函数<code>Number(null);10+null;</code></li>
</ul>
<p>2</p>
<p>返回0,说明在装换为数字的时候识别为0</p>
<ul>
<li><p>在转为布尔型的时候</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(!null)</div><div class="line">console.log(&quot;null is false&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>3</p>
<p>语句执行，说明<code>null</code>在转换为布尔值的时候是’false’</p>
<h3 id="undefined的含义"><a href="#undefined的含义" class="headerlink" title="undefined的含义"></a>undefined的含义</h3><ul>
<li><code>undefined</code>不是JavaScript的关键字，用未定义的值表示更深层次的“空值”。<code>undefined</code>是预定义的全局变量，它的值就是“未定义”.</li>
<li>对<code>undefined</code>使用<code>typeof</code>函数<code>typeof(undefined);</code></li>
</ul>
<p>3</p>
<p>返回的还是<code>undefined</code>，表明这个值是这个类型的唯一成员。</p>
<ul>
<li>使用<code>Number</code>函数<code>Number(undefined);</code></li>
</ul>
<p>4</p>
<p>返回值是<code>NaN</code>，说明转化为数字的时候是<code>NaN</code></p>
<ul>
<li><p>转化为布尔值的时候</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(!undefined)</div><div class="line">console.log(&quot;undefined is false&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>5</p>
<p>转为布尔值的时候表示为<code>false</code></p>
<h2 id="null和undefined的差别"><a href="#null和undefined的差别" class="headerlink" title="null和undefined的差别"></a>null和undefined的差别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(null==undefined)</div><div class="line">console.log(&quot;相等&quot;);</div><div class="line">else</div><div class="line">console.log(&quot;不相等&quot;);</div></pre></td></tr></table></figure>
<p>6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(null===undefined)</div><div class="line">console.log(&quot;相等&quot;);</div><div class="line">else</div><div class="line">console.log(&quot;不相等&quot;);</div></pre></td></tr></table></figure>
<p>7</p>
<p>通过<code>==</code>和<code>===</code>的判断，<code>null</code>和<code>undefined</code>本质上是不相等的，<code>==</code>判断的情况下是因为<code>==</code>在判断之前先进行类型的转换，转为布尔型之后都是false相等。而<code>===</code>没有进行类型转换的比较。</p>
<h3 id="当前null和undefined的用法"><a href="#当前null和undefined的用法" class="headerlink" title="当前null和undefined的用法"></a>当前null和undefined的用法</h3><p>上面这样的区分，在实践中会被证明不可行。目前，null和undefined基本是同义的，只有一些细微的差别。</p>
<blockquote>
<p>null表示”没有对象”，即该处不应该有值。典型用法是：</p>
<ul>
<li><p>作为函数的参数，表示该函数的参数不是对象。</p>
</li>
<li><p>作为对象原型链的终点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;   Object.getPrototypeOf(Object.prototype)</div><div class="line">&gt;   // null</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</p>
<ul>
<li>变量被声明了，但没有赋值时，就等于undefined。</li>
<li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>
<li>对象没有赋值的属性，该属性的值为undefined。</li>
<li>数组元素没有被赋值</li>
<li>函数没有返回值时，默认返回undefined。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var i;</div><div class="line">i // undefined</div><div class="line"></div><div class="line">function f(x)&#123;console.log(x)&#125;</div><div class="line">f() // undefined</div><div class="line"></div><div class="line">var  o = new Object();</div><div class="line">o.p // undefined</div><div class="line"></div><div class="line">var x = f();</div><div class="line">x // undefined</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript中的null和undefined&quot;&gt;&lt;a href=&quot;#javascript中的null和undefined&quot; class=&quot;headerlink&quot; title=&quot;javascript中的null和undefined&quot;&gt;&lt;/a&gt;javascri
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IE盒子模型和标准W3C盒子模型</title>
    <link href="http://yoursite.com/2015/02/07/css%E7%B1%BB/CSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2015/02/07/css类/CSS命名规范/</id>
    <published>2015-02-07T03:08:43.000Z</published>
    <updated>2017-03-31T07:48:34.628Z</updated>
    
    <content type="html"><![CDATA[<p><strong>IE盒子模型和标准W3C盒子模型 </strong></p>
<p>盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟悉的标准盒子模型：</p>
<p><a href="http://b37.photo.store.qq.com/http_imgload.cgi?/rurl4_b=aa67b94eca21e0280b825b731719d55336fd198939b9c825ceda71a63fe39444f9d5c89334566ec4ef93e7b2758245ad4ab4920ba2023a3f2423a7e1a71d8765fb87632ee194307a5fd0081fc81f87a9d064711f&amp;a=44&amp;b=37" target="_blank" rel="external"><img src="http://a2.qpic.cn/psu?/43a6ab06-24cc-485a-8bd1-d0bba679cb9e/Ej5AL.cSwgkFeA6DqLvDQLv2nEhKzNk14iZlSy8oa.A!/b/Yfm*TRpPTwAAYh6sJBa1sgAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;su=1202516422&amp;tm=1490943600&amp;sce=0-12-12&amp;rf=2-9" alt="图片"></a></p>
<p>从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。</p>
<p>IE 盒子模型</p>
<p><a href="http://b44.photo.store.qq.com/http_imgload.cgi?/rurl4_b=aa67b94eca21e0280b825b731719d553d535af5205b67d379a42c21f005e3665b779a51deaebeb44f52845269d186987dc744d8b8177fcf2d74b8b5748dd0d6ba08fbb8b83dc07fd036d94f0c8ff125882a4f830&amp;a=43&amp;b=44" target="_blank" rel="external"><img src="http://a1.qpic.cn/psu?/43a6ab06-24cc-485a-8bd1-d0bba679cb9e/xhWhAT.5tNev43WIiPIXHQ3Ej*Cl4J9vsh09xdwr9IU!/b/YQNbpBmKiwAAYvXwPBpZTgAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;su=1264009744&amp;tm=1490943600&amp;sce=0-12-12&amp;rf=2-9" alt="图片"></a></p>
<p>从上图可以看到 IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 <strong>content 部分包含了 border 和 pading。</strong></p>
<p>从上图可以看到 IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 pading。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">45.CSS的盒子模型？</div><div class="line">（1）两种， IE 盒子模型、标准 W3C 盒子模型；`IE 的content部分包含了 border 和 pading;`</div><div class="line">（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;IE盒子模型和标准W3C盒子模型 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟悉的标准盒子模
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Div+CSS命名规范大全</title>
    <link href="http://yoursite.com/2015/01/02/css%E7%B1%BB/Div+CSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2015/01/02/css类/Div+CSS命名规范大全/</id>
    <published>2015-01-02T04:00:20.000Z</published>
    <updated>2017-03-31T07:39:17.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Div-CSS命名规范大全"><a href="#Div-CSS命名规范大全" class="headerlink" title="Div+CSS命名规范大全"></a>Div+CSS命名规范大全</h1><p>工作中，写页面经常会出现我们起class名的时候，词穷！！！甚至有些词舍不得用，比如说left，right，center，等词语，一直舍不得用，等到页面写完了，发现还是没有用上。。。<br>　　css命名这个也是很重要的，毕竟我们写的代码不是给自己看的，毕竟工作中写页面都是分模块来写，每个人负责不同区域，但是后期还是都要放一起看的，先不说你名字太俗，先的脸面不好看。<br>　　主要是后期别的同事来添加修改编写效果等都要看的，如果别人看不懂，，那就耽误事了，要一点一点看你的布局。<br>　　特别是后期的线上项目维护，如果你class命名写的太那啥，，，别人看不懂，就非常麻烦，所有今天就发一些常用命名以及规范吧。不啰嗦，直接正题。<br>　　当然，如果你时候，你体格强壮，抗揍，那我服，，，你可以随便起：比如aaa，，bjnh。。等等，</p>
<h4 id="class命名："><a href="#class命名：" class="headerlink" title="class命名："></a>class命名：</h4><p>头：header　　<br>内容：content/container　　<br>尾：footer　　<br>导航：nav　　<br>侧栏：sidebar<br>栏目：column　　<br>页面外围控制整体布局宽度：wrapper　　<br>左右中：left right center　　<br>登录条：loginbar　　<br>标志：logo　　<br>抽奖：raffle<br>广告：banner　　<br>页面主体：main　　<br>热点：hot　　<br>新闻：news<br>下载：download　　<br>子导航：subnav　　<br>菜单：menu　　<br>子菜单：submenu　　<br>搜索：search　　<br>友情链接：friendlink　　<br>页脚：footer　　<br>版权：copyright　　<br>滚动：scroll　　<br>内容：content<br>标签页：tab<br>文章列表：list<br>提示信息：msg<br>小技巧：tips<br>栏目标题：title<br>加入：joinus<br>指南：guild<br>服务：service<br>注册：regsiter<br>状态态：status<br>投票：vote<br>合作伙伴：partner</p>
<h4 id="id的命名"><a href="#id的命名" class="headerlink" title="id的命名"></a>id的命名</h4><p>容器: container<br>页头：header<br>内容：content/container<br>页面主体：main<br>页尾：footer<br>导航：nav<br>侧栏：sidebar<br>栏目：column<br>页面外围控制整体布局宽度：wrapper<br>左右中：left right center</p>
<p><strong>页面结构 </strong><br>容器: container<br>页头：header<br>内容：content/container<br>页面主体：main<br>页尾：footer<br>导航：nav<br>侧栏：sidebar<br>栏目：column<br>页面外围控制整体布局宽度：wrapper<br>左右中：left right center</p>
<p><strong>导航 </strong><br>导航：nav<br>主导航：mainbav<br>子导航：subnav<br>顶导航：topnav<br>边导航：sidebar<br>左导航：leftsidebar<br>右导航：rightsidebar<br>菜单：menu<br>子菜单：submenu<br>标题: title<br>摘要: summary</p>
<p><strong>功能 </strong><br>标志：logo<br>广告：banner<br>登陆：login<br>登录条：loginbar<br>注册：regsiter<br>搜索：search<br>功能区：shop<br>标题：title<br>加入：joinus<br>状态：status<br>按钮：btn<br>滚动：scroll<br>标签页：tab<br>文章列表：list<br>提示信息：msg<br>当前的: current<br>小技巧：tips<br>图标: icon<br>注释：note<br>指南：guild<br>服务：service<br>热点：hot<br>新闻：news<br>下载：download<br>投票：vote<br>合作伙伴：partner<br>友情链接：link<br>版权：copyright</p>
<h4 id="class的命名规范"><a href="#class的命名规范" class="headerlink" title="class的命名规范"></a>class的命名规范</h4><p><strong>(1)</strong>颜色:使用颜色的名称或者16进制代码,如<br>.red { color: red; }<br>.f60 { color: #f60; }<br>.ff8600 { color: #ff8600; }</p>
<p><strong>(2)</strong>字体大小,直接使用”font+字体大小”作为名称,如<br>.font12px { font-size: 12px; }<br>.font9pt {font-size: 9pt; }</p>
<p><strong>(3)</strong>对齐样式,使用对齐目标的英文名称,如</p>
<p>.left { float:left; }<br>.bottom { float:bottom; }</p>
<p><strong>(4)</strong>标题栏样式,使用”类别+功能”的方式命名,如<br>.barnews { }<br>.barproduct { }</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.一律小写;<br>2.尽量用英文;<br>3.尽量不缩写，除非一看就明白的单词.<br>主要的 master.css<br>模块 module.css<br>基本共用 base.css<br>布局，版面 layout.css<br>主题 themes.css<br>专栏 columns.css<br>文字 font.css<br>表单 forms.css<br>补丁 mend.css<br>打印 print.css</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Div-CSS命名规范大全&quot;&gt;&lt;a href=&quot;#Div-CSS命名规范大全&quot; class=&quot;headerlink&quot; title=&quot;Div+CSS命名规范大全&quot;&gt;&lt;/a&gt;Div+CSS命名规范大全&lt;/h1&gt;&lt;p&gt;工作中，写页面经常会出现我们起class名的时候，词
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>eslint配置</title>
    <link href="http://yoursite.com/2014/12/08/%E5%B7%A5%E5%85%B7%E7%B1%BB/eslint%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2014/12/08/工具类/eslint配置/</id>
    <published>2014-12-08T07:02:02.000Z</published>
    <updated>2017-03-31T07:02:00.407Z</updated>
    
    <content type="html"><![CDATA[<p>EsLint帮助我们检查Javascript编程时的语法错误。比如：在Javascript应用中，你很难找到你漏泄的变量或者方法。EsLint能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。<br>EsLint是建立在Esprima(ECMAScript解析架构)的基础上的。Esprima支持ES5.1,本身也是用ECMAScript编写的，用于多用途分析。EsLint不但提供一些默认的规则（可扩展），也提供用户自定义规则来约束我们写的Javascript代码。<br><a id="more"></a></p>
<p>我们在全局安装<code>npm install eslint -g</code></p>
<p>然后再初始化eslint<code>eslint --init</code></p>
<p>然后我们配置的时候<br>第一种初始化方式<br><img src="/images/eslint-1.png" alt="img"><br><img src="/images/eslint-1.png" alt="img"><br><img src="/images/eslint-1.png" alt="img"></p>
<p><img src="/images/eslint-4.png" alt="img"></p>
<p>第二种初始化方式<br><img src="/images/eslint-5.png" alt="img"></p>
<p>然后就可以了  重启我们的vscode就可以进行代码风格检查了</p>
<ul>
<li>文档 &lt;<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="external">http://eslint.cn/docs/user-guide/configuring</a><a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="external">http://eslint.cn/docs/user-guide/configuring</a>ESLint的2种配置:<strong>Configuration Comments</strong> - 使用 JavaScript 注释把配置信息直接嵌入到一个文件。<strong>Configuration Files</strong> - 使用 JavaScript、JSON 或者 YAML 文件为整个目录和它的子目录指定配置信息。可以用 .eslintrc.* 文件或者在 package.json 文件里的 eslintConfig 字段这两种方式进行配置，ESLint 会查找和自动读取它们，再者，你可以在命令行指定一个配置文件。</li>
</ul>
<blockquote>
<blockquote>
<p>有很多配置信息:</p>
<ul>
<li><strong>Environments</strong> -指定脚本的运行环境 每种环境都有一组特定的预定义全局变量</li>
<li><strong>Globals</strong> -脚本在执行期间访问的额外全局变量</li>
<li><strong>Rules</strong> -启用的规则及各自的错误级别</li>
</ul>
</blockquote>
</blockquote>
<h3 id="Configuring-Rules-配置规则"><a href="#Configuring-Rules-配置规则" class="headerlink" title="Configuring Rules 配置规则"></a>Configuring Rules 配置规则</h3><p>ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用哪些规则。改变一个规则设置，你必须设置规则 ID 等于这些值之一：</p>
<ul>
<li>“off”或0 -关闭规则</li>
<li>“warn” 或1 - 开启规则, 使用警告 程序不会退出</li>
<li>“error”或2 - 开启规则, 使用错误 程序退出</li>
</ul>
<p>为了在文件注释里配置规则，使用以下格式的注释：</p>
<p><code>/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</code><br>在这个例子里，eqeqeq 规则被关闭，curly 规则被打开，定义为错误级别。你也可以使用对应的数字定义规则严重程度：</p>
<p><code>/* eslint eqeqeq: 0, curly: 2 */</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;rules&quot;: &#123;</div><div class="line">    &quot;eqeqeq&quot;: &quot;off&quot;,</div><div class="line">    &quot;curly&quot;: &quot;error&quot;,</div><div class="line">    &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;],</div><div class="line">    &quot;plugin1/rule1&quot;: &quot;error&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="临时禁止规则出现警告"><a href="#临时禁止规则出现警告" class="headerlink" title="临时禁止规则出现警告"></a>临时禁止规则出现警告</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* eslint-disable */</span></div><div class="line">alert(<span class="string">'foo'</span>);</div><div class="line"><span class="comment">/* eslint-enable */</span></div></pre></td></tr></table></figure>
<h3 id="rule解释"><a href="#rule解释" class="headerlink" title="rule解释"></a>rule解释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></div><div class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></div><div class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></div><div class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></div><div class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></div><div class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></div><div class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></div><div class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></div><div class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></div><div class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></div><div class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></div><div class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></div><div class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></div><div class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></div><div class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></div><div class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></div><div class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></div><div class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></div><div class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></div><div class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></div><div class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></div><div class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></div><div class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></div><div class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></div><div class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></div><div class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></div><div class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></div><div class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></div><div class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></div><div class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></div><div class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></div><div class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></div><div class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></div><div class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></div><div class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></div><div class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></div><div class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></div><div class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></div><div class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></div><div class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></div><div class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></div><div class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></div><div class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></div><div class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></div><div class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></div><div class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></div><div class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></div><div class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></div><div class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></div><div class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">0</span>,<span class="comment">//不能用多余的空格</span></div><div class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></div><div class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">3</span>&#125;],<span class="comment">//空行最多不能超过2行</span></div><div class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></div><div class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></div><div class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></div><div class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></div><div class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></div><div class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></div><div class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></div><div class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></div><div class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></div><div class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></div><div class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></div><div class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></div><div class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></div><div class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></div><div class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></div><div class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></div><div class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></div><div class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></div><div class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></div><div class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></div><div class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></div><div class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></div><div class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></div><div class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></div><div class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></div><div class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></div><div class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></div><div class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></div><div class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></div><div class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></div><div class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></div><div class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></div><div class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></div><div class="line"><span class="string">"no-undef"</span>: <span class="number">2</span>,<span class="comment">//不能有未定义的变量</span></div><div class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></div><div class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></div><div class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></div><div class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></div><div class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></div><div class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></div><div class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></div><div class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></div><div class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></div><div class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></div><div class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></div><div class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></div><div class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></div><div class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></div><div class="line"></div><div class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></div><div class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></div><div class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></div><div class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></div><div class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></div><div class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></div><div class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></div><div class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></div><div class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></div><div class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></div><div class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></div><div class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></div><div class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></div><div class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></div><div class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></div><div class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></div><div class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></div><div class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></div><div class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></div><div class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></div><div class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></div><div class="line"><span class="string">"eqeqeq"</span>: <span class="number">0</span>,<span class="comment">//必须使用全等</span></div><div class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></div><div class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></div><div class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></div><div class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></div><div class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></div><div class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></div><div class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">2</span>],<span class="comment">//缩进风格</span></div><div class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></div><div class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></div><div class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></div><div class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></div><div class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></div><div class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></div><div class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></div><div class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></div><div class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></div><div class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></div><div class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></div><div class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></div><div class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></div><div class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></div><div class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></div><div class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></div><div class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></div><div class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></div><div class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></div><div class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></div><div class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></div><div class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></div><div class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></div><div class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></div><div class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></div><div class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></div><div class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></div><div class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></div><div class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></div><div class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></div><div class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></div><div class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></div><div class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></div><div class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></div><div class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></div><div class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></div><div class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></div><div class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></div><div class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></div><div class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></div><div class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></div><div class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></div><div class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></div><div class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></div></pre></td></tr></table></figure>
<p>vue 2.0 自定义规则如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">parser</span>: <span class="string">'babel-eslint'</span>,</div><div class="line">  <span class="attr">parserOptions</span>: &#123;</div><div class="line">    <span class="attr">sourceType</span>: <span class="string">'module'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// required to lint *.vue files</span></div><div class="line">  plugins: [</div><div class="line">    <span class="string">'html'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// add your custom rules here</span></div><div class="line">  <span class="string">'rules'</span>: &#123;</div><div class="line">    <span class="comment">// allow debugger during development</span></div><div class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</div><div class="line">    <span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></div><div class="line">    <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></div><div class="line">    <span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></div><div class="line">    <span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></div><div class="line">    <span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></div><div class="line">    <span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></div><div class="line">    <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></div><div class="line">    <span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></div><div class="line">    <span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></div><div class="line">    <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></div><div class="line">    <span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></div><div class="line">    <span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></div><div class="line">    <span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></div><div class="line">    <span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></div><div class="line">    <span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></div><div class="line">    <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></div><div class="line">    <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></div><div class="line">    <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></div><div class="line">    <span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></div><div class="line">    <span class="string">"no-empty"</span>: <span class="number">0</span>,<span class="comment">//块语句中的内容不能为空</span></div><div class="line">    <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></div><div class="line">    <span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></div><div class="line">    <span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></div><div class="line">    <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></div><div class="line">    <span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></div><div class="line">    <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></div><div class="line">    <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></div><div class="line">    <span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></div><div class="line">    <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></div><div class="line">    <span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></div><div class="line">    <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></div><div class="line">    <span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></div><div class="line">    <span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></div><div class="line">    <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></div><div class="line">    <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></div><div class="line">    <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></div><div class="line">    <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></div><div class="line">    <span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></div><div class="line">    <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></div><div class="line">    <span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></div><div class="line">    <span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></div><div class="line">    <span class="string">"no-labels"</span>: <span class="number">0</span>,<span class="comment">//禁止标签声明</span></div><div class="line">    <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></div><div class="line">    <span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></div><div class="line">    <span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></div><div class="line">    <span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></div><div class="line">    <span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></div><div class="line">    <span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></div><div class="line">    <span class="string">"no-multi-spaces"</span>: <span class="number">0</span>,<span class="comment">//不能用多余的空格</span></div><div class="line">    <span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></div><div class="line">    <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">3</span>&#125;],<span class="comment">//空行最多不能超过2行</span></div><div class="line">    <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></div><div class="line">    <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></div><div class="line">    <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></div><div class="line">    <span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></div><div class="line">    <span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></div><div class="line">    <span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></div><div class="line">    <span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></div><div class="line">    <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></div><div class="line">    <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></div><div class="line">    <span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></div><div class="line">    <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></div><div class="line">    <span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></div><div class="line">    <span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></div><div class="line">    <span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></div><div class="line">    <span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></div><div class="line">    <span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></div><div class="line">    <span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></div><div class="line">    <span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></div><div class="line">    <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></div><div class="line">    <span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></div><div class="line">    <span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></div><div class="line">    <span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></div><div class="line">    <span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></div><div class="line">    <span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></div><div class="line">    <span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></div><div class="line">    <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></div><div class="line">    <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></div><div class="line">    <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></div><div class="line">    <span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></div><div class="line">    <span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></div><div class="line">    <span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></div><div class="line">    <span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></div><div class="line">    <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></div><div class="line">    <span class="string">"no-undef"</span>: <span class="number">2</span>,<span class="comment">//不能有未定义的变量</span></div><div class="line">    <span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></div><div class="line">    <span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></div><div class="line">    <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></div><div class="line">    <span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></div><div class="line">    <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></div><div class="line">    <span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></div><div class="line">    <span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></div><div class="line">    <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></div><div class="line">    <span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></div><div class="line">    <span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></div><div class="line">    <span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></div><div class="line">    <span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></div><div class="line">    <span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></div><div class="line">    <span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></div><div class="line"></div><div class="line">    <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></div><div class="line">    <span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></div><div class="line">    <span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></div><div class="line">    <span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></div><div class="line">    <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></div><div class="line">    <span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></div><div class="line">    <span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></div><div class="line">    <span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></div><div class="line">    <span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></div><div class="line">    <span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></div><div class="line">    <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></div><div class="line">    <span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></div><div class="line">    <span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></div><div class="line">    <span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></div><div class="line">    <span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></div><div class="line">    <span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></div><div class="line">    <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></div><div class="line">    <span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></div><div class="line">    <span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></div><div class="line">    <span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></div><div class="line">    <span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></div><div class="line">    <span class="string">"eqeqeq"</span>: <span class="number">0</span>,<span class="comment">//必须使用全等</span></div><div class="line">    <span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></div><div class="line">    <span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></div><div class="line">    <span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></div><div class="line">    <span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></div><div class="line">    <span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></div><div class="line">    <span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></div><div class="line">    <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">2</span>],<span class="comment">//缩进风格</span></div><div class="line">    <span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></div><div class="line">    <span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></div><div class="line">    <span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></div><div class="line">    <span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></div><div class="line">    <span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></div><div class="line">    <span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></div><div class="line">    <span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></div><div class="line">    <span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></div><div class="line">    <span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></div><div class="line">    <span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></div><div class="line">    <span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></div><div class="line">    <span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></div><div class="line">    <span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></div><div class="line">    <span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></div><div class="line">    <span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></div><div class="line">    <span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></div><div class="line">    <span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></div><div class="line">    <span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></div><div class="line">    <span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></div><div class="line">    <span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></div><div class="line">    <span class="string">"quotes"</span>: [<span class="number">0</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></div><div class="line">    <span class="string">"quote-props"</span>:[<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></div><div class="line">    <span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></div><div class="line">    <span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></div><div class="line">    <span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></div><div class="line">    <span class="string">"semi"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></div><div class="line">    <span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">false</span>&#125;],<span class="comment">//分号前后空格</span></div><div class="line">    <span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></div><div class="line">    <span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></div><div class="line">    <span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></div><div class="line">    <span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></div><div class="line">    <span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></div><div class="line">    <span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></div><div class="line">    <span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></div><div class="line">    <span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></div><div class="line">    <span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></div><div class="line">    <span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></div><div class="line">    <span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></div><div class="line">    <span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></div><div class="line">    <span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></div><div class="line">    <span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></div><div class="line">    <span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></div><div class="line">    <span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EsLint帮助我们检查Javascript编程时的语法错误。比如：在Javascript应用中，你很难找到你漏泄的变量或者方法。EsLint能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。&lt;br&gt;EsLint是建立在Esprima(ECMAScript解析架构)的基础上的。Esprima支持ES5.1,本身也是用ECMAScript编写的，用于多用途分析。EsLint不但提供一些默认的规则（可扩展），也提供用户自定义规则来约束我们写的Javascript代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="主要讲解eslint配置方法" scheme="http://yoursite.com/tags/%E4%B8%BB%E8%A6%81%E8%AE%B2%E8%A7%A3eslint%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS命名规范</title>
    <link href="http://yoursite.com/2014/12/07/css%E7%B1%BB/CSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http://yoursite.com/2014/12/07/css类/CSS命名规范的意义/</id>
    <published>2014-12-06T17:00:20.000Z</published>
    <updated>2017-03-31T07:11:29.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-CSS命名规范的意义"><a href="#1-CSS命名规范的意义" class="headerlink" title="1.CSS命名规范的意义"></a>1.CSS命名规范的意义</h3><p>这里所说i的命名规范有两层含义，一是命名含义与元素相关，二是命名内容要精简，具体例子如下：</p>
<p>命名含义与元素相关</p>
<p>精简的命名规则</p>
<p>从我对命名规范的理解，可以演绎出命名规范的意义所在：</p>
<ul>
<li>富有含义的命名规定对于开发者来说，更容易读懂</li>
<li>精简的命名规范能够提高代码的整洁度和用户体验</li>
<li>精简的含义不仅仅包括命名的简洁性，还包括浏览器对页面的渲染速度，即良好的命名规范可以提高页面渲染速度</li>
<li>良好的命名规则会在精确性和复用性上权衡</li>
</ul>
<h2 id="1-1-命名规则"><a href="#1-1-命名规则" class="headerlink" title="1.1 命名规则"></a>1.1 命名规则</h2><p>驼峰命名规则：getElementById/matherAndFather/aaaOrBbbAndCcc</p>
<p>遵从规则：</p>
<p>1.变量命名必须以字母或是下标符号”_”或者”$”为开头。</p>
<p>2.变量名长度不能超过255个字符。</p>
<p>3.变量名中不允许使用空格，首个字不能为数字。</p>
<p>4.不用使用脚本语言中保留的关键字及保留符号作为变量名。</p>
<p>5.变量名区分大小写。(javascript是区分大小写的语言)</p>
<p>6.汉语可以作为变量名。但是不建议使用！！！（low）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-CSS命名规范的意义&quot;&gt;&lt;a href=&quot;#1-CSS命名规范的意义&quot; class=&quot;headerlink&quot; title=&quot;1.CSS命名规范的意义&quot;&gt;&lt;/a&gt;1.CSS命名规范的意义&lt;/h3&gt;&lt;p&gt;这里所说i的命名规范有两层含义，一是命名含义与元素相关，二是
    
    </summary>
    
    
  </entry>
  
</feed>
